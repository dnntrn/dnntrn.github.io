"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/shadergradient";
exports.ids = ["vendor-chunks/shadergradient"];
exports.modules = {

/***/ "(ssr)/./node_modules/shadergradient/dist/without-store.mjs":
/*!************************************************************!*\
  !*** ./node_modules/shadergradient/dist/without-store.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.Canvas),\n/* harmony export */   Placeholder: () => (/* binding */ ua),\n/* harmony export */   ReactThreeFiber: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.ReactThreeFiber),\n/* harmony export */   ShaderGradient: () => (/* binding */ bp),\n/* harmony export */   ShaderGradientCanvas: () => (/* binding */ Ff),\n/* harmony export */   _roots: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__._roots),\n/* harmony export */   act: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.act),\n/* harmony export */   addAfterEffect: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.addAfterEffect),\n/* harmony export */   addEffect: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.addEffect),\n/* harmony export */   addTail: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.addTail),\n/* harmony export */   advance: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.advance),\n/* harmony export */   applyProps: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.applyProps),\n/* harmony export */   buildGraph: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.buildGraph),\n/* harmony export */   context: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.context),\n/* harmony export */   createEvents: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.createEvents),\n/* harmony export */   createPortal: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.createPortal),\n/* harmony export */   createRoot: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.createRoot),\n/* harmony export */   dispose: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.dispose),\n/* harmony export */   events: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.events),\n/* harmony export */   extend: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.extend),\n/* harmony export */   flushGlobalEffects: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.flushGlobalEffects),\n/* harmony export */   getRootState: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.getRootState),\n/* harmony export */   invalidate: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.invalidate),\n/* harmony export */   reconciler: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.reconciler),\n/* harmony export */   render: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.render),\n/* harmony export */   unmountComponentAtNode: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.unmountComponentAtNode),\n/* harmony export */   useFrame: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.useFrame),\n/* harmony export */   useGraph: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.useGraph),\n/* harmony export */   useInstanceHandle: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.useInstanceHandle),\n/* harmony export */   useLoader: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.useLoader),\n/* harmony export */   useStore: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.useStore),\n/* harmony export */   useThree: () => (/* reexport safe */ _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.useThree)\n/* harmony export */ });\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-8afac004.esm.js\");\nvar ra = Object.create;\nvar zt = Object.defineProperty, oa = Object.defineProperties, na = Object.getOwnPropertyDescriptor, ia = Object.getOwnPropertyDescriptors, sa = Object.getOwnPropertyNames, wt = Object.getOwnPropertySymbols, aa = Object.getPrototypeOf, Ar = Object.prototype.hasOwnProperty, Qo = Object.prototype.propertyIsEnumerable;\nvar Zo = (t, e, r)=>e in t ? zt(t, e, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: r\n    }) : t[e] = r, D = (t, e)=>{\n    for(var r in e ||= {})Ar.call(e, r) && Zo(t, r, e[r]);\n    if (wt) for (var r of wt(e))Qo.call(e, r) && Zo(t, r, e[r]);\n    return t;\n}, W = (t, e)=>oa(t, ia(e));\nvar Z = (t, e)=>{\n    var r = {};\n    for(var o in t)Ar.call(t, o) && e.indexOf(o) < 0 && (r[o] = t[o]);\n    if (t != null && wt) for (var o of wt(t))e.indexOf(o) < 0 && Qo.call(t, o) && (r[o] = t[o]);\n    return r;\n};\nvar Je = (t, e)=>()=>(e || t((e = {\n            exports: {}\n        }).exports, e), e.exports), me = (t, e)=>{\n    for(var r in e)zt(t, r, {\n        get: e[r],\n        enumerable: !0\n    });\n}, ca = (t, e, r, o)=>{\n    if (e && typeof e == \"object\" || typeof e == \"function\") for (let n of sa(e))!Ar.call(t, n) && n !== r && zt(t, n, {\n        get: ()=>e[n],\n        enumerable: !(o = na(e, n)) || o.enumerable\n    });\n    return t;\n};\nvar la = (t, e, r)=>(r = t != null ? ra(aa(t)) : {}, ca(e || !t || !t.__esModule ? zt(r, \"default\", {\n        value: t,\n        enumerable: !0\n    }) : r, t));\nvar Lr = (t, e, r)=>new Promise((o, n)=>{\n        var i = (l)=>{\n            try {\n                a(r.next(l));\n            } catch (c) {\n                n(c);\n            }\n        }, s = (l)=>{\n            try {\n                a(r.throw(l));\n            } catch (c) {\n                n(c);\n            }\n        }, a = (l)=>l.done ? o(l.value) : Promise.resolve(l.value).then(i, s);\n        a((r = r.apply(t, e)).next());\n    });\nvar Ns = Je((fp, Is)=>{\n    \"use strict\";\n    Is.exports = (t)=>encodeURIComponent(t).replace(/[!'()*]/g, (e)=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`);\n});\nvar ks = Je((dp, Vs)=>{\n    \"use strict\";\n    var Hs = \"%[a-f0-9]{2}\", Us = new RegExp(\"(\" + Hs + \")|([^%]+?)\", \"gi\"), Bs = new RegExp(\"(\" + Hs + \")+\", \"gi\");\n    function Go(t, e) {\n        try {\n            return [\n                decodeURIComponent(t.join(\"\"))\n            ];\n        } catch  {}\n        if (t.length === 1) return t;\n        e = e || 1;\n        var r = t.slice(0, e), o = t.slice(e);\n        return Array.prototype.concat.call([], Go(r), Go(o));\n    }\n    function hf(t) {\n        try {\n            return decodeURIComponent(t);\n        } catch  {\n            for(var e = t.match(Us) || [], r = 1; r < e.length; r++)t = Go(e, r).join(\"\"), e = t.match(Us) || [];\n            return t;\n        }\n    }\n    function pf(t) {\n        for(var e = {\n            \"%FE%FF\": \"��\",\n            \"%FF%FE\": \"��\"\n        }, r = Bs.exec(t); r;){\n            try {\n                e[r[0]] = decodeURIComponent(r[0]);\n            } catch  {\n                var o = hf(r[0]);\n                o !== r[0] && (e[r[0]] = o);\n            }\n            r = Bs.exec(t);\n        }\n        e[\"%C2\"] = \"�\";\n        for(var n = Object.keys(e), i = 0; i < n.length; i++){\n            var s = n[i];\n            t = t.replace(new RegExp(s, \"g\"), e[s]);\n        }\n        return t;\n    }\n    Vs.exports = function(t) {\n        if (typeof t != \"string\") throw new TypeError(\"Expected `encodedURI` to be of type `string`, got `\" + typeof t + \"`\");\n        try {\n            return t = t.replace(/\\+/g, \" \"), decodeURIComponent(t);\n        } catch  {\n            return pf(t);\n        }\n    };\n});\nvar Ys = Je((up, Gs)=>{\n    \"use strict\";\n    Gs.exports = (t, e)=>{\n        if (!(typeof t == \"string\" && typeof e == \"string\")) throw new TypeError(\"Expected the arguments to be of type `string`\");\n        if (e === \"\") return [\n            t\n        ];\n        let r = t.indexOf(e);\n        return r === -1 ? [\n            t\n        ] : [\n            t.slice(0, r),\n            t.slice(r + e.length)\n        ];\n    };\n});\nvar js = Je((mp, qs)=>{\n    \"use strict\";\n    qs.exports = function(t, e) {\n        for(var r = {}, o = Object.keys(t), n = Array.isArray(e), i = 0; i < o.length; i++){\n            var s = o[i], a = t[s];\n            (n ? e.indexOf(s) !== -1 : e(s, a, t)) && (r[s] = a);\n        }\n        return r;\n    };\n});\nvar ea = Je((K)=>{\n    \"use strict\";\n    var gf = Ns(), _f = ks(), Zs = Ys(), vf = js(), xf = (t)=>t == null, Yo = Symbol(\"encodeFragmentIdentifier\");\n    function yf(t) {\n        switch(t.arrayFormat){\n            case \"index\":\n                return (e)=>(r, o)=>{\n                        let n = r.length;\n                        return o === void 0 || t.skipNull && o === null || t.skipEmptyString && o === \"\" ? r : o === null ? [\n                            ...r,\n                            [\n                                V(e, t),\n                                \"[\",\n                                n,\n                                \"]\"\n                            ].join(\"\")\n                        ] : [\n                            ...r,\n                            [\n                                V(e, t),\n                                \"[\",\n                                V(n, t),\n                                \"]=\",\n                                V(o, t)\n                            ].join(\"\")\n                        ];\n                    };\n            case \"bracket\":\n                return (e)=>(r, o)=>o === void 0 || t.skipNull && o === null || t.skipEmptyString && o === \"\" ? r : o === null ? [\n                            ...r,\n                            [\n                                V(e, t),\n                                \"[]\"\n                            ].join(\"\")\n                        ] : [\n                            ...r,\n                            [\n                                V(e, t),\n                                \"[]=\",\n                                V(o, t)\n                            ].join(\"\")\n                        ];\n            case \"colon-list-separator\":\n                return (e)=>(r, o)=>o === void 0 || t.skipNull && o === null || t.skipEmptyString && o === \"\" ? r : o === null ? [\n                            ...r,\n                            [\n                                V(e, t),\n                                \":list=\"\n                            ].join(\"\")\n                        ] : [\n                            ...r,\n                            [\n                                V(e, t),\n                                \":list=\",\n                                V(o, t)\n                            ].join(\"\")\n                        ];\n            case \"comma\":\n            case \"separator\":\n            case \"bracket-separator\":\n                {\n                    let e = t.arrayFormat === \"bracket-separator\" ? \"[]=\" : \"=\";\n                    return (r)=>(o, n)=>n === void 0 || t.skipNull && n === null || t.skipEmptyString && n === \"\" ? o : (n = n === null ? \"\" : n, o.length === 0 ? [\n                                [\n                                    V(r, t),\n                                    e,\n                                    V(n, t)\n                                ].join(\"\")\n                            ] : [\n                                [\n                                    o,\n                                    V(n, t)\n                                ].join(t.arrayFormatSeparator)\n                            ]);\n                }\n            default:\n                return (e)=>(r, o)=>o === void 0 || t.skipNull && o === null || t.skipEmptyString && o === \"\" ? r : o === null ? [\n                            ...r,\n                            V(e, t)\n                        ] : [\n                            ...r,\n                            [\n                                V(e, t),\n                                \"=\",\n                                V(o, t)\n                            ].join(\"\")\n                        ];\n        }\n    }\n    function bf(t) {\n        let e;\n        switch(t.arrayFormat){\n            case \"index\":\n                return (r, o, n)=>{\n                    if (e = /\\[(\\d*)\\]$/.exec(r), r = r.replace(/\\[\\d*\\]$/, \"\"), !e) {\n                        n[r] = o;\n                        return;\n                    }\n                    n[r] === void 0 && (n[r] = {}), n[r][e[1]] = o;\n                };\n            case \"bracket\":\n                return (r, o, n)=>{\n                    if (e = /(\\[\\])$/.exec(r), r = r.replace(/\\[\\]$/, \"\"), !e) {\n                        n[r] = o;\n                        return;\n                    }\n                    if (n[r] === void 0) {\n                        n[r] = [\n                            o\n                        ];\n                        return;\n                    }\n                    n[r] = [].concat(n[r], o);\n                };\n            case \"colon-list-separator\":\n                return (r, o, n)=>{\n                    if (e = /(:list)$/.exec(r), r = r.replace(/:list$/, \"\"), !e) {\n                        n[r] = o;\n                        return;\n                    }\n                    if (n[r] === void 0) {\n                        n[r] = [\n                            o\n                        ];\n                        return;\n                    }\n                    n[r] = [].concat(n[r], o);\n                };\n            case \"comma\":\n            case \"separator\":\n                return (r, o, n)=>{\n                    let i = typeof o == \"string\" && o.includes(t.arrayFormatSeparator), s = typeof o == \"string\" && !i && ye(o, t).includes(t.arrayFormatSeparator);\n                    o = s ? ye(o, t) : o;\n                    let a = i || s ? o.split(t.arrayFormatSeparator).map((l)=>ye(l, t)) : o === null ? o : ye(o, t);\n                    n[r] = a;\n                };\n            case \"bracket-separator\":\n                return (r, o, n)=>{\n                    let i = /(\\[\\])$/.test(r);\n                    if (r = r.replace(/\\[\\]$/, \"\"), !i) {\n                        n[r] = o && ye(o, t);\n                        return;\n                    }\n                    let s = o === null ? [] : o.split(t.arrayFormatSeparator).map((a)=>ye(a, t));\n                    if (n[r] === void 0) {\n                        n[r] = s;\n                        return;\n                    }\n                    n[r] = [].concat(n[r], s);\n                };\n            default:\n                return (r, o, n)=>{\n                    if (n[r] === void 0) {\n                        n[r] = o;\n                        return;\n                    }\n                    n[r] = [].concat(n[r], o);\n                };\n        }\n    }\n    function Qs(t) {\n        if (typeof t != \"string\" || t.length !== 1) throw new TypeError(\"arrayFormatSeparator must be single character string\");\n    }\n    function V(t, e) {\n        return e.encode ? e.strict ? gf(t) : encodeURIComponent(t) : t;\n    }\n    function ye(t, e) {\n        return e.decode ? _f(t) : t;\n    }\n    function $s(t) {\n        return Array.isArray(t) ? t.sort() : typeof t == \"object\" ? $s(Object.keys(t)).sort((e, r)=>Number(e) - Number(r)).map((e)=>t[e]) : t;\n    }\n    function Ks(t) {\n        let e = t.indexOf(\"#\");\n        return e !== -1 && (t = t.slice(0, e)), t;\n    }\n    function Ef(t) {\n        let e = \"\", r = t.indexOf(\"#\");\n        return r !== -1 && (e = t.slice(r)), e;\n    }\n    function Ws(t) {\n        t = Ks(t);\n        let e = t.indexOf(\"?\");\n        return e === -1 ? \"\" : t.slice(e + 1);\n    }\n    function Xs(t, e) {\n        return e.parseNumbers && !Number.isNaN(Number(t)) && typeof t == \"string\" && t.trim() !== \"\" ? t = Number(t) : e.parseBooleans && t !== null && (t.toLowerCase() === \"true\" || t.toLowerCase() === \"false\") && (t = t.toLowerCase() === \"true\"), t;\n    }\n    function Js(t, e) {\n        e = Object.assign({\n            decode: !0,\n            sort: !0,\n            arrayFormat: \"none\",\n            arrayFormatSeparator: \",\",\n            parseNumbers: !1,\n            parseBooleans: !1\n        }, e), Qs(e.arrayFormatSeparator);\n        let r = bf(e), o = Object.create(null);\n        if (typeof t != \"string\" || (t = t.trim().replace(/^[?#&]/, \"\"), !t)) return o;\n        for (let n of t.split(\"&\")){\n            if (n === \"\") continue;\n            let [i, s] = Zs(e.decode ? n.replace(/\\+/g, \" \") : n, \"=\");\n            s = s === void 0 ? null : [\n                \"comma\",\n                \"separator\",\n                \"bracket-separator\"\n            ].includes(e.arrayFormat) ? s : ye(s, e), r(ye(i, e), s, o);\n        }\n        for (let n of Object.keys(o)){\n            let i = o[n];\n            if (typeof i == \"object\" && i !== null) for (let s of Object.keys(i))i[s] = Xs(i[s], e);\n            else o[n] = Xs(i, e);\n        }\n        return e.sort === !1 ? o : (e.sort === !0 ? Object.keys(o).sort() : Object.keys(o).sort(e.sort)).reduce((n, i)=>{\n            let s = o[i];\n            return Boolean(s) && typeof s == \"object\" && !Array.isArray(s) ? n[i] = $s(s) : n[i] = s, n;\n        }, Object.create(null));\n    }\n    K.extract = Ws;\n    K.parse = Js;\n    K.stringify = (t, e)=>{\n        if (!t) return \"\";\n        e = Object.assign({\n            encode: !0,\n            strict: !0,\n            arrayFormat: \"none\",\n            arrayFormatSeparator: \",\"\n        }, e), Qs(e.arrayFormatSeparator);\n        let r = (s)=>e.skipNull && xf(t[s]) || e.skipEmptyString && t[s] === \"\", o = yf(e), n = {};\n        for (let s of Object.keys(t))r(s) || (n[s] = t[s]);\n        let i = Object.keys(n);\n        return e.sort !== !1 && i.sort(e.sort), i.map((s)=>{\n            let a = t[s];\n            return a === void 0 ? \"\" : a === null ? V(s, e) : Array.isArray(a) ? a.length === 0 && e.arrayFormat === \"bracket-separator\" ? V(s, e) + \"[]\" : a.reduce(o(s), []).join(\"&\") : V(s, e) + \"=\" + V(a, e);\n        }).filter((s)=>s.length > 0).join(\"&\");\n    };\n    K.parseUrl = (t, e)=>{\n        e = Object.assign({\n            decode: !0\n        }, e);\n        let [r, o] = Zs(t, \"#\");\n        return Object.assign({\n            url: r.split(\"?\")[0] || \"\",\n            query: Js(Ws(t), e)\n        }, e && e.parseFragmentIdentifier && o ? {\n            fragmentIdentifier: ye(o, e)\n        } : {});\n    };\n    K.stringifyUrl = (t, e)=>{\n        e = Object.assign({\n            encode: !0,\n            strict: !0,\n            [Yo]: !0\n        }, e);\n        let r = Ks(t.url).split(\"?\")[0] || \"\", o = K.extract(t.url), n = K.parse(o, {\n            sort: !1\n        }), i = Object.assign(n, t.query), s = K.stringify(i, e);\n        s && (s = `?${s}`);\n        let a = Ef(t.url);\n        return t.fragmentIdentifier && (a = `#${e[Yo] ? V(t.fragmentIdentifier, e) : t.fragmentIdentifier}`), `${r}${s}${a}`;\n    };\n    K.pick = (t, e, r)=>{\n        r = Object.assign({\n            parseFragmentIdentifier: !0,\n            [Yo]: !1\n        }, r);\n        let { url: o, query: n, fragmentIdentifier: i } = K.parseUrl(t, r);\n        return K.stringifyUrl({\n            url: o,\n            query: vf(n, e),\n            fragmentIdentifier: i\n        }, r);\n    };\n    K.exclude = (t, e, r)=>{\n        let o = Array.isArray(e) ? (n)=>!e.includes(n) : (n, i)=>!e(n, i);\n        return K.pick(t, o, r);\n    };\n});\n\nvar $o = (t, e)=>({\n        dpr: t,\n        camera: {\n            fov: e\n        },\n        linear: !0,\n        flat: !0,\n        gl: {\n            preserveDrawingBuffer: !0\n        }\n    });\n\nfunction Ko() {\n    let [t, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(-1);\n    return [\n        t,\n        (o)=>{\n            let n = o.gl.domElement, i = (l)=>{\n                l.preventDefault(), e(1), console.log(\"[Context Lost]\");\n            }, s = (l)=>{\n                e(0), console.log(\"[Context Restored]\");\n            }, a = (l)=>{\n                e(2), console.log(\"[Context Error]\");\n            };\n            return n.addEventListener(\"webglcontextlost\", i), n.addEventListener(\"webglcontextrestored\", s), n.addEventListener(\"webglcontextcreationerror\", a), ()=>{\n                n.removeEventListener(\"webglcontextlost\", i), n.removeEventListener(\"webglcontextrestored\", s), n.removeEventListener(\"webglcontextcreationerror\", a);\n            };\n        }\n    ];\n}\n\nfunction Ff(i) {\n    var s = i, { children: t, pointerEvents: e = \"none\", pixelDensity: r = 1, fov: o = 45 } = s, n = Z(s, [\n        \"children\",\n        \"pointerEvents\",\n        \"pixelDensity\",\n        \"fov\"\n    ]);\n    let [a, l] = Ko();\n    return a === 1 ? (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ua, {\n        title: \"The graphics context has been lost. Please wait while we try to restore it...\"\n    }) : (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_react_three_fiber__WEBPACK_IMPORTED_MODULE_2__.Canvas, W(D(W(D({\n            id: \"gradientCanvas\",\n            resize: {\n                offsetSize: !0\n            }\n        }, $o(r, o)), {\n            style: {\n                pointerEvents: e\n            },\n            onCreated: l\n        }), n), {\n            children: t\n        }), r + o)\n    });\n}\nfunction ua({ title: t = \"\", color1: e = \"#ff7e5f\", color2: r = \"#feb47b\" }) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            background: `linear-gradient(to right, ${e}, ${r})`,\n            color: \"white\",\n            fontSize: \"20px\",\n            textAlign: \"center\",\n            padding: \"20px\",\n            fontFamily: \"Inter\",\n            fontWeight: \"500\"\n        },\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"p\", {\n            children: t\n        })\n    });\n}\n\n\n\nvar he = class {\n    constructor(){\n        this.enabled = !0, this.needsSwap = !0, this.clear = !1, this.renderToScreen = !1;\n    }\n    setSize() {}\n    render() {\n        console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n    }\n}, _a = new three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera(-1, 1, 1, -1, 0, 1), Or = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry;\nOr.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n    -1,\n    3,\n    0,\n    -1,\n    -1,\n    0,\n    3,\n    -1,\n    0\n], 3));\nOr.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n    0,\n    2,\n    0,\n    0,\n    2,\n    0\n], 2));\nvar At = class {\n    constructor(e){\n        this._mesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(Or, e);\n    }\n    dispose() {\n        this._mesh.geometry.dispose();\n    }\n    render(e) {\n        e.render(this._mesh, _a);\n    }\n    get material() {\n        return this._mesh.material;\n    }\n    set material(e) {\n        this._mesh.material = e;\n    }\n};\nvar tt = class extends he {\n    constructor(e, r){\n        super(), this.scene = e, this.camera = r, this.clear = !0, this.needsSwap = !1, this.inverse = !1;\n    }\n    render(e, r, o) {\n        let n = e.getContext(), i = e.state;\n        i.buffers.color.setMask(!1), i.buffers.depth.setMask(!1), i.buffers.color.setLocked(!0), i.buffers.depth.setLocked(!0);\n        let s, a;\n        this.inverse ? (s = 0, a = 1) : (s = 1, a = 0), i.buffers.stencil.setTest(!0), i.buffers.stencil.setOp(n.REPLACE, n.REPLACE, n.REPLACE), i.buffers.stencil.setFunc(n.ALWAYS, s, 4294967295), i.buffers.stencil.setClear(a), i.buffers.stencil.setLocked(!0), e.setRenderTarget(o), this.clear && e.clear(), e.render(this.scene, this.camera), e.setRenderTarget(r), this.clear && e.clear(), e.render(this.scene, this.camera), i.buffers.color.setLocked(!1), i.buffers.depth.setLocked(!1), i.buffers.stencil.setLocked(!1), i.buffers.stencil.setFunc(n.EQUAL, 1, 4294967295), i.buffers.stencil.setOp(n.KEEP, n.KEEP, n.KEEP), i.buffers.stencil.setLocked(!0);\n    }\n}, Lt = class extends he {\n    constructor(){\n        super(), this.needsSwap = !1;\n    }\n    render(e) {\n        e.state.buffers.stencil.setLocked(!1), e.state.buffers.stencil.setTest(!1);\n    }\n};\n\nvar rt = class extends he {\n    constructor(e, r){\n        super(), this.textureID = r !== void 0 ? r : \"tDiffuse\", e instanceof three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial ? (this.uniforms = e.uniforms, this.material = e) : e && (this.uniforms = three__WEBPACK_IMPORTED_MODULE_3__.UniformsUtils.clone(e.uniforms), this.material = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n            defines: Object.assign({}, e.defines),\n            uniforms: this.uniforms,\n            vertexShader: e.vertexShader,\n            fragmentShader: e.fragmentShader\n        })), this.fsQuad = new At(this.material);\n    }\n    render(e, r, o) {\n        this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = o.texture), this.fsQuad.material = this.material, this.renderToScreen ? (e.setRenderTarget(null), this.fsQuad.render(e)) : (e.setRenderTarget(r), this.clear && e.clear(e.autoClearColor, e.autoClearDepth, e.autoClearStencil), this.fsQuad.render(e));\n    }\n};\nvar Fr = {\n    uniforms: {\n        tDiffuse: {\n            value: null\n        },\n        opacity: {\n            value: 1\n        }\n    },\n    vertexShader: `\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n    fragmentShader: `\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n};\nvar Ot = class {\n    constructor(e, r){\n        if (this.renderer = e, r === void 0) {\n            let o = {\n                minFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n                magFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n                format: three__WEBPACK_IMPORTED_MODULE_3__.RGBAFormat\n            }, n = e.getSize(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2);\n            this._pixelRatio = e.getPixelRatio(), this._width = n.width, this._height = n.height, r = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, o), r.texture.name = \"EffectComposer.rt1\";\n        } else this._pixelRatio = 1, this._width = r.width, this._height = r.height;\n        this.renderTarget1 = r, this.renderTarget2 = r.clone(), this.renderTarget2.texture.name = \"EffectComposer.rt2\", this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2, this.renderToScreen = !0, this.passes = [], Fr === void 0 && console.error(\"THREE.EffectComposer relies on CopyShader\"), rt === void 0 && console.error(\"THREE.EffectComposer relies on ShaderPass\"), this.copyPass = new rt(Fr), this.clock = new three__WEBPACK_IMPORTED_MODULE_3__.Clock;\n    }\n    swapBuffers() {\n        let e = this.readBuffer;\n        this.readBuffer = this.writeBuffer, this.writeBuffer = e;\n    }\n    addPass(e) {\n        this.passes.push(e), e.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    insertPass(e, r) {\n        this.passes.splice(r, 0, e), e.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n    removePass(e) {\n        let r = this.passes.indexOf(e);\n        r !== -1 && this.passes.splice(r, 1);\n    }\n    isLastEnabledPass(e) {\n        for(let r = e + 1; r < this.passes.length; r++)if (this.passes[r].enabled) return !1;\n        return !0;\n    }\n    render(e) {\n        e === void 0 && (e = this.clock.getDelta());\n        let r = this.renderer.getRenderTarget(), o = !1;\n        for(let n = 0, i = this.passes.length; n < i; n++){\n            let s = this.passes[n];\n            if (s.enabled !== !1) {\n                if (s.renderToScreen = this.renderToScreen && this.isLastEnabledPass(n), s.render(this.renderer, this.writeBuffer, this.readBuffer, e, o), s.needsSwap) {\n                    if (o) {\n                        let a = this.renderer.getContext(), l = this.renderer.state.buffers.stencil;\n                        l.setFunc(a.NOTEQUAL, 1, 4294967295), this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, e), l.setFunc(a.EQUAL, 1, 4294967295);\n                    }\n                    this.swapBuffers();\n                }\n                tt !== void 0 && (s instanceof tt ? o = !0 : s instanceof Lt && (o = !1));\n            }\n        }\n        this.renderer.setRenderTarget(r);\n    }\n    reset(e) {\n        if (e === void 0) {\n            let r = this.renderer.getSize(new three__WEBPACK_IMPORTED_MODULE_3__.Vector2);\n            this._pixelRatio = this.renderer.getPixelRatio(), this._width = r.width, this._height = r.height, e = this.renderTarget1.clone(), e.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n        }\n        this.renderTarget1.dispose(), this.renderTarget2.dispose(), this.renderTarget1 = e, this.renderTarget2 = e.clone(), this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2;\n    }\n    setSize(e, r) {\n        this._width = e, this._height = r;\n        let o = this._width * this._pixelRatio, n = this._height * this._pixelRatio;\n        this.renderTarget1.setSize(o, n), this.renderTarget2.setSize(o, n);\n        for(let i = 0; i < this.passes.length; i++)this.passes[i].setSize(o, n);\n    }\n    setPixelRatio(e) {\n        this._pixelRatio = e, this.setSize(this._width, this._height);\n    }\n};\nvar Kf = new three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera(-1, 1, 1, -1, 0, 1), on = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry;\non.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n    -1,\n    3,\n    0,\n    -1,\n    -1,\n    0,\n    3,\n    -1,\n    0\n], 3));\non.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n    0,\n    2,\n    0,\n    0,\n    2,\n    0\n], 2));\n\nvar Ft = class extends he {\n    constructor(e, r, o, n, i){\n        super(), this.scene = e, this.camera = r, this.overrideMaterial = o, this.clearColor = n, this.clearAlpha = i !== void 0 ? i : 0, this.clear = !0, this.clearDepth = !1, this.needsSwap = !1, this._oldClearColor = new three__WEBPACK_IMPORTED_MODULE_3__.Color;\n    }\n    render(e, r, o) {\n        let n = e.autoClear;\n        e.autoClear = !1;\n        let i, s;\n        this.overrideMaterial !== void 0 && (s = this.scene.overrideMaterial, this.scene.overrideMaterial = this.overrideMaterial), this.clearColor && (e.getClearColor(this._oldClearColor), i = e.getClearAlpha(), e.setClearColor(this.clearColor, this.clearAlpha)), this.clearDepth && e.clearDepth(), e.setRenderTarget(this.renderToScreen ? null : o), this.clear && e.clear(e.autoClearColor, e.autoClearDepth, e.autoClearStencil), e.render(this.scene, this.camera), this.clearColor && e.setClearColor(this._oldClearColor, i), this.overrideMaterial !== void 0 && (this.scene.overrideMaterial = s), e.autoClear = n;\n    }\n};\n\nvar B = {\n    SKIP: 0,\n    ADD: 1,\n    ALPHA: 2,\n    AVERAGE: 3,\n    COLOR_BURN: 4,\n    COLOR_DODGE: 5,\n    DARKEN: 6,\n    DIFFERENCE: 7,\n    EXCLUSION: 8,\n    LIGHTEN: 9,\n    MULTIPLY: 10,\n    DIVIDE: 11,\n    NEGATION: 12,\n    NORMAL: 13,\n    OVERLAY: 14,\n    REFLECT: 15,\n    SCREEN: 16,\n    SOFT_LIGHT: 17,\n    SUBTRACT: 18\n};\n\nvar nn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return min(x+y,1.0)*opacity+x*(1.0-opacity);}\";\nvar sn = \"vec3 blend(const in vec3 x,const in vec3 y,const in float opacity){return y*opacity+x*(1.0-opacity);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){float a=min(y.a,opacity);return vec4(blend(x.rgb,y.rgb,a),max(x.a,a));}\";\nvar an = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(x+y)*0.5*opacity+x*(1.0-opacity);}\";\nvar cn = \"float blend(const in float x,const in float y){return(y==0.0)?y:max(1.0-(1.0-x)/y,0.0);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}\";\nvar ln = \"float blend(const in float x,const in float y){return(y==1.0)?y:min(x/(1.0-y),1.0);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}\";\nvar fn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return min(x,y)*opacity+x*(1.0-opacity);}\";\nvar dn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return abs(x-y)*opacity+x*(1.0-opacity);}\";\nvar un = \"float blend(const in float x,const in float y){return(y>0.0)?min(x/y,1.0):1.0;}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}\";\nvar mn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(x+y-2.0*x*y)*opacity+x*(1.0-opacity);}\";\nvar hn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return max(x,y)*opacity+x*(1.0-opacity);}\";\nvar pn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return x*y*opacity+x*(1.0-opacity);}\";\nvar gn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(1.0-abs(1.0-x-y))*opacity+x*(1.0-opacity);}\";\nvar _n = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return y*opacity+x*(1.0-opacity);}\";\nvar vn = \"float blend(const in float x,const in float y){return(x<0.5)?(2.0*x*y):(1.0-2.0*(1.0-x)*(1.0-y));}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}\";\nvar xn = \"float blend(const in float x,const in float y){return(y==1.0)?y:min(x*x/(1.0-y),1.0);}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}\";\nvar yn = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return(1.0-(1.0-x)*(1.0-y))*opacity+x*(1.0-opacity);}\";\nvar bn = \"float blend(const in float x,const in float y){return(y<0.5)?(2.0*x*y+x*x*(1.0-2.0*y)):(sqrt(x)*(2.0*y-1.0)+2.0*x*(1.0-y));}vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec4 z=vec4(blend(x.r,y.r),blend(x.g,y.g),blend(x.b,y.b),blend(x.a,y.a));return z*opacity+x*(1.0-opacity);}\";\nvar En = \"vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return max(x+y-1.0,0.0)*opacity+x*(1.0-opacity);}\";\nvar qa = new Map([\n    [\n        B.SKIP,\n        null\n    ],\n    [\n        B.ADD,\n        nn\n    ],\n    [\n        B.ALPHA,\n        sn\n    ],\n    [\n        B.AVERAGE,\n        an\n    ],\n    [\n        B.COLOR_BURN,\n        cn\n    ],\n    [\n        B.COLOR_DODGE,\n        ln\n    ],\n    [\n        B.DARKEN,\n        fn\n    ],\n    [\n        B.DIFFERENCE,\n        dn\n    ],\n    [\n        B.EXCLUSION,\n        mn\n    ],\n    [\n        B.LIGHTEN,\n        hn\n    ],\n    [\n        B.MULTIPLY,\n        pn\n    ],\n    [\n        B.DIVIDE,\n        un\n    ],\n    [\n        B.NEGATION,\n        gn\n    ],\n    [\n        B.NORMAL,\n        _n\n    ],\n    [\n        B.OVERLAY,\n        vn\n    ],\n    [\n        B.REFLECT,\n        xn\n    ],\n    [\n        B.SCREEN,\n        yn\n    ],\n    [\n        B.SOFT_LIGHT,\n        bn\n    ],\n    [\n        B.SUBTRACT,\n        En\n    ]\n]), ot = class extends three__WEBPACK_IMPORTED_MODULE_3__.EventDispatcher {\n    constructor(e, r = 1){\n        super(), this.blendFunction = e, this.opacity = new three__WEBPACK_IMPORTED_MODULE_3__.Uniform(r);\n    }\n    getBlendFunction() {\n        return this.blendFunction;\n    }\n    setBlendFunction(e) {\n        this.blendFunction = e, this.dispatchEvent({\n            type: \"change\"\n        });\n    }\n    getShaderCode() {\n        return qa.get(this.blendFunction);\n    }\n};\nvar Re = {\n    uniforms: {\n        tDiffuse: {\n            value: null\n        },\n        shape: {\n            value: 1\n        },\n        radius: {\n            value: 2\n        },\n        rotateR: {\n            value: Math.PI / 12 * 1\n        },\n        rotateG: {\n            value: Math.PI / 12 * 2\n        },\n        rotateB: {\n            value: Math.PI / 12 * 3\n        },\n        scatter: {\n            value: 1\n        },\n        width: {\n            value: 20\n        },\n        height: {\n            value: 20\n        },\n        blending: {\n            value: 1\n        },\n        blendingMode: {\n            value: 1\n        },\n        greyscale: {\n            value: !1\n        },\n        disable: {\n            value: !1\n        }\n    },\n    vertexShader: `\n\n\t\tvarying vec2 vUV;\n\t\tvarying vec3 vPosition;\n\n\t\tvoid main() {\n\n\t\t\tvUV = uv;\n\t\t\tvPosition = position;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n\t\t}`,\n    fragmentShader: `\n\n\t\t#define SQRT2_MINUS_ONE 0.41421356\n\t\t#define SQRT2_HALF_MINUS_ONE 0.20710678\n\t\t#define PI2 6.28318531\n\t\t#define SHAPE_DOT 1\n\t\t#define SHAPE_ELLIPSE 2\n\t\t#define SHAPE_LINE 3\n\t\t#define SHAPE_SQUARE 4\n\t\t#define BLENDING_LINEAR 1\n\t\t#define BLENDING_MULTIPLY 2\n\t\t#define BLENDING_ADD 3\n\t\t#define BLENDING_LIGHTER 4\n\t\t#define BLENDING_DARKER 5\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform float radius;\n\t\tuniform float rotateR;\n\t\tuniform float rotateG;\n\t\tuniform float rotateB;\n\t\tuniform float scatter;\n\t\tuniform float width;\n\t\tuniform float height;\n\t\tuniform int shape;\n\t\tuniform bool disable;\n\t\tuniform float blending;\n\t\tuniform int blendingMode;\n\t\tvarying vec2 vUV;\n\t\tvarying vec3 vPosition;\n\t\tuniform bool greyscale;\n\t\tconst int samples = 8;\n\n\t\tfloat blend( float a, float b, float t ) {\n\n\t\t// linear blend\n\t\t\treturn a * ( 1.0 - t ) + b * t;\n\n\t\t}\n\n\t\tfloat hypot( float x, float y ) {\n\n\t\t// vector magnitude\n\t\t\treturn sqrt( x * x + y * y );\n\n\t\t}\n\n\t\tfloat rand( vec2 seed ){\n\n\t\t// get pseudo-random number\n\t\t\treturn fract( sin( dot( seed.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\n\n\t\t}\n\n\t\tfloat distanceToDotRadius( float channel, vec2 coord, vec2 normal, vec2 p, float angle, float rad_max ) {\n\n\t\t// apply shape-specific transforms\n\t\t\tfloat dist = hypot( coord.x - p.x, coord.y - p.y );\n\t\t\tfloat rad = channel;\n\n\t\t\tif ( shape == SHAPE_DOT ) {\n\n\t\t\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\n\n\t\t\t} else if ( shape == SHAPE_ELLIPSE ) {\n\n\t\t\t\trad = pow( abs( rad ), 1.125 ) * rad_max;\n\n\t\t\t\tif ( dist != 0.0 ) {\n\t\t\t\t\tfloat dot_p = abs( ( p.x - coord.x ) / dist * normal.x + ( p.y - coord.y ) / dist * normal.y );\n\t\t\t\t\tdist = ( dist * ( 1.0 - SQRT2_HALF_MINUS_ONE ) ) + dot_p * dist * SQRT2_MINUS_ONE;\n\t\t\t\t}\n\n\t\t\t} else if ( shape == SHAPE_LINE ) {\n\n\t\t\t\trad = pow( abs( rad ), 1.5) * rad_max;\n\t\t\t\tfloat dot_p = ( p.x - coord.x ) * normal.x + ( p.y - coord.y ) * normal.y;\n\t\t\t\tdist = hypot( normal.x * dot_p, normal.y * dot_p );\n\n\t\t\t} else if ( shape == SHAPE_SQUARE ) {\n\n\t\t\t\tfloat theta = atan( p.y - coord.y, p.x - coord.x ) - angle;\n\t\t\t\tfloat sin_t = abs( sin( theta ) );\n\t\t\t\tfloat cos_t = abs( cos( theta ) );\n\t\t\t\trad = pow( abs( rad ), 1.4 );\n\t\t\t\trad = rad_max * ( rad + ( ( sin_t > cos_t ) ? rad - sin_t * rad : rad - cos_t * rad ) );\n\n\t\t\t}\n\n\t\t\treturn rad - dist;\n\n\t\t}\n\n\t\tstruct Cell {\n\n\t\t// grid sample positions\n\t\t\tvec2 normal;\n\t\t\tvec2 p1;\n\t\t\tvec2 p2;\n\t\t\tvec2 p3;\n\t\t\tvec2 p4;\n\t\t\tfloat samp2;\n\t\t\tfloat samp1;\n\t\t\tfloat samp3;\n\t\t\tfloat samp4;\n\n\t\t};\n\n\t\tvec4 getSample( vec2 point ) {\n\n\t\t// multi-sampled point\n\t\t\tvec4 tex = texture2D( tDiffuse, vec2( point.x / width, point.y / height ) );\n\t\t\tfloat base = rand( vec2( floor( point.x ), floor( point.y ) ) ) * PI2;\n\t\t\tfloat step = PI2 / float( samples );\n\t\t\t// float dist = radius * 0.66;\n\t\t\tfloat dist = radius * 0.0;\n\n\t\t\tfor ( int i = 0; i < samples; ++i ) {\n\n\t\t\t\tfloat r = base + step * float( i );\n\t\t\t\tvec2 coord = point + vec2( cos( r ) * dist, sin( r ) * dist );\n\t\t\t\ttex += texture2D( tDiffuse, vec2( coord.x / width, coord.y / height ) );\n\n\t\t\t}\n\n\t\t\ttex /= float( samples ) + 1.0;\n\t\t\treturn tex;\n\n\t\t}\n\n\t\tfloat getDotColour( Cell c, vec2 p, int channel, float angle, float aa ) {\n\n\t\t// get colour for given point\n\t\t\tfloat dist_c_1, dist_c_2, dist_c_3, dist_c_4, res;\n\n\t\t\tif ( channel == 0 ) {\n\n\t\t\t\tc.samp1 = getSample( c.p1 ).r;\n\t\t\t\tc.samp2 = getSample( c.p2 ).r;\n\t\t\t\tc.samp3 = getSample( c.p3 ).r;\n\t\t\t\tc.samp4 = getSample( c.p4 ).r;\n\n\t\t\t} else if (channel == 1) {\n\n\t\t\t\tc.samp1 = getSample( c.p1 ).g;\n\t\t\t\tc.samp2 = getSample( c.p2 ).g;\n\t\t\t\tc.samp3 = getSample( c.p3 ).g;\n\t\t\t\tc.samp4 = getSample( c.p4 ).g;\n\n\t\t\t} else {\n\n\t\t\t\tc.samp1 = getSample( c.p1 ).b;\n\t\t\t\tc.samp3 = getSample( c.p3 ).b;\n\t\t\t\tc.samp2 = getSample( c.p2 ).b;\n\t\t\t\tc.samp4 = getSample( c.p4 ).b;\n\n\t\t\t}\n\n\t\t\tdist_c_1 = distanceToDotRadius( c.samp1, c.p1, c.normal, p, angle, radius );\n\t\t\tdist_c_2 = distanceToDotRadius( c.samp2, c.p2, c.normal, p, angle, radius );\n\t\t\tdist_c_3 = distanceToDotRadius( c.samp3, c.p3, c.normal, p, angle, radius );\n\t\t\tdist_c_4 = distanceToDotRadius( c.samp4, c.p4, c.normal, p, angle, radius );\n\t\t\tres = ( dist_c_1 > 0.0 ) ? clamp( dist_c_1 / aa, 0.0, 1.0 ) : 0.0;\n\t\t\t// res = 0.0;\n\t\t\tres += ( dist_c_2 > 0.0 ) ? clamp( dist_c_2 / aa, 0.0, 1.0 ) : 0.0;\n\t\t\tres += ( dist_c_3 > 0.0 ) ? clamp( dist_c_3 / aa, 0.0, 1.0 ) : 0.0;\n\t\t\tres += ( dist_c_4 > 0.0 ) ? clamp( dist_c_4 / aa, 0.0, 1.0 ) : 0.0;\n\t\t\tres = clamp( res, 0.0, 1.0 );\n\n\t\t\treturn res;\n\t\t\t// return 2\n\n\t\t}\n\n\t\tCell getReferenceCell( vec2 p, vec2 origin, float grid_angle, float step ) {\n\n\t\t// get containing cell\n\t\t\tCell c;\n\n\t\t// calc grid\n\t\t\tvec2 n = vec2( cos( grid_angle ), sin( grid_angle ) );\n\t\t\tfloat threshold = step * 0.5;\n\t\t\tfloat dot_normal = n.x * ( p.x - origin.x ) + n.y * ( p.y - origin.y );\n\t\t\tfloat dot_line = -n.y * ( p.x - origin.x ) + n.x * ( p.y - origin.y );\n\t\t\tvec2 offset = vec2( n.x * dot_normal, n.y * dot_normal );\n\t\t\tfloat offset_normal = mod( hypot( offset.x, offset.y ), step );\n\t\t\tfloat normal_dir = ( dot_normal < 0.0 ) ? 1.0 : -1.0;\n\t\t\tfloat normal_scale = ( ( offset_normal < threshold ) ? -offset_normal : step - offset_normal ) * normal_dir;\n\t\t\tfloat offset_line = mod( hypot( ( p.x - offset.x ) - origin.x, ( p.y - offset.y ) - origin.y ), step );\n\t\t\tfloat line_dir = ( dot_line < 0.0 ) ? 1.0 : -1.0;\n\t\t\tfloat line_scale = ( ( offset_line < threshold ) ? -offset_line : step - offset_line ) * line_dir;\n\n\t\t// get closest corner\n\t\t\tc.normal = n;\n\t\t\tc.p1.x = p.x - n.x * normal_scale + n.y * line_scale;\n\t\t\tc.p1.y = p.y - n.y * normal_scale - n.x * line_scale;\n\n\t\t// scatter\n\t\t\tif ( scatter != 0.0 ) {\n\n\t\t\t\tfloat off_mag = scatter * threshold * 0.5;\n\t\t\t\tfloat off_angle = rand( vec2( floor( c.p1.x ), floor( c.p1.y ) ) ) * PI2;\n\t\t\t\tc.p1.x += cos( off_angle ) * off_mag;\n\t\t\t\tc.p1.y += sin( off_angle ) * off_mag;\n\n\t\t\t}\n\n\t\t// find corners\n\t\t\tfloat normal_step = normal_dir * ( ( offset_normal < threshold ) ? step : -step );\n\t\t\tfloat line_step = line_dir * ( ( offset_line < threshold ) ? step : -step );\n\t\t\tc.p2.x = c.p1.x - n.x * normal_step;\n\t\t\tc.p2.y = c.p1.y - n.y * normal_step;\n\t\t\tc.p3.x = c.p1.x + n.y * line_step;\n\t\t\tc.p3.y = c.p1.y - n.x * line_step;\n\t\t\tc.p4.x = c.p1.x - n.x * normal_step + n.y * line_step;\n\t\t\tc.p4.y = c.p1.y - n.y * normal_step - n.x * line_step;\n\n\t\t\treturn c;\n\n\t\t}\n\n\t\tfloat blendColour( float a, float b, float t ) {\n\n\t\t// blend colours\n\t\t\tif ( blendingMode == BLENDING_LINEAR ) {\n\t\t\t\treturn blend( a, b, 1.0 - t );\n\t\t\t} else if ( blendingMode == BLENDING_ADD ) {\n\t\t\t\treturn blend( a, min( 1.0, a + b ), t );\n\t\t\t} else if ( blendingMode == BLENDING_MULTIPLY ) {\n\t\t\t\treturn blend( a, max( 0.0, a * b ), t );\n\t\t\t} else if ( blendingMode == BLENDING_LIGHTER ) {\n\t\t\t\treturn blend( a, max( a, b ), t );\n\t\t\t} else if ( blendingMode == BLENDING_DARKER ) {\n\t\t\t\treturn blend( a, min( a, b ), t );\n\t\t\t} else {\n\t\t\t\treturn blend( a, b, 1.0 - t );\n\t\t\t}\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tif ( ! disable ) {\n\n\t\t// setup\n\t\t\t\tvec2 p = vec2( vUV.x * width, vUV.y * height ) - vec2(vPosition.x, vPosition.y) * 3.0; // - position values to remove black borders.\n\t\t\t\tvec2 origin = vec2( 0, 0 );\n\t\t\t\tfloat aa = ( radius < 2.5 ) ? radius * 0.5 : 1.25;\n\t\t\t\t// float aa = 0.0;\n\n\t\t// get channel samples\n\t\t\t\tCell cell_r = getReferenceCell( p, origin, rotateR, radius );\n\t\t\t\tCell cell_g = getReferenceCell( p, origin, rotateG, radius );\n\t\t\t\tCell cell_b = getReferenceCell( p, origin, rotateB, radius );\n\t\t\t\tfloat r = getDotColour( cell_r, p, 0, rotateR, aa );\n\t\t\t\tfloat g = getDotColour( cell_g, p, 1, rotateG, aa );\n\t\t\t\tfloat b = getDotColour( cell_b, p, 2, rotateB, aa );\n\n\t\t// blend with original\n\t\t\t\tvec4 colour = texture2D( tDiffuse, vUV );\n\t\t\t\t\n\t\t\t\t// add masking before blendColour\n\t\t\t\tif (colour.r == 0.0) {\n\t\t\t\t\tr = 0.0;\n\t\t\t\t} else {\n\t\t\t\t\tr = blendColour( r, colour.r, blending );\n\t\t\t\t}\n\n\t\t\t\tif (colour.g == 0.0) {\n\t\t\t\t\tg = 0.0;\n\t\t\t\t} else {\n\t\t\t\t\tg = blendColour( g, colour.g, blending );\n\t\t\t\t}\n\n\t\t\t\tif (colour.b == 0.0) {\n\t\t\t\t\tb = 0.0;\n\t\t\t\t} else {\n\t\t\t\t\tb = blendColour( b, colour.b, blending );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\n\t\t\t\tif ( greyscale ) {\n\t\t\t\t\tr = g = b = (r + b + g) / 3.0;\n\t\t\t\t}\n\n\t\t\t\t// add alpha channel to each r, g, b colors\n\t\t\t\tvec4 vR;\n\t\t\t\tvec4 vG;\n\t\t\t\tvec4 vB;\n\t\n\t\t\t\t// apply transparent to outside of mesh\n\t\t\t\tif (r == 0.0 && colour.r == 0.0) {\n\t\t\t\t\tvR = vec4( 0, 0, 0, 0 );\n\t\t\t\t} else {\n\t\t\t\t\tvR = vec4( r, 0, 0, 1 );\n\t\t\t\t}\n\t\n\t\t\t\tif (g == 0.0 && colour.g == 0.0) {\n\t\t\t\t\tvG = vec4( 0, 0, 0, 0 );\n\t\t\t\t} else {\n\t\t\t\t\tvG = vec4( 0, g, 0, 1 );\n\t\t\t\t}\n\t\n\t\t\t\tif (b == 0.0 && colour.b == 0.0) {\n\t\t\t\t\tvB = vec4( 0, 0, 0, 0 );\n\t\t\t\t} else {\n\t\t\t\t\tvB = vec4( 0, 0, b, 1 );\n\t\t\t\t}\n\n\t\t\t\t// gl_FragColor = vec4( r, g, b, 1.0 );\n\t\t\t\tgl_FragColor = vR + vG + vB;\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = texture2D( tDiffuse, vUV );\n\n\t\t\t}\n\n\t\t}`\n};\n\nvar Dt = class {\n    constructor(){\n        this.enabled = !0, this.needsSwap = !0, this.clear = !1, this.renderToScreen = !1;\n    }\n    setSize() {}\n    render() {\n        console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n    }\n}, Qa = new three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera(-1, 1, 1, -1, 0, 1), Dr = new three__WEBPACK_IMPORTED_MODULE_3__.BufferGeometry;\nDr.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n    -1,\n    3,\n    0,\n    -1,\n    -1,\n    0,\n    3,\n    -1,\n    0\n], 3));\nDr.setAttribute(\"uv\", new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute([\n    0,\n    2,\n    0,\n    0,\n    2,\n    0\n], 2));\nvar Mt = class {\n    constructor(e){\n        this._mesh = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(Dr, e);\n    }\n    dispose() {\n        this._mesh.geometry.dispose();\n    }\n    render(e) {\n        e.render(this._mesh, Qa);\n    }\n    get material() {\n        return this._mesh.material;\n    }\n    set material(e) {\n        this._mesh.material = e;\n    }\n};\nvar Pn = !0, It = class extends Dt {\n    constructor(e, r, o){\n        super(), Re === void 0 && console.error(\"THREE.HalftonePass requires HalftoneShader\"), this.uniforms = three__WEBPACK_IMPORTED_MODULE_3__.UniformsUtils.clone(Re.uniforms), this.material = new three__WEBPACK_IMPORTED_MODULE_3__.ShaderMaterial({\n            uniforms: this.uniforms,\n            fragmentShader: Re.fragmentShader,\n            vertexShader: Re.vertexShader\n        }), Pn && (this.uniforms.width.value = e, this.uniforms.height.value = r), this.uniforms.disable.value = o.disable, this.fsQuad = new Mt(this.material), this.blendMode = new ot(B.SCREEN), this.extensions = null;\n    }\n    render(e, r, o) {\n        this.material.uniforms.tDiffuse.value = o.texture, this.renderToScreen ? (e.setRenderTarget(null), this.fsQuad.render(e)) : (e.setRenderTarget(r), this.clear && e.clear(), this.fsQuad.render(e));\n    }\n    setSize(e, r) {\n        Pn && (this.uniforms.width.value = e, this.uniforms.height.value = r);\n    }\n    initialize(e, r, o) {}\n    addEventListener() {}\n    getAttributes() {\n        return this.attributes;\n    }\n    getFragmentShader() {\n        return Re.fragmentShader;\n    }\n    getVertexShader() {\n        return Re.vertexShader;\n    }\n    update(e, r, o) {}\n};\n\nfunction Mr(t) {\n    let { gl: e, scene: r, camera: o, size: n } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let s = new Ot(e);\n        s.addPass(new Ft(r, o));\n        let a = {\n            shape: 1,\n            radius: 2,\n            rotateR: Math.PI / 12,\n            rotateB: Math.PI / 12 * 2,\n            rotateG: Math.PI / 12 * 3,\n            scatter: 1,\n            blending: 1,\n            blendingMode: 1,\n            greyscale: !1,\n            disable: t\n        }, l = new It(n.width, n.height, a);\n        return s.addPass(l), s;\n    }, [\n        e,\n        r,\n        o,\n        n,\n        t\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>i == null ? void 0 : i.setSize(n.width, n.height), [\n        i,\n        n\n    ]), (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.C)((s, a)=>(e.autoClear = !0, void i.render(a)), 1);\n}\n\n\n\n\n\nfunction rc(t) {\n    return function(e) {\n        t.forEach(function(r) {\n            typeof r == \"function\" ? r(e) : r != null && (r.current = e);\n        });\n    };\n}\nvar Sn = rc;\n\n\n\nfunction Cn(t, e, r) {\n    let { gl: o, size: n, viewport: i } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(), s = typeof t == \"number\" ? t : n.width * i.dpr, a = typeof e == \"number\" ? e : n.height * i.dpr, v = (typeof t == \"number\" ? r : t) || {}, { samples: c } = v, d = Z(v, [\n        \"samples\"\n    ]), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let h;\n        return h = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderTarget(s, a, D({\n            minFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n            magFilter: three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter,\n            encoding: o.outputEncoding,\n            type: three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType\n        }, d)), h.samples = c, h;\n    }, []);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        u.setSize(s, a), c && (u.samples = c);\n    }, [\n        c,\n        u,\n        s,\n        a\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>()=>u.dispose(), []), u;\n}\n\nvar ic = (t)=>typeof t == \"function\", wn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((a, s)=>{\n    var l = a, { envMap: t, resolution: e = 256, frames: r = 1 / 0, children: o, makeDefault: n } = l, i = Z(l, [\n        \"envMap\",\n        \"resolution\",\n        \"frames\",\n        \"children\",\n        \"makeDefault\"\n    ]);\n    let c = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ set: m })=>m), d = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ camera: m })=>m), u = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ size: m })=>m), v = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), h = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), p = Cn(e);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        i.manual || v.current.updateProjectionMatrix();\n    }, [\n        u,\n        i\n    ]), react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        v.current.updateProjectionMatrix();\n    }), react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (n) {\n            let m = d;\n            return c(()=>({\n                    camera: v.current\n                })), ()=>c(()=>({\n                        camera: m\n                    }));\n        }\n    }, [\n        v,\n        n,\n        c\n    ]);\n    let g = 0, E = null, x = ic(o);\n    return (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.C)((m)=>{\n        x && (r === 1 / 0 || g < r) && (h.current.visible = !1, m.gl.setRenderTarget(p), E = m.scene.background, t && (m.scene.background = t), m.gl.render(m.scene, v.current), m.scene.background = E, m.gl.setRenderTarget(null), h.current.visible = !0, g++);\n    }), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"orthographicCamera\", W(D({\n                left: u.width / -2,\n                right: u.width / 2,\n                top: u.height / 2,\n                bottom: u.height / -2,\n                ref: Sn([\n                    v,\n                    s\n                ])\n            }, i), {\n                children: !x && o\n            })),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"group\", {\n                ref: h,\n                children: x && o(p.texture)\n            })\n        ]\n    });\n});\n\n\n\nfunction An(t, e) {\n    let r = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)((n)=>n.pointer), [o] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        let n = new three__WEBPACK_IMPORTED_MODULE_3__.Raycaster;\n        return e && (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.j)(n, e, {}), function(i, s) {\n            n.setFromCamera(r, t instanceof three__WEBPACK_IMPORTED_MODULE_3__.Camera ? t : t.current);\n            let a = this.constructor.prototype.raycast.bind(this);\n            a && a(n, s);\n        };\n    });\n    return o;\n}\n\nvar Nn = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext({}), Un = ()=>react__WEBPACK_IMPORTED_MODULE_0__.useContext(Nn), _c = 2 * Math.PI, On = new three__WEBPACK_IMPORTED_MODULE_3__.Object3D, Fn = new three__WEBPACK_IMPORTED_MODULE_3__.Matrix4, [Ne, Nr] = [\n    new three__WEBPACK_IMPORTED_MODULE_3__.Quaternion,\n    new three__WEBPACK_IMPORTED_MODULE_3__.Quaternion\n], Dn = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3, Mn = new three__WEBPACK_IMPORTED_MODULE_3__.Vector3, vc = (t)=>\"minPolarAngle\" in t, Bn = ({ alignment: t = \"bottom-right\", margin: e = [\n    80,\n    80\n], renderPriority: r = 0, autoClear: o = !0, onUpdate: n, onTarget: i, children: s })=>{\n    let a = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ size: O })=>O), l = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ camera: O })=>O), c = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ controls: O })=>O), d = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ gl: O })=>O), u = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ scene: O })=>O), v = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)(({ invalidate: O })=>O), h = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), p = react__WEBPACK_IMPORTED_MODULE_0__.useRef(), g = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null), [E] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new three__WEBPACK_IMPORTED_MODULE_3__.Scene), x = react__WEBPACK_IMPORTED_MODULE_0__.useRef(!1), m = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0), _ = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0)), y = react__WEBPACK_IMPORTED_MODULE_0__.useRef(new three__WEBPACK_IMPORTED_MODULE_3__.Vector3(0, 0, 0));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        y.current.copy(l.up);\n    }, [\n        l\n    ]);\n    let f = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((O)=>{\n        x.current = !0, (c || i) && (_.current = (c == null ? void 0 : c.target) || (i == null ? void 0 : i())), m.current = l.position.distanceTo(Dn), Ne.copy(l.quaternion), Mn.copy(O).multiplyScalar(m.current).add(Dn), On.lookAt(Mn), Nr.copy(On.quaternion), v();\n    }, [\n        c,\n        l,\n        i,\n        v\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>(u.background && (h.current = u.background, u.background = null, E.background = h.current), ()=>{\n            h.current && (u.background = h.current);\n        }), []), (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.C)((O, Y)=>{\n        var X;\n        if (g.current && p.current) {\n            if (x.current) if (Ne.angleTo(Nr) < .01) x.current = !1, vc(c) && l.up.copy(y.current);\n            else {\n                let j = Y * _c;\n                Ne.rotateTowards(Nr, j), l.position.set(0, 0, 1).applyQuaternion(Ne).multiplyScalar(m.current).add(_.current), l.up.set(0, 1, 0).applyQuaternion(Ne).normalize(), l.quaternion.copy(Ne), n ? n() : c && c.update(), v();\n            }\n            Fn.copy(l.matrix).invert(), (X = p.current) == null || X.quaternion.setFromRotationMatrix(Fn), o && (d.autoClear = !1), d.clearDepth(), d.render(E, g.current);\n        }\n    }, r);\n    let T = An(g), C = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>({\n            tweenCamera: f,\n            raycast: T\n        }), [\n        f\n    ]), [R, S] = e, A = t.endsWith(\"-center\") ? 0 : t.endsWith(\"-left\") ? -a.width / 2 + R : a.width / 2 - R, w = t.startsWith(\"center-\") ? 0 : t.startsWith(\"top-\") ? a.height / 2 - S : -a.height / 2 + S;\n    return (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.g)((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(Nn.Provider, {\n        value: C,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(wn, {\n                ref: g,\n                position: [\n                    0,\n                    0,\n                    200\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"group\", {\n                ref: p,\n                position: [\n                    A,\n                    w,\n                    0\n                ],\n                children: s\n            })\n        ]\n    }), E);\n};\n\n\n\n\nfunction Ur({ scale: t = [\n    .8,\n    .05,\n    .05\n], color: e, rotation: r }) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"group\", {\n        rotation: r,\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"mesh\", {\n            position: [\n                .4,\n                0,\n                0\n            ],\n            children: [\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"boxGeometry\", {\n                    args: t\n                }),\n                (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"meshBasicMaterial\", {\n                    color: e,\n                    toneMapped: !1\n                })\n            ]\n        })\n    });\n}\nfunction Ue(l) {\n    var c = l, { onClick: t, font: e, disabled: r, arcStyle: o, label: n, labelColor: i, axisHeadScale: s = 1 } = c, a = Z(c, [\n        \"onClick\",\n        \"font\",\n        \"disabled\",\n        \"arcStyle\",\n        \"label\",\n        \"labelColor\",\n        \"axisHeadScale\"\n    ]);\n    let d = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)((x)=>x.gl), u = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        let x = document.createElement(\"canvas\");\n        x.width = 64, x.height = 64;\n        let m = x.getContext(\"2d\");\n        return m.beginPath(), m.arc(32, 32, 16, 0, 2 * Math.PI), m.closePath(), m.fillStyle = o, m.fill(), n && (m.font = e, m.textAlign = \"center\", m.fillStyle = i, m.fillText(n, 32, 41)), new three__WEBPACK_IMPORTED_MODULE_3__.CanvasTexture(x);\n    }, [\n        o,\n        n,\n        i,\n        e\n    ]), [v, h] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!1), p = (n ? 1 : .75) * (v ? 1.2 : 1) * s;\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"sprite\", W(D({\n        scale: p,\n        onPointerOver: r ? void 0 : (x)=>{\n            x.stopPropagation(), h(!0);\n        },\n        onPointerOut: r ? void 0 : t || ((x)=>{\n            x.stopPropagation(), h(!1);\n        })\n    }, a), {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"spriteMaterial\", {\n            map: u,\n            \"map-encoding\": d.outputEncoding,\n            \"map-anisotropy\": d.capabilities.getMaxAnisotropy() || 1,\n            alphaTest: .3,\n            opacity: n ? 1 : .75,\n            toneMapped: !1\n        })\n    }));\n}\nvar Vn = (u)=>{\n    var v = u, { hideNegativeAxes: t, hideAxisHeads: e, disabled: r, font: o = \"18px Inter var, Arial, sans-serif\", axisColors: n = [\n        \"#ff2060\",\n        \"#20df80\",\n        \"#2080ff\"\n    ], axisHeadScale: i = 1, axisScale: s, labels: a = [\n        \"X\",\n        \"Y\",\n        \"Z\"\n    ], labelColor: l = \"#000\", onClick: c } = v, d = Z(v, [\n        \"hideNegativeAxes\",\n        \"hideAxisHeads\",\n        \"disabled\",\n        \"font\",\n        \"axisColors\",\n        \"axisHeadScale\",\n        \"axisScale\",\n        \"labels\",\n        \"labelColor\",\n        \"onClick\"\n    ]);\n    let [h, p, g] = n, { tweenCamera: E, raycast: x } = Un(), m = {\n        font: o,\n        disabled: r,\n        labelColor: l,\n        raycast: x,\n        onClick: c,\n        axisHeadScale: i,\n        onPointerDown: r ? void 0 : (_)=>{\n            E(_.object.position), _.stopPropagation();\n        }\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"group\", W(D({\n        scale: 40\n    }, d), {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ur, {\n                color: h,\n                rotation: [\n                    0,\n                    0,\n                    0\n                ],\n                scale: s\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ur, {\n                color: p,\n                rotation: [\n                    0,\n                    0,\n                    Math.PI / 2\n                ],\n                scale: s\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ur, {\n                color: g,\n                rotation: [\n                    0,\n                    -Math.PI / 2,\n                    0\n                ],\n                scale: s\n            }),\n            !e && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ue, D({\n                        arcStyle: h,\n                        position: [\n                            1,\n                            0,\n                            0\n                        ],\n                        label: a[0]\n                    }, m)),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ue, D({\n                        arcStyle: p,\n                        position: [\n                            0,\n                            1,\n                            0\n                        ],\n                        label: a[1]\n                    }, m)),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ue, D({\n                        arcStyle: g,\n                        position: [\n                            0,\n                            0,\n                            1\n                        ],\n                        label: a[2]\n                    }, m)),\n                    !t && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n                        children: [\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ue, D({\n                                arcStyle: h,\n                                position: [\n                                    -1,\n                                    0,\n                                    0\n                                ]\n                            }, m)),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ue, D({\n                                arcStyle: p,\n                                position: [\n                                    0,\n                                    -1,\n                                    0\n                                ]\n                            }, m)),\n                            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ue, D({\n                                arcStyle: g,\n                                position: [\n                                    0,\n                                    0,\n                                    -1\n                                ]\n                            }, m))\n                        ]\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ambientLight\", {\n                intensity: .5\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"pointLight\", {\n                position: [\n                    10,\n                    10,\n                    10\n                ],\n                intensity: .5\n            })\n        ]\n    }));\n};\n\nfunction kn({ isFigmaPlugin: t }) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Bn, {\n            alignment: \"bottom-right\",\n            margin: t ? [\n                25,\n                25\n            ] : [\n                65,\n                110\n            ],\n            renderPriority: 2,\n            children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Vn, {\n                axisColors: [\n                    \"#FF430A\",\n                    \"#FF430A\",\n                    \"#FF430A\"\n                ],\n                labelColor: \"white\",\n                hideNegativeAxes: !0,\n                axisHeadScale: .8\n            })\n        })\n    });\n}\nvar k = {\n    LEFT: 1,\n    RIGHT: 2,\n    MIDDLE: 4\n}, P = Object.freeze({\n    NONE: 0,\n    ROTATE: 1,\n    TRUCK: 2,\n    OFFSET: 4,\n    DOLLY: 8,\n    ZOOM: 16,\n    TOUCH_ROTATE: 32,\n    TOUCH_TRUCK: 64,\n    TOUCH_OFFSET: 128,\n    TOUCH_DOLLY: 256,\n    TOUCH_ZOOM: 512,\n    TOUCH_DOLLY_TRUCK: 1024,\n    TOUCH_DOLLY_OFFSET: 2048,\n    TOUCH_DOLLY_ROTATE: 4096,\n    TOUCH_ZOOM_TRUCK: 8192,\n    TOUCH_ZOOM_OFFSET: 16384,\n    TOUCH_ZOOM_ROTATE: 32768\n});\nfunction ze(t) {\n    return t.isPerspectiveCamera;\n}\nfunction be(t) {\n    return t.isOrthographicCamera;\n}\nvar Be = Math.PI * 2, Gn = Math.PI / 2, Wn = 1e-5;\nfunction U(t, e = Wn) {\n    return Math.abs(t) < e;\n}\nfunction N(t, e, r = Wn) {\n    return U(t - e, r);\n}\nfunction Yn(t, e) {\n    return Math.round(t / e) * e;\n}\nfunction nt(t) {\n    return isFinite(t) ? t : t < 0 ? -Number.MAX_VALUE : Number.MAX_VALUE;\n}\nfunction it(t) {\n    return Math.abs(t) < Number.MAX_VALUE ? t : t * (1 / 0);\n}\nfunction Hr(t, e) {\n    e.set(0, 0), t.forEach((r)=>{\n        e.x += r.clientX, e.y += r.clientY;\n    }), e.x /= t.length, e.y /= t.length;\n}\nfunction Vr(t, e) {\n    return be(t) ? (console.warn(`${e} is not supported in OrthographicCamera`), !0) : !1;\n}\nfunction qn(t) {\n    return t.invert ? t.invert() : t.inverse(), t;\n}\nvar jr = class {\n    constructor(){\n        this._listeners = {};\n    }\n    addEventListener(e, r) {\n        let o = this._listeners;\n        o[e] === void 0 && (o[e] = []), o[e].indexOf(r) === -1 && o[e].push(r);\n    }\n    removeEventListener(e, r) {\n        let n = this._listeners[e];\n        if (n !== void 0) {\n            let i = n.indexOf(r);\n            i !== -1 && n.splice(i, 1);\n        }\n    }\n    removeAllEventListeners(e) {\n        if (!e) {\n            this._listeners = {};\n            return;\n        }\n        Array.isArray(this._listeners[e]) && (this._listeners[e].length = 0);\n    }\n    dispatchEvent(e) {\n        let o = this._listeners[e.type];\n        if (o !== void 0) {\n            e.target = this;\n            let n = o.slice(0);\n            for(let i = 0, s = n.length; i < s; i++)n[i].call(this, e);\n        }\n    }\n}, Jn = \"undefined\" < \"u\", Tc = Jn && /Mac/.test(navigator.platform), jn = !(Jn && \"PointerEvent\" in window), Ht = 1 / 8, z, Xn, Vt, kr, Q, F, I, He, ce, le, Ae, Zn, Qn, oe, st, Ve, $n, Gr, Kn, Yr, qr, kt, at = class extends jr {\n    constructor(e, r){\n        if (super(), this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.minDistance = 0, this.maxDistance = 1 / 0, this.infinityDolly = !1, this.minZoom = .01, this.maxZoom = 1 / 0, this.dampingFactor = .05, this.draggingDampingFactor = .25, this.azimuthRotateSpeed = 1, this.polarRotateSpeed = 1, this.dollySpeed = 1, this.truckSpeed = 2, this.dollyToCursor = !1, this.dragToOffset = !1, this.verticalDragToForward = !1, this.boundaryFriction = 0, this.restThreshold = .01, this.colliderMeshes = [], this.cancel = ()=>{}, this._enabled = !0, this._state = P.NONE, this._viewport = null, this._dollyControlAmount = 0, this._hasRested = !0, this._boundaryEnclosesCamera = !1, this._needsUpdate = !0, this._updatedLastTime = !1, this._elementRect = new DOMRect, this._activePointers = [], this._truckInternal = (o, n, i)=>{\n            if (ze(this._camera)) {\n                let s = F.copy(this._camera.position).sub(this._target), a = this._camera.getEffectiveFOV() * z.MathUtils.DEG2RAD, l = s.length() * Math.tan(a * .5), c = this.truckSpeed * o * l / this._elementRect.height, d = this.truckSpeed * n * l / this._elementRect.height;\n                this.verticalDragToForward ? (i ? this.setFocalOffset(this._focalOffsetEnd.x + c, this._focalOffsetEnd.y, this._focalOffsetEnd.z, !0) : this.truck(c, 0, !0), this.forward(-d, !0)) : i ? this.setFocalOffset(this._focalOffsetEnd.x + c, this._focalOffsetEnd.y + d, this._focalOffsetEnd.z, !0) : this.truck(c, d, !0);\n            } else if (be(this._camera)) {\n                let s = this._camera, a = o * (s.right - s.left) / s.zoom / this._elementRect.width, l = n * (s.top - s.bottom) / s.zoom / this._elementRect.height;\n                i ? this.setFocalOffset(this._focalOffsetEnd.x + a, this._focalOffsetEnd.y + l, this._focalOffsetEnd.z, !0) : this.truck(a, l, !0);\n            }\n        }, this._rotateInternal = (o, n)=>{\n            let i = Be * this.azimuthRotateSpeed * o / this._elementRect.height, s = Be * this.polarRotateSpeed * n / this._elementRect.height;\n            this.rotate(i, s, !0);\n        }, this._dollyInternal = (o, n, i)=>{\n            let s = Math.pow(.95, -o * this.dollySpeed), a = this._sphericalEnd.radius * s, l = this._sphericalEnd.radius, c = l * (o >= 0 ? -1 : 1);\n            this.dollyTo(a), this.infinityDolly && (a < this.minDistance || this.maxDistance === this.minDistance) && (this._camera.getWorldDirection(F), this._targetEnd.add(F.normalize().multiplyScalar(c)), this._target.add(F.normalize().multiplyScalar(c))), this.dollyToCursor && (this._dollyControlAmount += this._sphericalEnd.radius - l, this.infinityDolly && (a < this.minDistance || this.maxDistance === this.minDistance) && (this._dollyControlAmount -= c), this._dollyControlCoord.set(n, i));\n        }, this._zoomInternal = (o, n, i)=>{\n            let s = Math.pow(.95, o * this.dollySpeed), a = this._zoomEnd;\n            this.zoomTo(this._zoom * s), this.dollyToCursor && (this._dollyControlAmount += this._zoomEnd - a, this._dollyControlCoord.set(n, i));\n        }, typeof z > \"u\" && console.error(\"camera-controls: `THREE` is undefined. You must first run `CameraControls.install( { THREE: THREE } )`. Check the docs for further information.\"), this._camera = e, this._yAxisUpSpace = new z.Quaternion().setFromUnitVectors(this._camera.up, Vt), this._yAxisUpSpaceInverse = qn(this._yAxisUpSpace.clone()), this._state = P.NONE, this._domElement = r, this._domElement.style.touchAction = \"none\", this._domElement.style.userSelect = \"none\", this._domElement.style.webkitUserSelect = \"none\", this._target = new z.Vector3, this._targetEnd = this._target.clone(), this._focalOffset = new z.Vector3, this._focalOffsetEnd = this._focalOffset.clone(), this._spherical = new z.Spherical().setFromVector3(F.copy(this._camera.position).applyQuaternion(this._yAxisUpSpace)), this._sphericalEnd = this._spherical.clone(), this._zoom = this._camera.zoom, this._zoomEnd = this._zoom, this._nearPlaneCorners = [\n            new z.Vector3,\n            new z.Vector3,\n            new z.Vector3,\n            new z.Vector3\n        ], this._updateNearPlaneCorners(), this._boundary = new z.Box3(new z.Vector3(-1 / 0, -1 / 0, -1 / 0), new z.Vector3(1 / 0, 1 / 0, 1 / 0)), this._target0 = this._target.clone(), this._position0 = this._camera.position.clone(), this._zoom0 = this._zoom, this._focalOffset0 = this._focalOffset.clone(), this._dollyControlAmount = 0, this._dollyControlCoord = new z.Vector2, this.mouseButtons = {\n            left: P.ROTATE,\n            middle: P.DOLLY,\n            right: P.TRUCK,\n            wheel: ze(this._camera) ? P.DOLLY : be(this._camera) ? P.ZOOM : P.NONE\n        }, this.touches = {\n            one: P.TOUCH_ROTATE,\n            two: ze(this._camera) ? P.TOUCH_DOLLY_TRUCK : be(this._camera) ? P.TOUCH_ZOOM_TRUCK : P.NONE,\n            three: P.TOUCH_TRUCK\n        }, this._domElement) {\n            let o = new z.Vector2, n = new z.Vector2, i = new z.Vector2, s = (f)=>{\n                if (!this._enabled) return;\n                let T = {\n                    pointerId: f.pointerId,\n                    clientX: f.clientX,\n                    clientY: f.clientY,\n                    deltaX: 0,\n                    deltaY: 0\n                };\n                this._activePointers.push(T), this._domElement.ownerDocument.removeEventListener(\"pointermove\", c, {\n                    passive: !1\n                }), this._domElement.ownerDocument.removeEventListener(\"pointerup\", v), this._domElement.ownerDocument.addEventListener(\"pointermove\", c, {\n                    passive: !1\n                }), this._domElement.ownerDocument.addEventListener(\"pointerup\", v), m(f);\n            }, a = (f)=>{\n                if (!this._enabled) return;\n                let T = {\n                    pointerId: 0,\n                    clientX: f.clientX,\n                    clientY: f.clientY,\n                    deltaX: 0,\n                    deltaY: 0\n                };\n                this._activePointers.push(T), this._domElement.ownerDocument.removeEventListener(\"mousemove\", d), this._domElement.ownerDocument.removeEventListener(\"mouseup\", h), this._domElement.ownerDocument.addEventListener(\"mousemove\", d), this._domElement.ownerDocument.addEventListener(\"mouseup\", h), m(f);\n            }, l = (f)=>{\n                this._enabled && (f.preventDefault(), Array.prototype.forEach.call(f.changedTouches, (T)=>{\n                    let C = {\n                        pointerId: T.identifier,\n                        clientX: T.clientX,\n                        clientY: T.clientY,\n                        deltaX: 0,\n                        deltaY: 0\n                    };\n                    this._activePointers.push(C);\n                }), this._domElement.ownerDocument.removeEventListener(\"touchmove\", u, {\n                    passive: !1\n                }), this._domElement.ownerDocument.removeEventListener(\"touchend\", p), this._domElement.ownerDocument.addEventListener(\"touchmove\", u, {\n                    passive: !1\n                }), this._domElement.ownerDocument.addEventListener(\"touchend\", p), m(f));\n            }, c = (f)=>{\n                f.cancelable && f.preventDefault();\n                let T = f.pointerId, C = this._findPointerById(T);\n                if (C) {\n                    if (C.clientX = f.clientX, C.clientY = f.clientY, C.deltaX = f.movementX, C.deltaY = f.movementY, f.pointerType === \"touch\") switch(this._activePointers.length){\n                        case 1:\n                            this._state = this.touches.one;\n                            break;\n                        case 2:\n                            this._state = this.touches.two;\n                            break;\n                        case 3:\n                            this._state = this.touches.three;\n                            break;\n                    }\n                    else this._state = 0, (f.buttons & k.LEFT) === k.LEFT && (this._state = this._state | this.mouseButtons.left), (f.buttons & k.MIDDLE) === k.MIDDLE && (this._state = this._state | this.mouseButtons.middle), (f.buttons & k.RIGHT) === k.RIGHT && (this._state = this._state | this.mouseButtons.right);\n                    _();\n                }\n            }, d = (f)=>{\n                let T = this._findPointerById(0);\n                T && (T.clientX = f.clientX, T.clientY = f.clientY, T.deltaX = f.movementX, T.deltaY = f.movementY, this._state = 0, (f.buttons & k.LEFT) === k.LEFT && (this._state = this._state | this.mouseButtons.left), (f.buttons & k.MIDDLE) === k.MIDDLE && (this._state = this._state | this.mouseButtons.middle), (f.buttons & k.RIGHT) === k.RIGHT && (this._state = this._state | this.mouseButtons.right), _());\n            }, u = (f)=>{\n                f.cancelable && f.preventDefault(), Array.prototype.forEach.call(f.changedTouches, (T)=>{\n                    let C = T.identifier, R = this._findPointerById(C);\n                    R && (R.clientX = T.clientX, R.clientY = T.clientY);\n                }), _();\n            }, v = (f)=>{\n                let T = f.pointerId, C = this._findPointerById(T);\n                if (C && this._activePointers.splice(this._activePointers.indexOf(C), 1), f.pointerType === \"touch\") switch(this._activePointers.length){\n                    case 0:\n                        this._state = P.NONE;\n                        break;\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n                else this._state = P.NONE;\n                y();\n            }, h = ()=>{\n                let f = this._findPointerById(0);\n                f && this._activePointers.splice(this._activePointers.indexOf(f), 1), this._state = P.NONE, y();\n            }, p = (f)=>{\n                switch(Array.prototype.forEach.call(f.changedTouches, (T)=>{\n                    let C = T.identifier, R = this._findPointerById(C);\n                    R && this._activePointers.splice(this._activePointers.indexOf(R), 1);\n                }), this._activePointers.length){\n                    case 0:\n                        this._state = P.NONE;\n                        break;\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n                y();\n            }, g = -1, E = (f)=>{\n                if (!this._enabled || this.mouseButtons.wheel === P.NONE) return;\n                if (f.preventDefault(), this.dollyToCursor || this.mouseButtons.wheel === P.ROTATE || this.mouseButtons.wheel === P.TRUCK) {\n                    let A = performance.now();\n                    g - A < 1e3 && this._getClientRect(this._elementRect), g = A;\n                }\n                let T = Tc ? -1 : -3, C = f.deltaMode === 1 ? f.deltaY / T : f.deltaY / (T * 10), R = this.dollyToCursor ? (f.clientX - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0, S = this.dollyToCursor ? (f.clientY - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                switch(this.mouseButtons.wheel){\n                    case P.ROTATE:\n                        {\n                            this._rotateInternal(f.deltaX, f.deltaY);\n                            break;\n                        }\n                    case P.TRUCK:\n                        {\n                            this._truckInternal(f.deltaX, f.deltaY, !1);\n                            break;\n                        }\n                    case P.OFFSET:\n                        {\n                            this._truckInternal(f.deltaX, f.deltaY, !0);\n                            break;\n                        }\n                    case P.DOLLY:\n                        {\n                            this._dollyInternal(-C, R, S);\n                            break;\n                        }\n                    case P.ZOOM:\n                        {\n                            this._zoomInternal(-C, R, S);\n                            break;\n                        }\n                }\n                this.dispatchEvent({\n                    type: \"control\"\n                });\n            }, x = (f)=>{\n                this._enabled && f.preventDefault();\n            }, m = (f)=>{\n                if (!this._enabled) return;\n                if (Hr(this._activePointers, Q), this._getClientRect(this._elementRect), o.copy(Q), n.copy(Q), this._activePointers.length >= 2) {\n                    let C = Q.x - this._activePointers[1].clientX, R = Q.y - this._activePointers[1].clientY, S = Math.sqrt(C * C + R * R);\n                    i.set(0, S);\n                    let A = (this._activePointers[0].clientX + this._activePointers[1].clientX) * .5, w = (this._activePointers[0].clientY + this._activePointers[1].clientY) * .5;\n                    n.set(A, w);\n                }\n                if (\"touches\" in f || \"pointerType\" in f && f.pointerType === \"touch\") switch(this._activePointers.length){\n                    case 1:\n                        this._state = this.touches.one;\n                        break;\n                    case 2:\n                        this._state = this.touches.two;\n                        break;\n                    case 3:\n                        this._state = this.touches.three;\n                        break;\n                }\n                else this._state = 0, (f.buttons & k.LEFT) === k.LEFT && (this._state = this._state | this.mouseButtons.left), (f.buttons & k.MIDDLE) === k.MIDDLE && (this._state = this._state | this.mouseButtons.middle), (f.buttons & k.RIGHT) === k.RIGHT && (this._state = this._state | this.mouseButtons.right);\n                this.dispatchEvent({\n                    type: \"controlstart\"\n                });\n            }, _ = ()=>{\n                if (!this._enabled) return;\n                Hr(this._activePointers, Q);\n                let f = this._domElement && document.pointerLockElement === this._domElement, T = f ? -this._activePointers[0].deltaX : n.x - Q.x, C = f ? -this._activePointers[0].deltaY : n.y - Q.y;\n                if (n.copy(Q), ((this._state & P.ROTATE) === P.ROTATE || (this._state & P.TOUCH_ROTATE) === P.TOUCH_ROTATE || (this._state & P.TOUCH_DOLLY_ROTATE) === P.TOUCH_DOLLY_ROTATE || (this._state & P.TOUCH_ZOOM_ROTATE) === P.TOUCH_ZOOM_ROTATE) && this._rotateInternal(T, C), (this._state & P.DOLLY) === P.DOLLY || (this._state & P.ZOOM) === P.ZOOM) {\n                    let R = this.dollyToCursor ? (o.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0, S = this.dollyToCursor ? (o.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                    this._state === P.DOLLY ? this._dollyInternal(C * Ht, R, S) : this._zoomInternal(C * Ht, R, S);\n                }\n                if ((this._state & P.TOUCH_DOLLY) === P.TOUCH_DOLLY || (this._state & P.TOUCH_ZOOM) === P.TOUCH_ZOOM || (this._state & P.TOUCH_DOLLY_TRUCK) === P.TOUCH_DOLLY_TRUCK || (this._state & P.TOUCH_ZOOM_TRUCK) === P.TOUCH_ZOOM_TRUCK || (this._state & P.TOUCH_DOLLY_OFFSET) === P.TOUCH_DOLLY_OFFSET || (this._state & P.TOUCH_ZOOM_OFFSET) === P.TOUCH_ZOOM_OFFSET || (this._state & P.TOUCH_DOLLY_ROTATE) === P.TOUCH_DOLLY_ROTATE || (this._state & P.TOUCH_ZOOM_ROTATE) === P.TOUCH_ZOOM_ROTATE) {\n                    let R = Q.x - this._activePointers[1].clientX, S = Q.y - this._activePointers[1].clientY, A = Math.sqrt(R * R + S * S), w = i.y - A;\n                    i.set(0, A);\n                    let O = this.dollyToCursor ? (n.x - this._elementRect.x) / this._elementRect.width * 2 - 1 : 0, Y = this.dollyToCursor ? (n.y - this._elementRect.y) / this._elementRect.height * -2 + 1 : 0;\n                    this._state === P.TOUCH_DOLLY || this._state === P.TOUCH_DOLLY_ROTATE || this._state === P.TOUCH_DOLLY_TRUCK || this._state === P.TOUCH_DOLLY_OFFSET ? this._dollyInternal(w * Ht, O, Y) : this._zoomInternal(w * Ht, O, Y);\n                }\n                ((this._state & P.TRUCK) === P.TRUCK || (this._state & P.TOUCH_TRUCK) === P.TOUCH_TRUCK || (this._state & P.TOUCH_DOLLY_TRUCK) === P.TOUCH_DOLLY_TRUCK || (this._state & P.TOUCH_ZOOM_TRUCK) === P.TOUCH_ZOOM_TRUCK) && this._truckInternal(T, C, !1), ((this._state & P.OFFSET) === P.OFFSET || (this._state & P.TOUCH_OFFSET) === P.TOUCH_OFFSET || (this._state & P.TOUCH_DOLLY_OFFSET) === P.TOUCH_DOLLY_OFFSET || (this._state & P.TOUCH_ZOOM_OFFSET) === P.TOUCH_ZOOM_OFFSET) && this._truckInternal(T, C, !0), this.dispatchEvent({\n                    type: \"control\"\n                });\n            }, y = ()=>{\n                Hr(this._activePointers, Q), n.copy(Q), this._activePointers.length === 0 && (this._domElement.ownerDocument.removeEventListener(\"pointermove\", c, {\n                    passive: !1\n                }), this._domElement.ownerDocument.removeEventListener(\"pointerup\", v), this._domElement.ownerDocument.removeEventListener(\"touchmove\", u, {\n                    passive: !1\n                }), this._domElement.ownerDocument.removeEventListener(\"touchend\", p), this.dispatchEvent({\n                    type: \"controlend\"\n                }));\n            };\n            this._domElement.addEventListener(\"pointerdown\", s), jn && this._domElement.addEventListener(\"mousedown\", a), jn && this._domElement.addEventListener(\"touchstart\", l), this._domElement.addEventListener(\"pointercancel\", v), this._domElement.addEventListener(\"wheel\", E, {\n                passive: !1\n            }), this._domElement.addEventListener(\"contextmenu\", x), this._removeAllEventListeners = ()=>{\n                this._domElement.removeEventListener(\"pointerdown\", s), this._domElement.removeEventListener(\"mousedown\", a), this._domElement.removeEventListener(\"touchstart\", l), this._domElement.removeEventListener(\"pointercancel\", v), this._domElement.removeEventListener(\"wheel\", E, {\n                    passive: !1\n                }), this._domElement.removeEventListener(\"contextmenu\", x), this._domElement.ownerDocument.removeEventListener(\"pointermove\", c, {\n                    passive: !1\n                }), this._domElement.ownerDocument.removeEventListener(\"mousemove\", d), this._domElement.ownerDocument.removeEventListener(\"touchmove\", u, {\n                    passive: !1\n                }), this._domElement.ownerDocument.removeEventListener(\"pointerup\", v), this._domElement.ownerDocument.removeEventListener(\"mouseup\", h), this._domElement.ownerDocument.removeEventListener(\"touchend\", p);\n            }, this.cancel = ()=>{\n                this._state !== P.NONE && (this._state = P.NONE, this._activePointers.length = 0, y());\n            };\n        }\n        this.update(0);\n    }\n    static install(e) {\n        z = e.THREE, Xn = Object.freeze(new z.Vector3(0, 0, 0)), Vt = Object.freeze(new z.Vector3(0, 1, 0)), kr = Object.freeze(new z.Vector3(0, 0, 1)), Q = new z.Vector2, F = new z.Vector3, I = new z.Vector3, He = new z.Vector3, ce = new z.Vector3, le = new z.Vector3, Ae = new z.Vector3, Zn = new z.Vector3, Qn = new z.Vector3, oe = new z.Spherical, st = new z.Spherical, Ve = new z.Box3, $n = new z.Box3, Gr = new z.Sphere, Kn = new z.Quaternion, Yr = new z.Quaternion, qr = new z.Matrix4, kt = new z.Raycaster;\n    }\n    static get ACTION() {\n        return P;\n    }\n    get camera() {\n        return this._camera;\n    }\n    set camera(e) {\n        this._camera = e, this.updateCameraUp(), this._camera.updateProjectionMatrix(), this._updateNearPlaneCorners(), this._needsUpdate = !0;\n    }\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(e) {\n        this._enabled = e, e ? (this._domElement.style.touchAction = \"none\", this._domElement.style.userSelect = \"none\", this._domElement.style.webkitUserSelect = \"none\") : (this.cancel(), this._domElement.style.touchAction = \"\", this._domElement.style.userSelect = \"\", this._domElement.style.webkitUserSelect = \"\");\n    }\n    get active() {\n        return !this._hasRested;\n    }\n    get currentAction() {\n        return this._state;\n    }\n    get distance() {\n        return this._spherical.radius;\n    }\n    set distance(e) {\n        this._spherical.radius === e && this._sphericalEnd.radius === e || (this._spherical.radius = e, this._sphericalEnd.radius = e, this._needsUpdate = !0);\n    }\n    get azimuthAngle() {\n        return this._spherical.theta;\n    }\n    set azimuthAngle(e) {\n        this._spherical.theta === e && this._sphericalEnd.theta === e || (this._spherical.theta = e, this._sphericalEnd.theta = e, this._needsUpdate = !0);\n    }\n    get polarAngle() {\n        return this._spherical.phi;\n    }\n    set polarAngle(e) {\n        this._spherical.phi === e && this._sphericalEnd.phi === e || (this._spherical.phi = e, this._sphericalEnd.phi = e, this._needsUpdate = !0);\n    }\n    get boundaryEnclosesCamera() {\n        return this._boundaryEnclosesCamera;\n    }\n    set boundaryEnclosesCamera(e) {\n        this._boundaryEnclosesCamera = e, this._needsUpdate = !0;\n    }\n    addEventListener(e, r) {\n        super.addEventListener(e, r);\n    }\n    removeEventListener(e, r) {\n        super.removeEventListener(e, r);\n    }\n    rotate(e, r, o = !1) {\n        return this.rotateTo(this._sphericalEnd.theta + e, this._sphericalEnd.phi + r, o);\n    }\n    rotateAzimuthTo(e, r = !1) {\n        return this.rotateTo(e, this._sphericalEnd.phi, r);\n    }\n    rotatePolarTo(e, r = !1) {\n        return this.rotateTo(this._sphericalEnd.theta, e, r);\n    }\n    rotateTo(e, r, o = !1) {\n        let n = z.MathUtils.clamp(e, this.minAzimuthAngle, this.maxAzimuthAngle), i = z.MathUtils.clamp(r, this.minPolarAngle, this.maxPolarAngle);\n        this._sphericalEnd.theta = n, this._sphericalEnd.phi = i, this._sphericalEnd.makeSafe(), this._needsUpdate = !0, o || (this._spherical.theta = this._sphericalEnd.theta, this._spherical.phi = this._sphericalEnd.phi);\n        let s = !o || N(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && N(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold);\n        return this._createOnRestPromise(s);\n    }\n    dolly(e, r = !1) {\n        return this.dollyTo(this._sphericalEnd.radius - e, r);\n    }\n    dollyTo(e, r = !1) {\n        let o = this._sphericalEnd.radius, n = z.MathUtils.clamp(e, this.minDistance, this.maxDistance);\n        if (this.colliderMeshes.length >= 1) {\n            let a = this._collisionTest(), l = N(a, this._spherical.radius);\n            if (!(o > n) && l) return Promise.resolve();\n            this._sphericalEnd.radius = Math.min(n, a);\n        } else this._sphericalEnd.radius = n;\n        this._needsUpdate = !0, r || (this._spherical.radius = this._sphericalEnd.radius);\n        let s = !r || N(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(s);\n    }\n    zoom(e, r = !1) {\n        return this.zoomTo(this._zoomEnd + e, r);\n    }\n    zoomTo(e, r = !1) {\n        this._zoomEnd = z.MathUtils.clamp(e, this.minZoom, this.maxZoom), this._needsUpdate = !0, r || (this._zoom = this._zoomEnd);\n        let o = !r || N(this._zoom, this._zoomEnd, this.restThreshold);\n        return this._createOnRestPromise(o);\n    }\n    pan(e, r, o = !1) {\n        return console.warn(\"`pan` has been renamed to `truck`\"), this.truck(e, r, o);\n    }\n    truck(e, r, o = !1) {\n        this._camera.updateMatrix(), ce.setFromMatrixColumn(this._camera.matrix, 0), le.setFromMatrixColumn(this._camera.matrix, 1), ce.multiplyScalar(e), le.multiplyScalar(-r);\n        let n = F.copy(ce).add(le), i = I.copy(this._targetEnd).add(n);\n        return this.moveTo(i.x, i.y, i.z, o);\n    }\n    forward(e, r = !1) {\n        F.setFromMatrixColumn(this._camera.matrix, 0), F.crossVectors(this._camera.up, F), F.multiplyScalar(e);\n        let o = I.copy(this._targetEnd).add(F);\n        return this.moveTo(o.x, o.y, o.z, r);\n    }\n    moveTo(e, r, o, n = !1) {\n        let i = F.set(e, r, o).sub(this._targetEnd);\n        this._encloseToBoundary(this._targetEnd, i, this.boundaryFriction), this._needsUpdate = !0, n || this._target.copy(this._targetEnd);\n        let s = !n || N(this._target.x, this._targetEnd.x, this.restThreshold) && N(this._target.y, this._targetEnd.y, this.restThreshold) && N(this._target.z, this._targetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(s);\n    }\n    fitToBox(e, r, { cover: o = !1, paddingLeft: n = 0, paddingRight: i = 0, paddingBottom: s = 0, paddingTop: a = 0 } = {}) {\n        let l = [], c = e.isBox3 ? Ve.copy(e) : Ve.setFromObject(e);\n        c.isEmpty() && (console.warn(\"camera-controls: fitTo() cannot be used with an empty box. Aborting\"), Promise.resolve());\n        let d = Yn(this._sphericalEnd.theta, Gn), u = Yn(this._sphericalEnd.phi, Gn);\n        l.push(this.rotateTo(d, u, r));\n        let v = F.setFromSpherical(this._sphericalEnd).normalize(), h = Kn.setFromUnitVectors(v, kr), p = N(Math.abs(v.y), 1);\n        p && h.multiply(Yr.setFromAxisAngle(Vt, d)), h.multiply(this._yAxisUpSpaceInverse);\n        let g = $n.makeEmpty();\n        I.copy(c.min).applyQuaternion(h), g.expandByPoint(I), I.copy(c.min).setX(c.max.x).applyQuaternion(h), g.expandByPoint(I), I.copy(c.min).setY(c.max.y).applyQuaternion(h), g.expandByPoint(I), I.copy(c.max).setZ(c.min.z).applyQuaternion(h), g.expandByPoint(I), I.copy(c.min).setZ(c.max.z).applyQuaternion(h), g.expandByPoint(I), I.copy(c.max).setY(c.min.y).applyQuaternion(h), g.expandByPoint(I), I.copy(c.max).setX(c.min.x).applyQuaternion(h), g.expandByPoint(I), I.copy(c.max).applyQuaternion(h), g.expandByPoint(I), g.min.x -= n, g.min.y -= s, g.max.x += i, g.max.y += a, h.setFromUnitVectors(kr, v), p && h.premultiply(Yr.invert()), h.premultiply(this._yAxisUpSpace);\n        let E = g.getSize(F), x = g.getCenter(I).applyQuaternion(h);\n        if (ze(this._camera)) {\n            let m = this.getDistanceToFitBox(E.x, E.y, E.z, o);\n            l.push(this.moveTo(x.x, x.y, x.z, r)), l.push(this.dollyTo(m, r)), l.push(this.setFocalOffset(0, 0, 0, r));\n        } else if (be(this._camera)) {\n            let m = this._camera, _ = m.right - m.left, y = m.top - m.bottom, f = o ? Math.max(_ / E.x, y / E.y) : Math.min(_ / E.x, y / E.y);\n            l.push(this.moveTo(x.x, x.y, x.z, r)), l.push(this.zoomTo(f, r)), l.push(this.setFocalOffset(0, 0, 0, r));\n        }\n        return Promise.all(l);\n    }\n    fitToSphere(e, r) {\n        let o = [], i = e instanceof z.Sphere ? Gr.copy(e) : Pc(e, Gr);\n        if (o.push(this.moveTo(i.center.x, i.center.y, i.center.z, r)), ze(this._camera)) {\n            let s = this.getDistanceToFitSphere(i.radius);\n            o.push(this.dollyTo(s, r));\n        } else if (be(this._camera)) {\n            let s = this._camera.right - this._camera.left, a = this._camera.top - this._camera.bottom, l = 2 * i.radius, c = Math.min(s / l, a / l);\n            o.push(this.zoomTo(c, r));\n        }\n        return o.push(this.setFocalOffset(0, 0, 0, r)), Promise.all(o);\n    }\n    setLookAt(e, r, o, n, i, s, a = !1) {\n        let l = I.set(n, i, s), c = F.set(e, r, o);\n        this._targetEnd.copy(l), this._sphericalEnd.setFromVector3(c.sub(l).applyQuaternion(this._yAxisUpSpace)), this.normalizeRotations(), this._needsUpdate = !0, a || (this._target.copy(this._targetEnd), this._spherical.copy(this._sphericalEnd));\n        let d = !a || N(this._target.x, this._targetEnd.x, this.restThreshold) && N(this._target.y, this._targetEnd.y, this.restThreshold) && N(this._target.z, this._targetEnd.z, this.restThreshold) && N(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && N(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && N(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(d);\n    }\n    lerpLookAt(e, r, o, n, i, s, a, l, c, d, u, v, h, p = !1) {\n        let g = F.set(n, i, s), E = I.set(e, r, o);\n        oe.setFromVector3(E.sub(g).applyQuaternion(this._yAxisUpSpace));\n        let x = He.set(d, u, v), m = I.set(a, l, c);\n        st.setFromVector3(m.sub(x).applyQuaternion(this._yAxisUpSpace)), this._targetEnd.copy(g.lerp(x, h));\n        let _ = st.theta - oe.theta, y = st.phi - oe.phi, f = st.radius - oe.radius;\n        this._sphericalEnd.set(oe.radius + f * h, oe.phi + y * h, oe.theta + _ * h), this.normalizeRotations(), this._needsUpdate = !0, p || (this._target.copy(this._targetEnd), this._spherical.copy(this._sphericalEnd));\n        let T = !p || N(this._target.x, this._targetEnd.x, this.restThreshold) && N(this._target.y, this._targetEnd.y, this.restThreshold) && N(this._target.z, this._targetEnd.z, this.restThreshold) && N(this._spherical.theta, this._sphericalEnd.theta, this.restThreshold) && N(this._spherical.phi, this._sphericalEnd.phi, this.restThreshold) && N(this._spherical.radius, this._sphericalEnd.radius, this.restThreshold);\n        return this._createOnRestPromise(T);\n    }\n    setPosition(e, r, o, n = !1) {\n        return this.setLookAt(e, r, o, this._targetEnd.x, this._targetEnd.y, this._targetEnd.z, n);\n    }\n    setTarget(e, r, o, n = !1) {\n        let i = this.getPosition(F);\n        return this.setLookAt(i.x, i.y, i.z, e, r, o, n);\n    }\n    setFocalOffset(e, r, o, n = !1) {\n        this._focalOffsetEnd.set(e, r, o), this._needsUpdate = !0, n || this._focalOffset.copy(this._focalOffsetEnd);\n        let i = !n || N(this._focalOffset.x, this._focalOffsetEnd.x, this.restThreshold) && N(this._focalOffset.y, this._focalOffsetEnd.y, this.restThreshold) && N(this._focalOffset.z, this._focalOffsetEnd.z, this.restThreshold);\n        return this._createOnRestPromise(i);\n    }\n    setOrbitPoint(e, r, o) {\n        this._camera.updateMatrixWorld(), ce.setFromMatrixColumn(this._camera.matrixWorldInverse, 0), le.setFromMatrixColumn(this._camera.matrixWorldInverse, 1), Ae.setFromMatrixColumn(this._camera.matrixWorldInverse, 2);\n        let n = F.set(e, r, o), i = n.distanceTo(this._camera.position), s = n.sub(this._camera.position);\n        ce.multiplyScalar(s.x), le.multiplyScalar(s.y), Ae.multiplyScalar(s.z), F.copy(ce).add(le).add(Ae), F.z = F.z + i, this.dollyTo(i, !1), this.setFocalOffset(-F.x, F.y, -F.z, !1), this.moveTo(e, r, o, !1);\n    }\n    setBoundary(e) {\n        if (!e) {\n            this._boundary.min.set(-1 / 0, -1 / 0, -1 / 0), this._boundary.max.set(1 / 0, 1 / 0, 1 / 0), this._needsUpdate = !0;\n            return;\n        }\n        this._boundary.copy(e), this._boundary.clampPoint(this._targetEnd, this._targetEnd), this._needsUpdate = !0;\n    }\n    setViewport(e, r, o, n) {\n        if (e === null) {\n            this._viewport = null;\n            return;\n        }\n        this._viewport = this._viewport || new z.Vector4, typeof e == \"number\" ? this._viewport.set(e, r, o, n) : this._viewport.copy(e);\n    }\n    getDistanceToFitBox(e, r, o, n = !1) {\n        if (Vr(this._camera, \"getDistanceToFitBox\")) return this._spherical.radius;\n        let i = e / r, s = this._camera.getEffectiveFOV() * z.MathUtils.DEG2RAD, a = this._camera.aspect;\n        return ((n ? i > a : i < a) ? r : e / a) * .5 / Math.tan(s * .5) + o * .5;\n    }\n    getDistanceToFitSphere(e) {\n        if (Vr(this._camera, \"getDistanceToFitSphere\")) return this._spherical.radius;\n        let r = this._camera.getEffectiveFOV() * z.MathUtils.DEG2RAD, o = Math.atan(Math.tan(r * .5) * this._camera.aspect) * 2, n = 1 < this._camera.aspect ? r : o;\n        return e / Math.sin(n * .5);\n    }\n    getTarget(e) {\n        return (e && e.isVector3 ? e : new z.Vector3).copy(this._targetEnd);\n    }\n    getPosition(e) {\n        return (e && e.isVector3 ? e : new z.Vector3).setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).add(this._targetEnd);\n    }\n    getFocalOffset(e) {\n        return (e && e.isVector3 ? e : new z.Vector3).copy(this._focalOffsetEnd);\n    }\n    normalizeRotations() {\n        this._sphericalEnd.theta = this._sphericalEnd.theta % Be, this._sphericalEnd.theta < 0 && (this._sphericalEnd.theta += Be), this._spherical.theta += Be * Math.round((this._sphericalEnd.theta - this._spherical.theta) / Be);\n    }\n    reset(e = !1) {\n        let r = [\n            this.setLookAt(this._position0.x, this._position0.y, this._position0.z, this._target0.x, this._target0.y, this._target0.z, e),\n            this.setFocalOffset(this._focalOffset0.x, this._focalOffset0.y, this._focalOffset0.z, e),\n            this.zoomTo(this._zoom0, e)\n        ];\n        return Promise.all(r);\n    }\n    saveState() {\n        this.getTarget(this._target0), this.getPosition(this._position0), this._zoom0 = this._zoom, this._focalOffset0.copy(this._focalOffset);\n    }\n    updateCameraUp() {\n        this._yAxisUpSpace.setFromUnitVectors(this._camera.up, Vt), qn(this._yAxisUpSpaceInverse.copy(this._yAxisUpSpace));\n    }\n    update(e) {\n        let r = this._state === P.NONE ? this.dampingFactor : this.draggingDampingFactor, o = Math.min(r * e * 60, 1), n = this._sphericalEnd.theta - this._spherical.theta, i = this._sphericalEnd.phi - this._spherical.phi, s = this._sphericalEnd.radius - this._spherical.radius, a = Zn.subVectors(this._targetEnd, this._target), l = Qn.subVectors(this._focalOffsetEnd, this._focalOffset);\n        if (!U(n) || !U(i) || !U(s) || !U(a.x) || !U(a.y) || !U(a.z) || !U(l.x) || !U(l.y) || !U(l.z) ? (this._spherical.set(this._spherical.radius + s * o, this._spherical.phi + i * o, this._spherical.theta + n * o), this._target.add(a.multiplyScalar(o)), this._focalOffset.add(l.multiplyScalar(o)), this._needsUpdate = !0) : (this._spherical.copy(this._sphericalEnd), this._target.copy(this._targetEnd), this._focalOffset.copy(this._focalOffsetEnd)), this._dollyControlAmount !== 0) {\n            if (ze(this._camera)) {\n                let h = this._camera, p = F.setFromSpherical(this._sphericalEnd).applyQuaternion(this._yAxisUpSpaceInverse).normalize().negate(), g = I.copy(p).cross(h.up).normalize();\n                g.lengthSq() === 0 && (g.x = 1);\n                let E = He.crossVectors(g, p), x = this._sphericalEnd.radius * Math.tan(h.getEffectiveFOV() * z.MathUtils.DEG2RAD * .5), _ = (this._sphericalEnd.radius - this._dollyControlAmount - this._sphericalEnd.radius) / this._sphericalEnd.radius, y = F.copy(this._targetEnd).add(g.multiplyScalar(this._dollyControlCoord.x * x * h.aspect)).add(E.multiplyScalar(this._dollyControlCoord.y * x));\n                this._targetEnd.lerp(y, _);\n            } else if (be(this._camera)) {\n                let h = this._camera, p = h.getWorldDirection(F.clone()), g = this._targetEnd.x * p.x + this._targetEnd.y * p.y + this._targetEnd.z * p.z, E = F.set(this._dollyControlCoord.x, this._dollyControlCoord.y, (h.near + h.far) / (h.near - h.far)).unproject(h), x = I.set(0, 0, -1).applyQuaternion(h.quaternion), m = He.copy(E).add(x.multiplyScalar(-E.dot(h.up))), y = -(this._zoom - this._dollyControlAmount - this._zoomEnd) / this._zoom;\n                this._targetEnd.lerp(m, y);\n                let f = this._targetEnd.x * p.x + this._targetEnd.y * p.y + this._targetEnd.z * p.z, T = p.multiplyScalar(f - g);\n                this._targetEnd.sub(T);\n            }\n            this._target.copy(this._targetEnd), this._boundary.clampPoint(this._targetEnd, this._targetEnd), this._dollyControlAmount = 0;\n        }\n        let c = this._collisionTest();\n        this._spherical.radius = Math.min(this._spherical.radius, c), this._spherical.makeSafe(), this._camera.position.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse).add(this._target), this._camera.lookAt(this._target), (!U(this._focalOffset.x) || !U(this._focalOffset.y) || !U(this._focalOffset.z)) && (this._camera.updateMatrix(), ce.setFromMatrixColumn(this._camera.matrix, 0), le.setFromMatrixColumn(this._camera.matrix, 1), Ae.setFromMatrixColumn(this._camera.matrix, 2), ce.multiplyScalar(this._focalOffset.x), le.multiplyScalar(-this._focalOffset.y), Ae.multiplyScalar(this._focalOffset.z), F.copy(ce).add(le).add(Ae), this._camera.position.add(F)), this._boundaryEnclosesCamera && this._encloseToBoundary(this._camera.position.copy(this._target), F.setFromSpherical(this._spherical).applyQuaternion(this._yAxisUpSpaceInverse), 1);\n        let u = this._zoomEnd - this._zoom;\n        this._zoom += u * o, this._camera.zoom !== this._zoom && (U(u) && (this._zoom = this._zoomEnd), this._camera.zoom = this._zoom, this._camera.updateProjectionMatrix(), this._updateNearPlaneCorners(), this._needsUpdate = !0);\n        let v = this._needsUpdate;\n        return v && !this._updatedLastTime ? (this._hasRested = !1, this.dispatchEvent({\n            type: \"wake\"\n        }), this.dispatchEvent({\n            type: \"update\"\n        })) : v ? (this.dispatchEvent({\n            type: \"update\"\n        }), U(n, this.restThreshold) && U(i, this.restThreshold) && U(s, this.restThreshold) && U(a.x, this.restThreshold) && U(a.y, this.restThreshold) && U(a.z, this.restThreshold) && U(l.x, this.restThreshold) && U(l.y, this.restThreshold) && U(l.z, this.restThreshold) && U(u, this.restThreshold) && !this._hasRested && (this._hasRested = !0, this.dispatchEvent({\n            type: \"rest\"\n        }))) : !v && this._updatedLastTime && this.dispatchEvent({\n            type: \"sleep\"\n        }), this._updatedLastTime = v, this._needsUpdate = !1, v;\n    }\n    toJSON() {\n        return JSON.stringify({\n            enabled: this._enabled,\n            minDistance: this.minDistance,\n            maxDistance: nt(this.maxDistance),\n            minZoom: this.minZoom,\n            maxZoom: nt(this.maxZoom),\n            minPolarAngle: this.minPolarAngle,\n            maxPolarAngle: nt(this.maxPolarAngle),\n            minAzimuthAngle: nt(this.minAzimuthAngle),\n            maxAzimuthAngle: nt(this.maxAzimuthAngle),\n            dampingFactor: this.dampingFactor,\n            draggingDampingFactor: this.draggingDampingFactor,\n            dollySpeed: this.dollySpeed,\n            truckSpeed: this.truckSpeed,\n            dollyToCursor: this.dollyToCursor,\n            verticalDragToForward: this.verticalDragToForward,\n            target: this._targetEnd.toArray(),\n            position: F.setFromSpherical(this._sphericalEnd).add(this._targetEnd).toArray(),\n            zoom: this._zoomEnd,\n            focalOffset: this._focalOffsetEnd.toArray(),\n            target0: this._target0.toArray(),\n            position0: this._position0.toArray(),\n            zoom0: this._zoom0,\n            focalOffset0: this._focalOffset0.toArray()\n        });\n    }\n    fromJSON(e, r = !1) {\n        let o = JSON.parse(e), n = F.fromArray(o.position);\n        this.enabled = o.enabled, this.minDistance = o.minDistance, this.maxDistance = it(o.maxDistance), this.minZoom = o.minZoom, this.maxZoom = it(o.maxZoom), this.minPolarAngle = o.minPolarAngle, this.maxPolarAngle = it(o.maxPolarAngle), this.minAzimuthAngle = it(o.minAzimuthAngle), this.maxAzimuthAngle = it(o.maxAzimuthAngle), this.dampingFactor = o.dampingFactor, this.draggingDampingFactor = o.draggingDampingFactor, this.dollySpeed = o.dollySpeed, this.truckSpeed = o.truckSpeed, this.dollyToCursor = o.dollyToCursor, this.verticalDragToForward = o.verticalDragToForward, this._target0.fromArray(o.target0), this._position0.fromArray(o.position0), this._zoom0 = o.zoom0, this._focalOffset0.fromArray(o.focalOffset0), this.moveTo(o.target[0], o.target[1], o.target[2], r), oe.setFromVector3(n.sub(this._targetEnd).applyQuaternion(this._yAxisUpSpace)), this.rotateTo(oe.theta, oe.phi, r), this.zoomTo(o.zoom, r), this.setFocalOffset(o.focalOffset[0], o.focalOffset[1], o.focalOffset[2], r), this._needsUpdate = !0;\n    }\n    dispose() {\n        this._removeAllEventListeners();\n    }\n    _findPointerById(e) {\n        let r = null;\n        return this._activePointers.some((o)=>o.pointerId === e ? (r = o, !0) : !1), r;\n    }\n    _encloseToBoundary(e, r, o) {\n        let n = r.lengthSq();\n        if (n === 0) return e;\n        let i = I.copy(r).add(e), a = this._boundary.clampPoint(i, He).sub(i), l = a.lengthSq();\n        if (l === 0) return e.add(r);\n        if (l === n) return e;\n        if (o === 0) return e.add(r).add(a);\n        {\n            let c = 1 + o * l / r.dot(a);\n            return e.add(I.copy(r).multiplyScalar(c)).add(a.multiplyScalar(1 - o));\n        }\n    }\n    _updateNearPlaneCorners() {\n        if (ze(this._camera)) {\n            let e = this._camera, r = e.near, o = e.getEffectiveFOV() * z.MathUtils.DEG2RAD, n = Math.tan(o * .5) * r, i = n * e.aspect;\n            this._nearPlaneCorners[0].set(-i, -n, 0), this._nearPlaneCorners[1].set(i, -n, 0), this._nearPlaneCorners[2].set(i, n, 0), this._nearPlaneCorners[3].set(-i, n, 0);\n        } else if (be(this._camera)) {\n            let e = this._camera, r = 1 / e.zoom, o = e.left * r, n = e.right * r, i = e.top * r, s = e.bottom * r;\n            this._nearPlaneCorners[0].set(o, i, 0), this._nearPlaneCorners[1].set(n, i, 0), this._nearPlaneCorners[2].set(n, s, 0), this._nearPlaneCorners[3].set(o, s, 0);\n        }\n    }\n    _collisionTest() {\n        let e = 1 / 0;\n        if (!(this.colliderMeshes.length >= 1) || Vr(this._camera, \"_collisionTest\")) return e;\n        let o = F.setFromSpherical(this._spherical).divideScalar(this._spherical.radius);\n        qr.lookAt(Xn, o, this._camera.up);\n        for(let n = 0; n < 4; n++){\n            let i = I.copy(this._nearPlaneCorners[n]);\n            i.applyMatrix4(qr);\n            let s = He.addVectors(this._target, i);\n            kt.set(s, o), kt.far = this._spherical.radius + 1;\n            let a = kt.intersectObjects(this.colliderMeshes);\n            a.length !== 0 && a[0].distance < e && (e = a[0].distance);\n        }\n        return e;\n    }\n    _getClientRect(e) {\n        let r = this._domElement.getBoundingClientRect();\n        return e.x = r.left, e.y = r.top, this._viewport ? (e.x += this._viewport.x, e.y += r.height - this._viewport.w - this._viewport.y, e.width = this._viewport.z, e.height = this._viewport.w) : (e.width = r.width, e.height = r.height), e;\n    }\n    _createOnRestPromise(e) {\n        return e ? Promise.resolve() : (this._hasRested = !1, this.dispatchEvent({\n            type: \"transitionstart\"\n        }), new Promise((r)=>{\n            let o = ()=>{\n                this.removeEventListener(\"rest\", o), r();\n            };\n            this.addEventListener(\"rest\", o);\n        }));\n    }\n    _removeAllEventListeners() {}\n};\nfunction Pc(t, e) {\n    let r = e, o = r.center;\n    Ve.makeEmpty(), t.traverseVisible((i)=>{\n        i.isMesh && Ve.expandByObject(i);\n    }), Ve.getCenter(o);\n    let n = 0;\n    return t.traverseVisible((i)=>{\n        if (!i.isMesh) return;\n        let s = i, a = s.geometry.clone();\n        if (a.applyMatrix4(s.matrixWorld), a.isBufferGeometry) {\n            let c = a.attributes.position;\n            for(let d = 0, u = c.count; d < u; d++)F.fromBufferAttribute(c, d), n = Math.max(n, o.distanceToSquared(F));\n        } else {\n            let l = a.attributes.position, c = new z.Vector3;\n            for(let d = 0, u = l.count; d < u; d++)c.fromBufferAttribute(l, d), n = Math.max(n, o.distanceToSquared(c));\n        }\n    }), r.radius = Math.sqrt(n), r;\n}\n\n\nvar ei = 1, ti = 14, Xr = {\n    zoom: 1,\n    distance: 14\n}, Zr = {\n    zoom: 5,\n    distance: 14\n};\nvar ri = {\n    meshDelay: 0,\n    meshDur: 0,\n    rotDelay: 1.7,\n    rotDur: 1,\n    posDelay: 1.3,\n    posDur: 2.2,\n    logoTransition: 3.1,\n    text: 2.5,\n    to: 1\n}, Gt = \"https://ruucm.github.io/shadergradient/shadergradient@1.0.0/hdr/\";\nfunction Yt(t) {\n    return t / 180 * Math.PI;\n}\nfunction Qr(t) {\n    return t.map((e)=>Yt(e));\n}\nfunction $r(t) {\n    return t.replace(\"http://localhost:3001/customize\", \"\").replace(\"https://shadergradient.co/customize\", \"\").replace(\"https://www.shadergradient.co/customize\", \"\");\n}\n\nfunction ni({ type: t, cAzimuthAngle: e, cPolarAngle: r, cDistance: o, cameraZoom: n, zoomOut: i }) {\n    let s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), a = s.current;\n    return (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.C)((l, c)=>s.current.update(c)), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        a == null || a.rotateTo(Yt(e), Yt(r), !0);\n    }, [\n        a,\n        e,\n        r\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i ? t === \"sphere\" ? (a == null || a.dollyTo(Zr.distance, !0), a == null || a.zoomTo(Zr.zoom, !0)) : (a == null || a.dollyTo(Xr.distance, !0), a == null || a.zoomTo(Xr.zoom, !0)) : t === \"sphere\" ? (a == null || a.zoomTo(n, !0), a == null || a.dollyTo(ti, !0)) : (a == null || a.dollyTo(o, !0), a == null || a.zoomTo(ei, !0));\n    }, [\n        a,\n        i,\n        t,\n        n,\n        o\n    ]), s;\n}\n\n\nfunction si(r) {\n    var o = r, { dampingFactor: t = .05 } = o, e = Z(o, [\n        \"dampingFactor\"\n    ]);\n    at.install({\n        THREE: three__WEBPACK_IMPORTED_MODULE_3__\n    }), (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.e)({\n        CameraControls: at\n    });\n    let n = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)((a)=>a.camera), i = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)((a)=>a.gl), s = ni(e);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"cameraControls\", {\n        ref: s,\n        args: [\n            n,\n            i.domElement\n        ],\n        enableDamping: !0,\n        dampingFactor: t,\n        zoomSpeed: 10,\n        dollySpeed: 10,\n        restThreshold: 0\n    });\n}\n\n\n\n\nvar ct = class extends three__WEBPACK_IMPORTED_MODULE_3__.DataTextureLoader {\n    constructor(e){\n        super(e), this.type = three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType;\n    }\n    parse(e) {\n        let a = function(_, y) {\n            switch(_){\n                case 1:\n                    console.error(\"THREE.RGBELoader Read Error: \" + (y || \"\"));\n                    break;\n                case 2:\n                    console.error(\"THREE.RGBELoader Write Error: \" + (y || \"\"));\n                    break;\n                case 3:\n                    console.error(\"THREE.RGBELoader Bad File Format: \" + (y || \"\"));\n                    break;\n                default:\n                case 4:\n                    console.error(\"THREE.RGBELoader: Error: \" + (y || \"\"));\n            }\n            return -1;\n        }, u = `\n`, v = function(_, y, f) {\n            y = y || 1024;\n            let C = _.pos, R = -1, S = 0, A = \"\", w = String.fromCharCode.apply(null, new Uint16Array(_.subarray(C, C + 128)));\n            for(; 0 > (R = w.indexOf(u)) && S < y && C < _.byteLength;)A += w, S += w.length, C += 128, w += String.fromCharCode.apply(null, new Uint16Array(_.subarray(C, C + 128)));\n            return -1 < R ? (f !== !1 && (_.pos += S + R + 1), A + w.slice(0, R)) : !1;\n        }, h = function(_) {\n            let y = /^#\\?(\\S+)/, f = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, T = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/, C = /^\\s*FORMAT=(\\S+)\\s*$/, R = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/, S = {\n                valid: 0,\n                string: \"\",\n                comments: \"\",\n                programtype: \"RGBE\",\n                format: \"\",\n                gamma: 1,\n                exposure: 1,\n                width: 0,\n                height: 0\n            }, A, w;\n            if (_.pos >= _.byteLength || !(A = v(_))) return a(1, \"no header found\");\n            if (!(w = A.match(y))) return a(3, \"bad initial token\");\n            for(S.valid |= 1, S.programtype = w[1], S.string += A + `\n`; A = v(_), A !== !1;){\n                if (S.string += A + `\n`, A.charAt(0) === \"#\") {\n                    S.comments += A + `\n`;\n                    continue;\n                }\n                if ((w = A.match(f)) && (S.gamma = parseFloat(w[1])), (w = A.match(T)) && (S.exposure = parseFloat(w[1])), (w = A.match(C)) && (S.valid |= 2, S.format = w[1]), (w = A.match(R)) && (S.valid |= 4, S.height = parseInt(w[1], 10), S.width = parseInt(w[2], 10)), S.valid & 2 && S.valid & 4) break;\n            }\n            return S.valid & 2 ? S.valid & 4 ? S : a(3, \"missing image size specifier\") : a(3, \"missing format specifier\");\n        }, p = function(_, y, f) {\n            let T = y;\n            if (T < 8 || T > 32767 || _[0] !== 2 || _[1] !== 2 || _[2] & 128) return new Uint8Array(_);\n            if (T !== (_[2] << 8 | _[3])) return a(3, \"wrong scanline width\");\n            let C = new Uint8Array(4 * y * f);\n            if (!C.length) return a(4, \"unable to allocate buffer space\");\n            let R = 0, S = 0, A = 4 * T, w = new Uint8Array(4), O = new Uint8Array(A), Y = f;\n            for(; Y > 0 && S < _.byteLength;){\n                if (S + 4 > _.byteLength) return a(1);\n                if (w[0] = _[S++], w[1] = _[S++], w[2] = _[S++], w[3] = _[S++], w[0] != 2 || w[1] != 2 || (w[2] << 8 | w[3]) != T) return a(3, \"bad rgbe scanline format\");\n                let X = 0, j;\n                for(; X < A && S < _.byteLength;){\n                    j = _[S++];\n                    let de = j > 128;\n                    if (de && (j -= 128), j === 0 || X + j > A) return a(3, \"bad scanline data\");\n                    if (de) {\n                        let ue = _[S++];\n                        for(let Xo = 0; Xo < j; Xo++)O[X++] = ue;\n                    } else O.set(_.subarray(S, S + j), X), X += j, S += j;\n                }\n                let ta = T;\n                for(let de = 0; de < ta; de++){\n                    let ue = 0;\n                    C[R] = O[de + ue], ue += T, C[R + 1] = O[de + ue], ue += T, C[R + 2] = O[de + ue], ue += T, C[R + 3] = O[de + ue], R += 4;\n                }\n                Y--;\n            }\n            return C;\n        }, g = function(_, y, f, T) {\n            let C = _[y + 3], R = Math.pow(2, C - 128) / 255;\n            f[T + 0] = _[y + 0] * R, f[T + 1] = _[y + 1] * R, f[T + 2] = _[y + 2] * R, f[T + 3] = 1;\n        }, E = function(_, y, f, T) {\n            let C = _[y + 3], R = Math.pow(2, C - 128) / 255;\n            f[T + 0] = three__WEBPACK_IMPORTED_MODULE_3__.DataUtils.toHalfFloat(Math.min(_[y + 0] * R, 65504)), f[T + 1] = three__WEBPACK_IMPORTED_MODULE_3__.DataUtils.toHalfFloat(Math.min(_[y + 1] * R, 65504)), f[T + 2] = three__WEBPACK_IMPORTED_MODULE_3__.DataUtils.toHalfFloat(Math.min(_[y + 2] * R, 65504)), f[T + 3] = three__WEBPACK_IMPORTED_MODULE_3__.DataUtils.toHalfFloat(1);\n        }, x = new Uint8Array(e);\n        x.pos = 0;\n        let m = h(x);\n        if (m !== -1) {\n            let _ = m.width, y = m.height, f = p(x.subarray(x.pos), _, y);\n            if (f !== -1) {\n                let T, C, R;\n                switch(this.type){\n                    case three__WEBPACK_IMPORTED_MODULE_3__.FloatType:\n                        R = f.length / 4;\n                        let S = new Float32Array(R * 4);\n                        for(let w = 0; w < R; w++)g(f, w * 4, S, w * 4);\n                        T = S, C = three__WEBPACK_IMPORTED_MODULE_3__.FloatType;\n                        break;\n                    case three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType:\n                        R = f.length / 4;\n                        let A = new Uint16Array(R * 4);\n                        for(let w = 0; w < R; w++)E(f, w * 4, A, w * 4);\n                        T = A, C = three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType;\n                        break;\n                    default:\n                        console.error(\"THREE.RGBELoader: unsupported type: \", this.type);\n                        break;\n                }\n                return {\n                    width: _,\n                    height: y,\n                    data: T,\n                    header: m.string,\n                    gamma: m.gamma,\n                    exposure: m.exposure,\n                    type: C\n                };\n            }\n        }\n        return null;\n    }\n    setDataType(e) {\n        return this.type = e, this;\n    }\n    load(e, r, o, n) {\n        function i(s, a) {\n            switch(s.type){\n                case three__WEBPACK_IMPORTED_MODULE_3__.FloatType:\n                case three__WEBPACK_IMPORTED_MODULE_3__.HalfFloatType:\n                    s.encoding = three__WEBPACK_IMPORTED_MODULE_3__.LinearEncoding, s.minFilter = three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter, s.magFilter = three__WEBPACK_IMPORTED_MODULE_3__.LinearFilter, s.generateMipmaps = !1, s.flipY = !0;\n                    break;\n            }\n            r && r(s, a);\n        }\n        return super.load(e, i, o, n);\n    }\n};\n\nfunction Xt(t, { path: e }) {\n    return (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.F)(ct, t, (o)=>o.setPath(e));\n}\nvar Ic = (t)=>t.current && t.current.isScene, Nc = (t)=>Ic(t) ? t.current : t;\nfunction ci({ background: t = !1, envPreset: e }) {\n    let r = Xt(\"city.hdr\", {\n        path: Gt\n    }), o = Xt(\"dawn.hdr\", {\n        path: Gt\n    }), n = Xt(\"lobby.hdr\", {\n        path: Gt\n    }), s = {\n        city: r,\n        dawn: o,\n        lobby: n\n    }[e], a = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)((c)=>c.scene);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (s) {\n            let c = Nc(a), d = c.background, u = c.environment;\n            return t !== \"only\" && (c.environment = s), t && (c.background = s), ()=>{\n                t !== \"only\" && (c.environment = u), t && (c.background = \"black\");\n            };\n        }\n    }, [\n        a,\n        s,\n        t\n    ]);\n    let l = s;\n    return l.mapping = three__WEBPACK_IMPORTED_MODULE_3__.EquirectangularReflectionMapping, null;\n}\n\n\n\nvar Wr = 0;\nfunction fi() {\n    let [t, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    return three__WEBPACK_IMPORTED_MODULE_3__.DefaultLoadingManager.onLoad = ()=>{\n        e((r)=>W(D({}, r), {\n                active: !1\n            }));\n    }, three__WEBPACK_IMPORTED_MODULE_3__.DefaultLoadingManager.onProgress = (r, o, n)=>{\n        o === n && (Wr = n);\n        let i = (o - Wr) / (n - Wr) * 100 || 100;\n        e((s)=>W(D({}, s), {\n                active: !0,\n                item: r,\n                loaded: o,\n                total: n,\n                progress: i\n            }));\n    }, t;\n}\n\nfunction di({ lightType: t, brightness: e, envPreset: r }) {\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            t === \"3d\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ambientLight\", {\n                intensity: e || 1\n            }),\n            t === \"env\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Suspense, {\n                fallback: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Vc, {}),\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(ci, {\n                    envPreset: r,\n                    background: !1,\n                    loadingCallback: ()=>{}\n                })\n            })\n        ]\n    });\n}\nfunction Vc() {\n    let { progress: t } = fi();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let e = document.getElementById(\"LoaderRoot\");\n        e && t && (t === 100 ? (e.innerHTML = \"Ligths are loaded\", setTimeout(()=>{\n            e.innerHTML = \"\";\n        }, 1e3)) : e.innerHTML = \"Loading lights...\");\n    }, [\n        t\n    ]), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"ambientLight\", {\n        intensity: .4\n    });\n}\n\nvar eo = dt(), L = (t)=>ft(t, eo), to = dt();\nL.write = (t)=>ft(t, to);\nvar Zt = dt();\nL.onStart = (t)=>ft(t, Zt);\nvar ro = dt();\nL.onFrame = (t)=>ft(t, ro);\nvar oo = dt();\nL.onFinish = (t)=>ft(t, oo);\nvar ke = [];\nL.setTimeout = (t, e)=>{\n    let r = L.now() + e, o = ()=>{\n        let i = ke.findIndex((s)=>s.cancel == o);\n        ~i && ke.splice(i, 1), Te -= ~i ? 1 : 0;\n    }, n = {\n        time: r,\n        handler: t,\n        cancel: o\n    };\n    return ke.splice(ui(r), 0, n), Te += 1, mi(), n;\n};\nvar ui = (t)=>~(~ke.findIndex((e)=>e.time > t) || ~ke.length);\nL.cancel = (t)=>{\n    Zt.delete(t), ro.delete(t), oo.delete(t), eo.delete(t), to.delete(t);\n};\nL.sync = (t)=>{\n    Jr = !0, L.batchedUpdates(t), Jr = !1;\n};\nL.throttle = (t)=>{\n    let e;\n    function r() {\n        try {\n            t(...e);\n        } finally{\n            e = null;\n        }\n    }\n    function o(...n) {\n        e = n, L.onStart(r);\n    }\n    return o.handler = t, o.cancel = ()=>{\n        Zt.delete(r), e = null;\n    }, o;\n};\nvar no =  false ? 0 : ()=>{};\nL.use = (t)=>no = t;\nL.now = typeof performance < \"u\" ? ()=>performance.now() : Date.now;\nL.batchedUpdates = (t)=>t();\nL.catch = console.error;\nL.frameLoop = \"always\";\nL.advance = ()=>{\n    L.frameLoop !== \"demand\" ? console.warn(\"Cannot call the manual advancement of rafz whilst frameLoop is not set as demand\") : pi();\n};\nvar Ee = -1, Te = 0, Jr = !1;\nfunction ft(t, e) {\n    Jr ? (e.delete(t), t(0)) : (e.add(t), mi());\n}\nfunction mi() {\n    Ee < 0 && (Ee = 0, L.frameLoop !== \"demand\" && no(hi));\n}\nfunction Yc() {\n    Ee = -1;\n}\nfunction hi() {\n    ~Ee && (no(hi), L.batchedUpdates(pi));\n}\nfunction pi() {\n    let t = Ee;\n    Ee = L.now();\n    let e = ui(Ee);\n    if (e && (gi(ke.splice(0, e), (r)=>r.handler()), Te -= e), !Te) {\n        Yc();\n        return;\n    }\n    Zt.flush(), eo.flush(t ? Math.min(64, Ee - t) : 16.667), ro.flush(), to.flush(), oo.flush();\n}\nfunction dt() {\n    let t = new Set, e = t;\n    return {\n        add (r) {\n            Te += e == t && !t.has(r) ? 1 : 0, t.add(r);\n        },\n        delete (r) {\n            return Te -= e == t && t.has(r) ? 1 : 0, t.delete(r);\n        },\n        flush (r) {\n            e.size && (t = new Set, Te -= e.size, gi(e, (o)=>o(r) && t.add(o)), Te += t.size, e = t);\n        }\n    };\n}\nfunction gi(t, e) {\n    t.forEach((r)=>{\n        try {\n            e(r);\n        } catch (o) {\n            L.catch(o);\n        }\n    });\n}\n\nfunction nr() {}\nvar Ci = (t, e, r)=>Object.defineProperty(t, e, {\n        value: r,\n        writable: !0,\n        configurable: !0\n    }), b = {\n    arr: Array.isArray,\n    obj: (t)=>!!t && t.constructor.name === \"Object\",\n    fun: (t)=>typeof t == \"function\",\n    str: (t)=>typeof t == \"string\",\n    num: (t)=>typeof t == \"number\",\n    und: (t)=>t === void 0\n};\nfunction fe(t, e) {\n    if (b.arr(t)) {\n        if (!b.arr(e) || t.length !== e.length) return !1;\n        for(let r = 0; r < t.length; r++)if (t[r] !== e[r]) return !1;\n        return !0;\n    }\n    return t === e;\n}\nvar M = (t, e)=>t.forEach(e);\nfunction ie(t, e, r) {\n    if (b.arr(t)) {\n        for(let o = 0; o < t.length; o++)e.call(r, t[o], `${o}`);\n        return;\n    }\n    for(let o in t)t.hasOwnProperty(o) && e.call(r, t[o], o);\n}\nvar J = (t)=>b.und(t) ? [] : b.arr(t) ? t : [\n        t\n    ];\nfunction qe(t, e) {\n    if (t.size) {\n        let r = Array.from(t);\n        t.clear(), M(r, e);\n    }\n}\nvar je = (t, ...e)=>qe(t, (r)=>r(...e)), uo = ()=> true || 0, mo, Ri, Pe = null, wi = !1, ho = nr, jc = (t)=>{\n    t.to && (Ri = t.to), t.now && (L.now = t.now), t.colors !== void 0 && (Pe = t.colors), t.skipAnimation != null && (wi = t.skipAnimation), t.createStringInterpolator && (mo = t.createStringInterpolator), t.requestAnimationFrame && L.use(t.requestAnimationFrame), t.batchedUpdates && (L.batchedUpdates = t.batchedUpdates), t.willAdvance && (ho = t.willAdvance), t.frameLoop && (L.frameLoop = t.frameLoop);\n}, ee = Object.freeze({\n    __proto__: null,\n    get createStringInterpolator () {\n        return mo;\n    },\n    get to () {\n        return Ri;\n    },\n    get colors () {\n        return Pe;\n    },\n    get skipAnimation () {\n        return wi;\n    },\n    get willAdvance () {\n        return ho;\n    },\n    assign: jc\n}), ut = new Set, te = [], io = [], Jt = 0, Xe = {\n    get idle () {\n        return !ut.size && !te.length;\n    },\n    start (t) {\n        Jt > t.priority ? (ut.add(t), L.onStart(Xc)) : (zi(t), L(co));\n    },\n    advance: co,\n    sort (t) {\n        if (Jt) L.onFrame(()=>Xe.sort(t));\n        else {\n            let e = te.indexOf(t);\n            ~e && (te.splice(e, 1), Ai(t));\n        }\n    },\n    clear () {\n        te = [], ut.clear();\n    }\n};\nfunction Xc() {\n    ut.forEach(zi), ut.clear(), L(co);\n}\nfunction zi(t) {\n    te.includes(t) || Ai(t);\n}\nfunction Ai(t) {\n    te.splice(Zc(te, (e)=>e.priority > t.priority), 0, t);\n}\nfunction co(t) {\n    let e = io;\n    for(let r = 0; r < te.length; r++){\n        let o = te[r];\n        Jt = o.priority, o.idle || (ho(o), o.advance(t), o.idle || e.push(o));\n    }\n    return Jt = 0, io = te, io.length = 0, te = e, te.length > 0;\n}\nfunction Zc(t, e) {\n    let r = t.findIndex(e);\n    return r < 0 ? t.length : r;\n}\nvar Qc = (t, e, r)=>Math.min(Math.max(r, t), e), Li = {\n    transparent: 0,\n    aliceblue: 4042850303,\n    antiquewhite: 4209760255,\n    aqua: 16777215,\n    aquamarine: 2147472639,\n    azure: 4043309055,\n    beige: 4126530815,\n    bisque: 4293182719,\n    black: 255,\n    blanchedalmond: 4293643775,\n    blue: 65535,\n    blueviolet: 2318131967,\n    brown: 2771004159,\n    burlywood: 3736635391,\n    burntsienna: 3934150143,\n    cadetblue: 1604231423,\n    chartreuse: 2147418367,\n    chocolate: 3530104575,\n    coral: 4286533887,\n    cornflowerblue: 1687547391,\n    cornsilk: 4294499583,\n    crimson: 3692313855,\n    cyan: 16777215,\n    darkblue: 35839,\n    darkcyan: 9145343,\n    darkgoldenrod: 3095792639,\n    darkgray: 2846468607,\n    darkgreen: 6553855,\n    darkgrey: 2846468607,\n    darkkhaki: 3182914559,\n    darkmagenta: 2332068863,\n    darkolivegreen: 1433087999,\n    darkorange: 4287365375,\n    darkorchid: 2570243327,\n    darkred: 2332033279,\n    darksalmon: 3918953215,\n    darkseagreen: 2411499519,\n    darkslateblue: 1211993087,\n    darkslategray: 793726975,\n    darkslategrey: 793726975,\n    darkturquoise: 13554175,\n    darkviolet: 2483082239,\n    deeppink: 4279538687,\n    deepskyblue: 12582911,\n    dimgray: 1768516095,\n    dimgrey: 1768516095,\n    dodgerblue: 512819199,\n    firebrick: 2988581631,\n    floralwhite: 4294635775,\n    forestgreen: 579543807,\n    fuchsia: 4278255615,\n    gainsboro: 3705462015,\n    ghostwhite: 4177068031,\n    gold: 4292280575,\n    goldenrod: 3668254975,\n    gray: 2155905279,\n    green: 8388863,\n    greenyellow: 2919182335,\n    grey: 2155905279,\n    honeydew: 4043305215,\n    hotpink: 4285117695,\n    indianred: 3445382399,\n    indigo: 1258324735,\n    ivory: 4294963455,\n    khaki: 4041641215,\n    lavender: 3873897215,\n    lavenderblush: 4293981695,\n    lawngreen: 2096890111,\n    lemonchiffon: 4294626815,\n    lightblue: 2916673279,\n    lightcoral: 4034953471,\n    lightcyan: 3774873599,\n    lightgoldenrodyellow: 4210742015,\n    lightgray: 3553874943,\n    lightgreen: 2431553791,\n    lightgrey: 3553874943,\n    lightpink: 4290167295,\n    lightsalmon: 4288707327,\n    lightseagreen: 548580095,\n    lightskyblue: 2278488831,\n    lightslategray: 2005441023,\n    lightslategrey: 2005441023,\n    lightsteelblue: 2965692159,\n    lightyellow: 4294959359,\n    lime: 16711935,\n    limegreen: 852308735,\n    linen: 4210091775,\n    magenta: 4278255615,\n    maroon: 2147483903,\n    mediumaquamarine: 1724754687,\n    mediumblue: 52735,\n    mediumorchid: 3126187007,\n    mediumpurple: 2473647103,\n    mediumseagreen: 1018393087,\n    mediumslateblue: 2070474495,\n    mediumspringgreen: 16423679,\n    mediumturquoise: 1221709055,\n    mediumvioletred: 3340076543,\n    midnightblue: 421097727,\n    mintcream: 4127193855,\n    mistyrose: 4293190143,\n    moccasin: 4293178879,\n    navajowhite: 4292783615,\n    navy: 33023,\n    oldlace: 4260751103,\n    olive: 2155872511,\n    olivedrab: 1804477439,\n    orange: 4289003775,\n    orangered: 4282712319,\n    orchid: 3664828159,\n    palegoldenrod: 4008225535,\n    palegreen: 2566625535,\n    paleturquoise: 2951671551,\n    palevioletred: 3681588223,\n    papayawhip: 4293907967,\n    peachpuff: 4292524543,\n    peru: 3448061951,\n    pink: 4290825215,\n    plum: 3718307327,\n    powderblue: 2967529215,\n    purple: 2147516671,\n    rebeccapurple: 1714657791,\n    red: 4278190335,\n    rosybrown: 3163525119,\n    royalblue: 1097458175,\n    saddlebrown: 2336560127,\n    salmon: 4202722047,\n    sandybrown: 4104413439,\n    seagreen: 780883967,\n    seashell: 4294307583,\n    sienna: 2689740287,\n    silver: 3233857791,\n    skyblue: 2278484991,\n    slateblue: 1784335871,\n    slategray: 1887473919,\n    slategrey: 1887473919,\n    snow: 4294638335,\n    springgreen: 16744447,\n    steelblue: 1182971135,\n    tan: 3535047935,\n    teal: 8421631,\n    thistle: 3636451583,\n    tomato: 4284696575,\n    turquoise: 1088475391,\n    violet: 4001558271,\n    wheat: 4125012991,\n    white: 4294967295,\n    whitesmoke: 4126537215,\n    yellow: 4294902015,\n    yellowgreen: 2597139199\n}, ne = \"[-+]?\\\\d*\\\\.?\\\\d+\", er = ne + \"%\";\nfunction ir(...t) {\n    return \"\\\\(\\\\s*(\" + t.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nvar $c = new RegExp(\"rgb\" + ir(ne, ne, ne)), Kc = new RegExp(\"rgba\" + ir(ne, ne, ne, ne)), Wc = new RegExp(\"hsl\" + ir(ne, er, er)), Jc = new RegExp(\"hsla\" + ir(ne, er, er, ne)), el = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, tl = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, rl = /^#([0-9a-fA-F]{6})$/, ol = /^#([0-9a-fA-F]{8})$/;\nfunction nl(t) {\n    let e;\n    return typeof t == \"number\" ? t >>> 0 === t && t >= 0 && t <= 4294967295 ? t : null : (e = rl.exec(t)) ? parseInt(e[1] + \"ff\", 16) >>> 0 : Pe && Pe[t] !== void 0 ? Pe[t] : (e = $c.exec(t)) ? (Ge(e[1]) << 24 | Ge(e[2]) << 16 | Ge(e[3]) << 8 | 255) >>> 0 : (e = Kc.exec(t)) ? (Ge(e[1]) << 24 | Ge(e[2]) << 16 | Ge(e[3]) << 8 | xi(e[4])) >>> 0 : (e = el.exec(t)) ? parseInt(e[1] + e[1] + e[2] + e[2] + e[3] + e[3] + \"ff\", 16) >>> 0 : (e = ol.exec(t)) ? parseInt(e[1], 16) >>> 0 : (e = tl.exec(t)) ? parseInt(e[1] + e[1] + e[2] + e[2] + e[3] + e[3] + e[4] + e[4], 16) >>> 0 : (e = Wc.exec(t)) ? (_i(vi(e[1]), Qt(e[2]), Qt(e[3])) | 255) >>> 0 : (e = Jc.exec(t)) ? (_i(vi(e[1]), Qt(e[2]), Qt(e[3])) | xi(e[4])) >>> 0 : null;\n}\nfunction so(t, e, r) {\n    return r < 0 && (r += 1), r > 1 && (r -= 1), r < 1 / 6 ? t + (e - t) * 6 * r : r < 1 / 2 ? e : r < 2 / 3 ? t + (e - t) * (2 / 3 - r) * 6 : t;\n}\nfunction _i(t, e, r) {\n    let o = r < .5 ? r * (1 + e) : r + e - r * e, n = 2 * r - o, i = so(n, o, t + 1 / 3), s = so(n, o, t), a = so(n, o, t - 1 / 3);\n    return Math.round(i * 255) << 24 | Math.round(s * 255) << 16 | Math.round(a * 255) << 8;\n}\nfunction Ge(t) {\n    let e = parseInt(t, 10);\n    return e < 0 ? 0 : e > 255 ? 255 : e;\n}\nfunction vi(t) {\n    return (parseFloat(t) % 360 + 360) % 360 / 360;\n}\nfunction xi(t) {\n    let e = parseFloat(t);\n    return e < 0 ? 0 : e > 1 ? 255 : Math.round(e * 255);\n}\nfunction Qt(t) {\n    let e = parseFloat(t);\n    return e < 0 ? 0 : e > 100 ? 1 : e / 100;\n}\nfunction yi(t) {\n    let e = nl(t);\n    if (e === null) return t;\n    e = e || 0;\n    let r = (e & 4278190080) >>> 24, o = (e & 16711680) >>> 16, n = (e & 65280) >>> 8, i = (e & 255) / 255;\n    return `rgba(${r}, ${o}, ${n}, ${i})`;\n}\nvar Se = (t, e, r)=>{\n    if (b.fun(t)) return t;\n    if (b.arr(t)) return Se({\n        range: t,\n        output: e,\n        extrapolate: r\n    });\n    if (b.str(t.output[0])) return mo(t);\n    let o = t, n = o.output, i = o.range || [\n        0,\n        1\n    ], s = o.extrapolateLeft || o.extrapolate || \"extend\", a = o.extrapolateRight || o.extrapolate || \"extend\", l = o.easing || ((c)=>c);\n    return (c)=>{\n        let d = sl(c, i);\n        return il(c, i[d], i[d + 1], n[d], n[d + 1], l, s, a, o.map);\n    };\n};\nfunction il(t, e, r, o, n, i, s, a, l) {\n    let c = l ? l(t) : t;\n    if (c < e) {\n        if (s === \"identity\") return c;\n        s === \"clamp\" && (c = e);\n    }\n    if (c > r) {\n        if (a === \"identity\") return c;\n        a === \"clamp\" && (c = r);\n    }\n    return o === n ? o : e === r ? t <= e ? o : n : (e === -1 / 0 ? c = -c : r === 1 / 0 ? c = c - e : c = (c - e) / (r - e), c = i(c), o === -1 / 0 ? c = -c : n === 1 / 0 ? c = c + o : c = c * (n - o) + o, c);\n}\nfunction sl(t, e) {\n    for(var r = 1; r < e.length - 1 && !(e[r] >= t); ++r);\n    return r - 1;\n}\nvar al = (t, e = \"end\")=>(r)=>{\n        r = e === \"end\" ? Math.min(r, .999) : Math.max(r, .001);\n        let o = r * t, n = e === \"end\" ? Math.floor(o) : Math.ceil(o);\n        return Qc(0, 1, n / t);\n    }, tr = 1.70158, $t = tr * 1.525, bi = tr + 1, Ei = 2 * Math.PI / 3, Ti = 2 * Math.PI / 4.5, Kt = (t)=>t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375, po = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>1 - (1 - t) * (1 - t),\n    easeInOutQuad: (t)=>t < .5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2,\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>1 - Math.pow(1 - t, 3),\n    easeInOutCubic: (t)=>t < .5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2,\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>1 - Math.pow(1 - t, 4),\n    easeInOutQuart: (t)=>t < .5 ? 8 * t * t * t * t : 1 - Math.pow(-2 * t + 2, 4) / 2,\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>1 - Math.pow(1 - t, 5),\n    easeInOutQuint: (t)=>t < .5 ? 16 * t * t * t * t * t : 1 - Math.pow(-2 * t + 2, 5) / 2,\n    easeInSine: (t)=>1 - Math.cos(t * Math.PI / 2),\n    easeOutSine: (t)=>Math.sin(t * Math.PI / 2),\n    easeInOutSine: (t)=>-(Math.cos(Math.PI * t) - 1) / 2,\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * t - 10),\n    easeOutExpo: (t)=>t === 1 ? 1 : 1 - Math.pow(2, -10 * t),\n    easeInOutExpo: (t)=>t === 0 ? 0 : t === 1 ? 1 : t < .5 ? Math.pow(2, 20 * t - 10) / 2 : (2 - Math.pow(2, -20 * t + 10)) / 2,\n    easeInCirc: (t)=>1 - Math.sqrt(1 - Math.pow(t, 2)),\n    easeOutCirc: (t)=>Math.sqrt(1 - Math.pow(t - 1, 2)),\n    easeInOutCirc: (t)=>t < .5 ? (1 - Math.sqrt(1 - Math.pow(2 * t, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * t + 2, 2)) + 1) / 2,\n    easeInBack: (t)=>bi * t * t * t - tr * t * t,\n    easeOutBack: (t)=>1 + bi * Math.pow(t - 1, 3) + tr * Math.pow(t - 1, 2),\n    easeInOutBack: (t)=>t < .5 ? Math.pow(2 * t, 2) * (($t + 1) * 2 * t - $t) / 2 : (Math.pow(2 * t - 2, 2) * (($t + 1) * (t * 2 - 2) + $t) + 2) / 2,\n    easeInElastic: (t)=>t === 0 ? 0 : t === 1 ? 1 : -Math.pow(2, 10 * t - 10) * Math.sin((t * 10 - 10.75) * Ei),\n    easeOutElastic: (t)=>t === 0 ? 0 : t === 1 ? 1 : Math.pow(2, -10 * t) * Math.sin((t * 10 - .75) * Ei) + 1,\n    easeInOutElastic: (t)=>t === 0 ? 0 : t === 1 ? 1 : t < .5 ? -(Math.pow(2, 20 * t - 10) * Math.sin((20 * t - 11.125) * Ti)) / 2 : Math.pow(2, -20 * t + 10) * Math.sin((20 * t - 11.125) * Ti) / 2 + 1,\n    easeInBounce: (t)=>1 - Kt(1 - t),\n    easeOutBounce: Kt,\n    easeInOutBounce: (t)=>t < .5 ? (1 - Kt(1 - 2 * t)) / 2 : (1 + Kt(2 * t - 1)) / 2,\n    steps: al\n};\nfunction lo() {\n    return lo = Object.assign ? Object.assign.bind() : function(t) {\n        for(var e = 1; e < arguments.length; e++){\n            var r = arguments[e];\n            for(var o in r)Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o]);\n        }\n        return t;\n    }, lo.apply(this, arguments);\n}\nvar Ye = Symbol.for(\"FluidValue.get\"), Le = Symbol.for(\"FluidValue.observers\"), re = (t)=>Boolean(t && t[Ye]), $ = (t)=>t && t[Ye] ? t[Ye]() : t, go = (t)=>t[Le] || null;\nfunction cl(t, e) {\n    t.eventObserved ? t.eventObserved(e) : t(e);\n}\nfunction mt(t, e) {\n    let r = t[Le];\n    r && r.forEach((o)=>{\n        cl(o, e);\n    });\n}\nvar rr = class {\n    constructor(e){\n        if (this[Ye] = void 0, this[Le] = void 0, !e && !(e = this.get)) throw Error(\"Unknown getter\");\n        ll(this, e);\n    }\n}, ll = (t, e)=>Oi(t, Ye, e);\nfunction Oe(t, e) {\n    if (t[Ye]) {\n        let r = t[Le];\n        r || Oi(t, Le, r = new Set), r.has(e) || (r.add(e), t.observerAdded && t.observerAdded(r.size, e));\n    }\n    return e;\n}\nfunction Ze(t, e) {\n    let r = t[Le];\n    if (r && r.has(e)) {\n        let o = r.size - 1;\n        o ? r.delete(e) : t[Le] = null, t.observerRemoved && t.observerRemoved(o, e);\n    }\n}\nvar Oi = (t, e, r)=>Object.defineProperty(t, e, {\n        value: r,\n        writable: !0,\n        configurable: !0\n    }), Wt = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, fl = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi, Pi = new RegExp(`(${Wt.source})(%|[a-z]+)`, \"i\"), dl = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi, sr = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/, Fi = (t)=>{\n    let [e, r] = ul(t);\n    if (!e || uo()) return t;\n    let o = window.getComputedStyle(document.documentElement).getPropertyValue(e);\n    if (o) return o.trim();\n    if (r && r.startsWith(\"--\")) {\n        let n = window.getComputedStyle(document.documentElement).getPropertyValue(r);\n        return n || t;\n    } else {\n        if (r && sr.test(r)) return Fi(r);\n        if (r) return r;\n    }\n    return t;\n}, ul = (t)=>{\n    let e = sr.exec(t);\n    if (!e) return [\n        , \n    ];\n    let [, r, o] = e;\n    return [\n        r,\n        o\n    ];\n}, ao, ml = (t, e, r, o, n)=>`rgba(${Math.round(e)}, ${Math.round(r)}, ${Math.round(o)}, ${n})`, ar = (t)=>{\n    ao || (ao = Pe ? new RegExp(`(${Object.keys(Pe).join(\"|\")})(?!\\\\w)`, \"g\") : /^\\b$/);\n    let e = t.output.map((i)=>$(i).replace(sr, Fi).replace(fl, yi).replace(ao, yi)), r = e.map((i)=>i.match(Wt).map(Number)), n = r[0].map((i, s)=>r.map((a)=>{\n            if (!(s in a)) throw Error('The arity of each \"output\" value must be equal');\n            return a[s];\n        })).map((i)=>Se(lo({}, t, {\n            output: i\n        })));\n    return (i)=>{\n        var s;\n        let a = !Pi.test(e[0]) && ((s = e.find((c)=>Pi.test(c))) == null ? void 0 : s.replace(Wt, \"\")), l = 0;\n        return e[0].replace(Wt, ()=>`${n[l++](i)}${a || \"\"}`).replace(dl, ml);\n    };\n}, _o = \"react-spring: \", Di = (t)=>{\n    let e = t, r = !1;\n    if (typeof e != \"function\") throw new TypeError(`${_o}once requires a function parameter`);\n    return (...o)=>{\n        r || (e(...o), r = !0);\n    };\n}, hl = Di(console.warn);\nfunction Mi() {\n    hl(`${_o}The \"interpolate\" function is deprecated in v9 (use \"to\" instead)`);\n}\nvar pl = Di(console.warn);\nfunction Ii() {\n    pl(`${_o}Directly calling start instead of using the api object is deprecated in v9 (use \".start\" instead), this will be removed in later 0.X.0 versions`);\n}\nfunction Qe(t) {\n    return b.str(t) && (t[0] == \"#\" || /\\d/.test(t) || !uo() && sr.test(t) || t in (Pe || {}));\n}\nvar $e = uo() ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect, gl = ()=>{\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1);\n    return $e(()=>(t.current = !0, ()=>{\n            t.current = !1;\n        }), []), t;\n};\nfunction cr() {\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)()[1], e = gl();\n    return ()=>{\n        e.current && t(Math.random());\n    };\n}\nfunction Ni(t, e) {\n    let [r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            inputs: e,\n            result: t()\n        })), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), n = o.current, i = n;\n    return i ? Boolean(e && i.inputs && _l(e, i.inputs)) || (i = {\n        inputs: e,\n        result: t()\n    }) : i = r, (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        o.current = i, n == r && (r.inputs = r.result = void 0);\n    }, [\n        i\n    ]), i.result;\n}\nfunction _l(t, e) {\n    if (t.length !== e.length) return !1;\n    for(let r = 0; r < t.length; r++)if (t[r] !== e[r]) return !1;\n    return !0;\n}\nvar lr = (t)=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(t, vl), vl = [];\nfunction vo(t) {\n    let e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        e.current = t;\n    }), e.current;\n}\n\n\n\n\nvar ht = Symbol.for(\"Animated:node\"), El = (t)=>!!t && t[ht] === t, se = (t)=>t && t[ht], mr = (t, e)=>Ci(t, ht, e), _t = (t)=>t && t[ht] && t[ht].getPayload(), fr = class {\n    constructor(){\n        this.payload = void 0, mr(this, this);\n    }\n    getPayload() {\n        return this.payload || [];\n    }\n}, ge = class extends fr {\n    constructor(e){\n        super(), this.done = !0, this.elapsedTime = void 0, this.lastPosition = void 0, this.lastVelocity = void 0, this.v0 = void 0, this.durationProgress = 0, this._value = e, b.num(this._value) && (this.lastPosition = this._value);\n    }\n    static create(e) {\n        return new ge(e);\n    }\n    getPayload() {\n        return [\n            this\n        ];\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(e, r) {\n        return b.num(e) && (this.lastPosition = e, r && (e = Math.round(e / r) * r, this.done && (this.lastPosition = e))), this._value === e ? !1 : (this._value = e, !0);\n    }\n    reset() {\n        let { done: e } = this;\n        this.done = !1, b.num(this._value) && (this.elapsedTime = 0, this.durationProgress = 0, this.lastPosition = this._value, e && (this.lastVelocity = null), this.v0 = null);\n    }\n}, _e = class extends ge {\n    constructor(e){\n        super(0), this._string = null, this._toString = void 0, this._toString = Se({\n            output: [\n                e,\n                e\n            ]\n        });\n    }\n    static create(e) {\n        return new _e(e);\n    }\n    getValue() {\n        let e = this._string;\n        return e ?? (this._string = this._toString(this._value));\n    }\n    setValue(e) {\n        if (b.str(e)) {\n            if (e == this._string) return !1;\n            this._string = e, this._value = 1;\n        } else if (super.setValue(e)) this._string = null;\n        else return !1;\n        return !0;\n    }\n    reset(e) {\n        e && (this._toString = Se({\n            output: [\n                this.getValue(),\n                e\n            ]\n        })), this._value = 0, super.reset();\n    }\n}, dr = {\n    dependencies: null\n}, pt = class extends fr {\n    constructor(e){\n        super(), this.source = e, this.setValue(e);\n    }\n    getValue(e) {\n        let r = {};\n        return ie(this.source, (o, n)=>{\n            El(o) ? r[n] = o.getValue(e) : re(o) ? r[n] = $(o) : e || (r[n] = o);\n        }), r;\n    }\n    setValue(e) {\n        this.source = e, this.payload = this._makePayload(e);\n    }\n    reset() {\n        this.payload && M(this.payload, (e)=>e.reset());\n    }\n    _makePayload(e) {\n        if (e) {\n            let r = new Set;\n            return ie(e, this._addToPayload, r), Array.from(r);\n        }\n    }\n    _addToPayload(e) {\n        dr.dependencies && re(e) && dr.dependencies.add(e);\n        let r = _t(e);\n        r && M(r, (o)=>this.add(o));\n    }\n}, gt = class extends pt {\n    constructor(e){\n        super(e);\n    }\n    static create(e) {\n        return new gt(e);\n    }\n    getValue() {\n        return this.source.map((e)=>e.getValue());\n    }\n    setValue(e) {\n        let r = this.getPayload();\n        return e.length == r.length ? r.map((o, n)=>o.setValue(e[n])).some(Boolean) : (super.setValue(e.map(Tl)), !0);\n    }\n};\nfunction Tl(t) {\n    return (Qe(t) ? _e : ge).create(t);\n}\nfunction hr(t) {\n    let e = se(t);\n    return e ? e.constructor : b.arr(t) ? gt : Qe(t) ? _e : ge;\n}\nfunction ur() {\n    return ur = Object.assign ? Object.assign.bind() : function(t) {\n        for(var e = 1; e < arguments.length; e++){\n            var r = arguments[e];\n            for(var o in r)Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o]);\n        }\n        return t;\n    }, ur.apply(this, arguments);\n}\nvar Bi = (t, e)=>{\n    let r = !b.fun(t) || t.prototype && t.prototype.isReactComponent;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((o, n)=>{\n        let i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), s = r && (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((p)=>{\n            i.current = Sl(n, p);\n        }, [\n            n\n        ]), [a, l] = Pl(o, e), c = cr(), d = ()=>{\n            let p = i.current;\n            if (r && !p) return;\n            (p ? e.applyAnimatedValues(p, a.getValue(!0)) : !1) === !1 && c();\n        }, u = new xo(d, l), v = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n        $e(()=>(v.current = u, M(l, (p)=>Oe(p, u)), ()=>{\n                v.current && (M(v.current.deps, (p)=>Ze(p, v.current)), L.cancel(v.current.update));\n            })), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(d, []), lr(()=>()=>{\n                let p = v.current;\n                M(p.deps, (g)=>Ze(g, p));\n            });\n        let h = e.getComponentProps(a.getValue());\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(t, ur({}, h, {\n            ref: s\n        }));\n    });\n}, xo = class {\n    constructor(e, r){\n        this.update = e, this.deps = r;\n    }\n    eventObserved(e) {\n        e.type == \"change\" && L.write(this.update);\n    }\n};\nfunction Pl(t, e) {\n    let r = new Set;\n    return dr.dependencies = r, t.style && (t = ur({}, t, {\n        style: e.createAnimatedStyle(t.style)\n    })), t = new pt(t), dr.dependencies = null, [\n        t,\n        r\n    ];\n}\nfunction Sl(t, e) {\n    return t && (b.fun(t) ? t(e) : t.current = e), e;\n}\nvar Hi = Symbol.for(\"AnimatedComponent\"), Gi = (t, { applyAnimatedValues: e = ()=>!1, createAnimatedStyle: r = (n)=>new pt(n), getComponentProps: o = (n)=>n } = {})=>{\n    let n = {\n        applyAnimatedValues: e,\n        createAnimatedStyle: r,\n        getComponentProps: o\n    }, i = (s)=>{\n        let a = Vi(s) || \"Anonymous\";\n        return b.str(s) ? s = i[s] || (i[s] = Bi(s, n)) : s = s[Hi] || (s[Hi] = Bi(s, n)), s.displayName = `Animated(${a})`, s;\n    };\n    return ie(t, (s, a)=>{\n        b.arr(t) && (a = Vi(s)), i[a] = i(s);\n    }), {\n        animated: i\n    };\n}, Vi = (t)=>b.str(t) ? t : t && b.str(t.displayName) ? t.displayName : b.fun(t) && t.name || null;\nfunction G() {\n    return G = Object.assign ? Object.assign.bind() : function(t) {\n        for(var e = 1; e < arguments.length; e++){\n            var r = arguments[e];\n            for(var o in r)Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o]);\n        }\n        return t;\n    }, G.apply(this, arguments);\n}\nfunction Fe(t, ...e) {\n    return b.fun(t) ? t(...e) : t;\n}\nvar bt = (t, e)=>t === !0 || !!(e && t && (b.fun(t) ? t(e) : J(t).includes(e))), ts = (t, e)=>b.obj(t) ? e && t[e] : t, rs = (t, e)=>t.default === !0 ? t[e] : t.default ? t.default[e] : void 0, Cl = (t)=>t, Fo = (t, e = Cl)=>{\n    let r = Rl;\n    t.default && t.default !== !0 && (t = t.default, r = Object.keys(t));\n    let o = {};\n    for (let n of r){\n        let i = e(t[n], n);\n        b.und(i) || (o[n] = i);\n    }\n    return o;\n}, Rl = [\n    \"config\",\n    \"onProps\",\n    \"onStart\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\",\n    \"onRest\"\n], wl = {\n    config: 1,\n    from: 1,\n    to: 1,\n    ref: 1,\n    loop: 1,\n    reset: 1,\n    pause: 1,\n    cancel: 1,\n    reverse: 1,\n    immediate: 1,\n    default: 1,\n    delay: 1,\n    onProps: 1,\n    onStart: 1,\n    onChange: 1,\n    onPause: 1,\n    onResume: 1,\n    onRest: 1,\n    onResolve: 1,\n    items: 1,\n    trail: 1,\n    sort: 1,\n    expires: 1,\n    initial: 1,\n    enter: 1,\n    update: 1,\n    leave: 1,\n    children: 1,\n    onDestroyed: 1,\n    keys: 1,\n    callId: 1,\n    parentId: 1\n};\nfunction zl(t) {\n    let e = {}, r = 0;\n    if (ie(t, (o, n)=>{\n        wl[n] || (e[n] = o, r++);\n    }), r) return e;\n}\nfunction os(t) {\n    let e = zl(t);\n    if (e) {\n        let r = {\n            to: e\n        };\n        return ie(t, (o, n)=>n in e || (r[n] = o)), r;\n    }\n    return G({}, t);\n}\nfunction Et(t) {\n    return t = $(t), b.arr(t) ? t.map(Et) : Qe(t) ? ee.createStringInterpolator({\n        range: [\n            0,\n            1\n        ],\n        output: [\n            t,\n            t\n        ]\n    })(1) : t;\n}\nfunction Al(t) {\n    for(let e in t)return !0;\n    return !1;\n}\nfunction Eo(t) {\n    return b.fun(t) || b.arr(t) && b.obj(t[0]);\n}\nfunction Ll(t, e) {\n    var r;\n    (r = t.ref) == null || r.delete(t), e?.delete(t);\n}\nfunction Ol(t, e) {\n    if (e && t.ref !== e) {\n        var r;\n        (r = t.ref) == null || r.delete(t), e.add(t), t.ref = e;\n    }\n}\nvar Fl = {\n    default: {\n        tension: 170,\n        friction: 26\n    },\n    gentle: {\n        tension: 120,\n        friction: 14\n    },\n    wobbly: {\n        tension: 180,\n        friction: 12\n    },\n    stiff: {\n        tension: 210,\n        friction: 20\n    },\n    slow: {\n        tension: 280,\n        friction: 60\n    },\n    molasses: {\n        tension: 280,\n        friction: 120\n    }\n}, To = G({}, Fl.default, {\n    mass: 1,\n    damping: 1,\n    easing: po.linear,\n    clamp: !1\n}), Po = class {\n    constructor(){\n        this.tension = void 0, this.friction = void 0, this.frequency = void 0, this.damping = void 0, this.mass = void 0, this.velocity = 0, this.restVelocity = void 0, this.precision = void 0, this.progress = void 0, this.duration = void 0, this.easing = void 0, this.clamp = void 0, this.bounce = void 0, this.decay = void 0, this.round = void 0, Object.assign(this, To);\n    }\n};\nfunction Dl(t, e, r) {\n    r && (r = G({}, r), qi(r, e), e = G({}, r, e)), qi(t, e), Object.assign(t, e);\n    for(let s in To)t[s] == null && (t[s] = To[s]);\n    let { mass: o, frequency: n, damping: i } = t;\n    return b.und(n) || (n < .01 && (n = .01), i < 0 && (i = 0), t.tension = Math.pow(2 * Math.PI / n, 2) * o, t.friction = 4 * Math.PI * i * o / n), t;\n}\nfunction qi(t, e) {\n    if (!b.und(e.decay)) t.duration = void 0;\n    else {\n        let r = !b.und(e.tension) || !b.und(e.friction);\n        (r || !b.und(e.frequency) || !b.und(e.damping) || !b.und(e.mass)) && (t.duration = void 0, t.decay = void 0), r && (t.frequency = void 0);\n    }\n}\nvar ji = [], So = class {\n    constructor(){\n        this.changed = !1, this.values = ji, this.toValues = null, this.fromValues = ji, this.to = void 0, this.from = void 0, this.config = new Po, this.immediate = !1;\n    }\n};\nfunction ns(t, { key: e, props: r, defaultProps: o, state: n, actions: i }) {\n    return new Promise((s, a)=>{\n        var l;\n        let c, d, u = bt((l = r.cancel) != null ? l : o?.cancel, e);\n        if (u) p();\n        else {\n            b.und(r.pause) || (n.paused = bt(r.pause, e));\n            let g = o?.pause;\n            g !== !0 && (g = n.paused || bt(g, e)), c = Fe(r.delay || 0, e), g ? (n.resumeQueue.add(h), i.pause()) : (i.resume(), h());\n        }\n        function v() {\n            n.resumeQueue.add(h), n.timeouts.delete(d), d.cancel(), c = d.time - L.now();\n        }\n        function h() {\n            c > 0 && !ee.skipAnimation ? (n.delayed = !0, d = L.setTimeout(p, c), n.pauseQueue.add(v), n.timeouts.add(d)) : p();\n        }\n        function p() {\n            n.delayed && (n.delayed = !1), n.pauseQueue.delete(v), n.timeouts.delete(d), t <= (n.cancelId || 0) && (u = !0);\n            try {\n                i.start(G({}, r, {\n                    callId: t,\n                    cancel: u\n                }), s);\n            } catch (g) {\n                a(g);\n            }\n        }\n    });\n}\nvar Do = (t, e)=>e.length == 1 ? e[0] : e.some((r)=>r.cancelled) ? Ke(t.get()) : e.every((r)=>r.noop) ? is(t.get()) : ae(t.get(), e.every((r)=>r.finished)), is = (t)=>({\n        value: t,\n        noop: !0,\n        finished: !0,\n        cancelled: !1\n    }), ae = (t, e, r = !1)=>({\n        value: t,\n        finished: e,\n        cancelled: r\n    }), Ke = (t)=>({\n        value: t,\n        cancelled: !0,\n        finished: !1\n    });\nfunction ss(t, e, r, o) {\n    let { callId: n, parentId: i, onRest: s } = e, { asyncTo: a, promise: l } = r;\n    return !i && t === a && !e.reset ? l : r.promise = (async ()=>{\n        r.asyncId = n, r.asyncTo = t;\n        let c = Fo(e, (E, x)=>x === \"onRest\" ? void 0 : E), d, u, v = new Promise((E, x)=>(d = E, u = x)), h = (E)=>{\n            let x = n <= (r.cancelId || 0) && Ke(o) || n !== r.asyncId && ae(o, !1);\n            if (x) throw E.result = x, u(E), E;\n        }, p = (E, x)=>{\n            let m = new gr, _ = new _r;\n            return (async ()=>{\n                if (ee.skipAnimation) throw Tt(r), _.result = ae(o, !1), u(_), _;\n                h(m);\n                let y = b.obj(E) ? G({}, E) : G({}, x, {\n                    to: E\n                });\n                y.parentId = n, ie(c, (T, C)=>{\n                    b.und(y[C]) && (y[C] = T);\n                });\n                let f = await o.start(y);\n                return h(m), r.paused && await new Promise((T)=>{\n                    r.resumeQueue.add(T);\n                }), f;\n            })();\n        }, g;\n        if (ee.skipAnimation) return Tt(r), ae(o, !1);\n        try {\n            let E;\n            b.arr(t) ? E = (async (x)=>{\n                for (let m of x)await p(m);\n            })(t) : E = Promise.resolve(t(p, o.stop.bind(o))), await Promise.all([\n                E.then(d),\n                v\n            ]), g = ae(o.get(), !0, !1);\n        } catch (E) {\n            if (E instanceof gr) g = E.result;\n            else if (E instanceof _r) g = E.result;\n            else throw E;\n        } finally{\n            n == r.asyncId && (r.asyncId = i, r.asyncTo = i ? a : void 0, r.promise = i ? l : void 0);\n        }\n        return b.fun(s) && L.batchedUpdates(()=>{\n            s(g, o, o.item);\n        }), g;\n    })();\n}\nfunction Tt(t, e) {\n    qe(t.timeouts, (r)=>r.cancel()), t.pauseQueue.clear(), t.resumeQueue.clear(), t.asyncId = t.asyncTo = t.promise = void 0, e && (t.cancelId = e);\n}\nvar gr = class extends Error {\n    constructor(){\n        super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\"), this.result = void 0;\n    }\n}, _r = class extends Error {\n    constructor(){\n        super(\"SkipAnimationSignal\"), this.result = void 0;\n    }\n}, Co = (t)=>t instanceof Pt, Ml = 1, Pt = class extends rr {\n    constructor(...e){\n        super(...e), this.id = Ml++, this.key = void 0, this._priority = 0;\n    }\n    get priority() {\n        return this._priority;\n    }\n    set priority(e) {\n        this._priority != e && (this._priority = e, this._onPriorityChange(e));\n    }\n    get() {\n        let e = se(this);\n        return e && e.getValue();\n    }\n    to(...e) {\n        return ee.to(this, e);\n    }\n    interpolate(...e) {\n        return Mi(), ee.to(this, e);\n    }\n    toJSON() {\n        return this.get();\n    }\n    observerAdded(e) {\n        e == 1 && this._attach();\n    }\n    observerRemoved(e) {\n        e == 0 && this._detach();\n    }\n    _attach() {}\n    _detach() {}\n    _onChange(e, r = !1) {\n        mt(this, {\n            type: \"change\",\n            parent: this,\n            value: e,\n            idle: r\n        });\n    }\n    _onPriorityChange(e) {\n        this.idle || Xe.sort(this), mt(this, {\n            type: \"priority\",\n            parent: this,\n            priority: e\n        });\n    }\n}, De = Symbol.for(\"SpringPhase\"), as = 1, Ro = 2, wo = 4, yo = (t)=>(t[De] & as) > 0, Ce = (t)=>(t[De] & Ro) > 0, vt = (t)=>(t[De] & wo) > 0, Xi = (t, e)=>e ? t[De] |= Ro | as : t[De] &= ~Ro, Zi = (t, e)=>e ? t[De] |= wo : t[De] &= ~wo, zo = class extends Pt {\n    constructor(e, r){\n        if (super(), this.key = void 0, this.animation = new So, this.queue = void 0, this.defaultProps = {}, this._state = {\n            paused: !1,\n            delayed: !1,\n            pauseQueue: new Set,\n            resumeQueue: new Set,\n            timeouts: new Set\n        }, this._pendingCalls = new Set, this._lastCallId = 0, this._lastToId = 0, this._memoizedDuration = 0, !b.und(e) || !b.und(r)) {\n            let o = b.obj(e) ? G({}, e) : G({}, r, {\n                from: e\n            });\n            b.und(o.default) && (o.default = !0), this.start(o);\n        }\n    }\n    get idle() {\n        return !(Ce(this) || this._state.asyncTo) || vt(this);\n    }\n    get goal() {\n        return $(this.animation.to);\n    }\n    get velocity() {\n        let e = se(this);\n        return e instanceof ge ? e.lastVelocity || 0 : e.getPayload().map((r)=>r.lastVelocity || 0);\n    }\n    get hasAnimated() {\n        return yo(this);\n    }\n    get isAnimating() {\n        return Ce(this);\n    }\n    get isPaused() {\n        return vt(this);\n    }\n    get isDelayed() {\n        return this._state.delayed;\n    }\n    advance(e) {\n        let r = !0, o = !1, n = this.animation, { config: i, toValues: s } = n, a = _t(n.to);\n        !a && re(n.to) && (s = J($(n.to))), n.values.forEach((d, u)=>{\n            if (d.done) return;\n            let v = d.constructor == _e ? 1 : a ? a[u].lastPosition : s[u], h = n.immediate, p = v;\n            if (!h) {\n                if (p = d.lastPosition, i.tension <= 0) {\n                    d.done = !0;\n                    return;\n                }\n                let g = d.elapsedTime += e, E = n.fromValues[u], x = d.v0 != null ? d.v0 : d.v0 = b.arr(i.velocity) ? i.velocity[u] : i.velocity, m, _ = i.precision || (E == v ? .005 : Math.min(1, Math.abs(v - E) * .001));\n                if (b.und(i.duration)) if (i.decay) {\n                    let y = i.decay === !0 ? .998 : i.decay, f = Math.exp(-(1 - y) * g);\n                    p = E + x / (1 - y) * (1 - f), h = Math.abs(d.lastPosition - p) <= _, m = x * f;\n                } else {\n                    m = d.lastVelocity == null ? x : d.lastVelocity;\n                    let y = i.restVelocity || _ / 10, f = i.clamp ? 0 : i.bounce, T = !b.und(f), C = E == v ? d.v0 > 0 : E < v, R, S = !1, A = 1, w = Math.ceil(e / A);\n                    for(let O = 0; O < w && (R = Math.abs(m) > y, !(!R && (h = Math.abs(v - p) <= _, h))); ++O){\n                        T && (S = p == v || p > v == C, S && (m = -m * f, p = v));\n                        let Y = -i.tension * 1e-6 * (p - v), X = -i.friction * .001 * m, j = (Y + X) / i.mass;\n                        m = m + j * A, p = p + m * A;\n                    }\n                }\n                else {\n                    let y = 1;\n                    i.duration > 0 && (this._memoizedDuration !== i.duration && (this._memoizedDuration = i.duration, d.durationProgress > 0 && (d.elapsedTime = i.duration * d.durationProgress, g = d.elapsedTime += e)), y = (i.progress || 0) + g / this._memoizedDuration, y = y > 1 ? 1 : y < 0 ? 0 : y, d.durationProgress = y), p = E + i.easing(y) * (v - E), m = (p - d.lastPosition) / e, h = y == 1;\n                }\n                d.lastVelocity = m, Number.isNaN(p) && (console.warn(\"Got NaN while animating:\", this), h = !0);\n            }\n            a && !a[u].done && (h = !1), h ? d.done = !0 : r = !1, d.setValue(p, i.round) && (o = !0);\n        });\n        let l = se(this), c = l.getValue();\n        if (r) {\n            let d = $(n.to);\n            (c !== d || o) && !i.decay ? (l.setValue(d), this._onChange(d)) : o && i.decay && this._onChange(c), this._stop();\n        } else o && this._onChange(c);\n    }\n    set(e) {\n        return L.batchedUpdates(()=>{\n            this._stop(), this._focus(e), this._set(e);\n        }), this;\n    }\n    pause() {\n        this._update({\n            pause: !0\n        });\n    }\n    resume() {\n        this._update({\n            pause: !1\n        });\n    }\n    finish() {\n        if (Ce(this)) {\n            let { to: e, config: r } = this.animation;\n            L.batchedUpdates(()=>{\n                this._onStart(), r.decay || this._set(e, !1), this._stop();\n            });\n        }\n        return this;\n    }\n    update(e) {\n        return (this.queue || (this.queue = [])).push(e), this;\n    }\n    start(e, r) {\n        let o;\n        return b.und(e) ? (o = this.queue || [], this.queue = []) : o = [\n            b.obj(e) ? e : G({}, r, {\n                to: e\n            })\n        ], Promise.all(o.map((n)=>this._update(n))).then((n)=>Do(this, n));\n    }\n    stop(e) {\n        let { to: r } = this.animation;\n        return this._focus(this.get()), Tt(this._state, e && this._lastCallId), L.batchedUpdates(()=>this._stop(r, e)), this;\n    }\n    reset() {\n        this._update({\n            reset: !0\n        });\n    }\n    eventObserved(e) {\n        e.type == \"change\" ? this._start() : e.type == \"priority\" && (this.priority = e.priority + 1);\n    }\n    _prepareNode(e) {\n        let r = this.key || \"\", { to: o, from: n } = e;\n        o = b.obj(o) ? o[r] : o, (o == null || Eo(o)) && (o = void 0), n = b.obj(n) ? n[r] : n, n == null && (n = void 0);\n        let i = {\n            to: o,\n            from: n\n        };\n        return yo(this) || (e.reverse && ([o, n] = [\n            n,\n            o\n        ]), n = $(n), b.und(n) ? se(this) || this._set(o) : this._set(n)), i;\n    }\n    _update(e, r) {\n        let o = G({}, e), { key: n, defaultProps: i } = this;\n        o.default && Object.assign(i, Fo(o, (l, c)=>/^on/.test(c) ? ts(l, n) : l)), $i(this, o, \"onProps\"), yt(this, \"onProps\", o, this);\n        let s = this._prepareNode(o);\n        if (Object.isFrozen(this)) throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n        let a = this._state;\n        return ns(++this._lastCallId, {\n            key: n,\n            props: o,\n            defaultProps: i,\n            state: a,\n            actions: {\n                pause: ()=>{\n                    vt(this) || (Zi(this, !0), je(a.pauseQueue), yt(this, \"onPause\", ae(this, xt(this, this.animation.to)), this));\n                },\n                resume: ()=>{\n                    vt(this) && (Zi(this, !1), Ce(this) && this._resume(), je(a.resumeQueue), yt(this, \"onResume\", ae(this, xt(this, this.animation.to)), this));\n                },\n                start: this._merge.bind(this, s)\n            }\n        }).then((l)=>{\n            if (o.loop && l.finished && !(r && l.noop)) {\n                let c = cs(o);\n                if (c) return this._update(c, !0);\n            }\n            return l;\n        });\n    }\n    _merge(e, r, o) {\n        if (r.cancel) return this.stop(!0), o(Ke(this));\n        let n = !b.und(e.to), i = !b.und(e.from);\n        if (n || i) if (r.callId > this._lastToId) this._lastToId = r.callId;\n        else return o(Ke(this));\n        let { key: s, defaultProps: a, animation: l } = this, { to: c, from: d } = l, { to: u = c, from: v = d } = e;\n        i && !n && (!r.default || b.und(u)) && (u = v), r.reverse && ([u, v] = [\n            v,\n            u\n        ]);\n        let h = !fe(v, d);\n        h && (l.from = v), v = $(v);\n        let p = !fe(u, c);\n        p && this._focus(u);\n        let g = Eo(r.to), { config: E } = l, { decay: x, velocity: m } = E;\n        (n || i) && (E.velocity = 0), r.config && !g && Dl(E, Fe(r.config, s), r.config !== a.config ? Fe(a.config, s) : void 0);\n        let _ = se(this);\n        if (!_ || b.und(u)) return o(ae(this, !0));\n        let y = b.und(r.reset) ? i && !r.default : !b.und(v) && bt(r.reset, s), f = y ? v : this.get(), T = Et(u), C = b.num(T) || b.arr(T) || Qe(T), R = !g && (!C || bt(a.immediate || r.immediate, s));\n        if (p) {\n            let O = hr(u);\n            if (O !== _.constructor) if (R) _ = this._set(T);\n            else throw Error(`Cannot animate between ${_.constructor.name} and ${O.name}, as the \"to\" prop suggests`);\n        }\n        let S = _.constructor, A = re(u), w = !1;\n        if (!A) {\n            let O = y || !yo(this) && h;\n            (p || O) && (w = fe(Et(f), T), A = !w), (!fe(l.immediate, R) && !R || !fe(E.decay, x) || !fe(E.velocity, m)) && (A = !0);\n        }\n        if (w && Ce(this) && (l.changed && !y ? A = !0 : A || this._stop(c)), !g && ((A || re(c)) && (l.values = _.getPayload(), l.toValues = re(u) ? null : S == _e ? [\n            1\n        ] : J(T)), l.immediate != R && (l.immediate = R, !R && !y && this._set(c)), A)) {\n            let { onRest: O } = l;\n            M(Nl, (X)=>$i(this, r, X));\n            let Y = ae(this, xt(this, c));\n            je(this._pendingCalls, Y), this._pendingCalls.add(o), l.changed && L.batchedUpdates(()=>{\n                l.changed = !y, O?.(Y, this), y ? Fe(a.onRest, Y) : l.onStart == null || l.onStart(Y, this);\n            });\n        }\n        y && this._set(f), g ? o(ss(r.to, r, this._state, this)) : A ? this._start() : Ce(this) && !p ? this._pendingCalls.add(o) : o(is(f));\n    }\n    _focus(e) {\n        let r = this.animation;\n        e !== r.to && (go(this) && this._detach(), r.to = e, go(this) && this._attach());\n    }\n    _attach() {\n        let e = 0, { to: r } = this.animation;\n        re(r) && (Oe(r, this), Co(r) && (e = r.priority + 1)), this.priority = e;\n    }\n    _detach() {\n        let { to: e } = this.animation;\n        re(e) && Ze(e, this);\n    }\n    _set(e, r = !0) {\n        let o = $(e);\n        if (!b.und(o)) {\n            let n = se(this);\n            if (!n || !fe(o, n.getValue())) {\n                let i = hr(o);\n                !n || n.constructor != i ? mr(this, i.create(o)) : n.setValue(o), n && L.batchedUpdates(()=>{\n                    this._onChange(o, r);\n                });\n            }\n        }\n        return se(this);\n    }\n    _onStart() {\n        let e = this.animation;\n        e.changed || (e.changed = !0, yt(this, \"onStart\", ae(this, xt(this, e.to)), this));\n    }\n    _onChange(e, r) {\n        r || (this._onStart(), Fe(this.animation.onChange, e, this)), Fe(this.defaultProps.onChange, e, this), super._onChange(e, r);\n    }\n    _start() {\n        let e = this.animation;\n        se(this).reset($(e.to)), e.immediate || (e.fromValues = e.values.map((r)=>r.lastPosition)), Ce(this) || (Xi(this, !0), vt(this) || this._resume());\n    }\n    _resume() {\n        ee.skipAnimation ? this.finish() : Xe.start(this);\n    }\n    _stop(e, r) {\n        if (Ce(this)) {\n            Xi(this, !1);\n            let o = this.animation;\n            M(o.values, (i)=>{\n                i.done = !0;\n            }), o.toValues && (o.onChange = o.onPause = o.onResume = void 0), mt(this, {\n                type: \"idle\",\n                parent: this\n            });\n            let n = r ? Ke(this.get()) : ae(this.get(), xt(this, e ?? o.to));\n            je(this._pendingCalls, n), o.changed && (o.changed = !1, yt(this, \"onRest\", n, this));\n        }\n    }\n};\nfunction xt(t, e) {\n    let r = Et(e), o = Et(t.get());\n    return fe(o, r);\n}\nfunction cs(t, e = t.loop, r = t.to) {\n    let o = Fe(e);\n    if (o) {\n        let n = o !== !0 && os(o), i = (n || t).reverse, s = !n || n.reset;\n        return St(G({}, t, {\n            loop: e,\n            default: !1,\n            pause: void 0,\n            to: !i || Eo(r) ? r : void 0,\n            from: s ? t.from : void 0,\n            reset: s\n        }, n));\n    }\n}\nfunction St(t) {\n    let { to: e, from: r } = t = os(t), o = new Set;\n    return b.obj(e) && Qi(e, o), b.obj(r) && Qi(r, o), t.keys = o.size ? Array.from(o) : null, t;\n}\nfunction Il(t) {\n    let e = St(t);\n    return b.und(e.default) && (e.default = Fo(e)), e;\n}\nfunction Qi(t, e) {\n    ie(t, (r, o)=>r != null && e.add(o));\n}\nvar Nl = [\n    \"onStart\",\n    \"onRest\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\"\n];\nfunction $i(t, e, r) {\n    t.animation[r] = e[r] !== rs(e, r) ? ts(e[r], t.key) : void 0;\n}\nfunction yt(t, e, ...r) {\n    var o, n, i, s;\n    (o = (n = t.animation)[e]) == null || o.call(n, ...r), (i = (s = t.defaultProps)[e]) == null || i.call(s, ...r);\n}\nvar Ul = [\n    \"onStart\",\n    \"onChange\",\n    \"onRest\"\n], Bl = 1, Ao = class {\n    constructor(e, r){\n        this.id = Bl++, this.springs = {}, this.queue = [], this.ref = void 0, this._flush = void 0, this._initialProps = void 0, this._lastAsyncId = 0, this._active = new Set, this._changed = new Set, this._started = !1, this._item = void 0, this._state = {\n            paused: !1,\n            pauseQueue: new Set,\n            resumeQueue: new Set,\n            timeouts: new Set\n        }, this._events = {\n            onStart: new Map,\n            onChange: new Map,\n            onRest: new Map\n        }, this._onFrame = this._onFrame.bind(this), r && (this._flush = r), e && this.start(G({\n            default: !0\n        }, e));\n    }\n    get idle() {\n        return !this._state.asyncTo && Object.values(this.springs).every((e)=>e.idle && !e.isDelayed && !e.isPaused);\n    }\n    get item() {\n        return this._item;\n    }\n    set item(e) {\n        this._item = e;\n    }\n    get() {\n        let e = {};\n        return this.each((r, o)=>e[o] = r.get()), e;\n    }\n    set(e) {\n        for(let r in e){\n            let o = e[r];\n            b.und(o) || this.springs[r].set(o);\n        }\n    }\n    update(e) {\n        return e && this.queue.push(St(e)), this;\n    }\n    start(e) {\n        let { queue: r } = this;\n        return e ? r = J(e).map(St) : this.queue = [], this._flush ? this._flush(this, r) : (ms(this, r), Lo(this, r));\n    }\n    stop(e, r) {\n        if (e !== !!e && (r = e), r) {\n            let o = this.springs;\n            M(J(r), (n)=>o[n].stop(!!e));\n        } else Tt(this._state, this._lastAsyncId), this.each((o)=>o.stop(!!e));\n        return this;\n    }\n    pause(e) {\n        if (b.und(e)) this.start({\n            pause: !0\n        });\n        else {\n            let r = this.springs;\n            M(J(e), (o)=>r[o].pause());\n        }\n        return this;\n    }\n    resume(e) {\n        if (b.und(e)) this.start({\n            pause: !1\n        });\n        else {\n            let r = this.springs;\n            M(J(e), (o)=>r[o].resume());\n        }\n        return this;\n    }\n    each(e) {\n        ie(this.springs, e);\n    }\n    _onFrame() {\n        let { onStart: e, onChange: r, onRest: o } = this._events, n = this._active.size > 0, i = this._changed.size > 0;\n        (n && !this._started || i && !this._started) && (this._started = !0, qe(e, ([l, c])=>{\n            c.value = this.get(), l(c, this, this._item);\n        }));\n        let s = !n && this._started, a = i || s && o.size ? this.get() : null;\n        i && r.size && qe(r, ([l, c])=>{\n            c.value = a, l(c, this, this._item);\n        }), s && (this._started = !1, qe(o, ([l, c])=>{\n            c.value = a, l(c, this, this._item);\n        }));\n    }\n    eventObserved(e) {\n        if (e.type == \"change\") this._changed.add(e.parent), e.idle || this._active.add(e.parent);\n        else if (e.type == \"idle\") this._active.delete(e.parent);\n        else return;\n        L.onFrame(this._onFrame);\n    }\n};\nfunction Lo(t, e) {\n    return Promise.all(e.map((r)=>ls(t, r))).then((r)=>Do(t, r));\n}\nasync function ls(t, e, r) {\n    let { keys: o, to: n, from: i, loop: s, onRest: a, onResolve: l } = e, c = b.obj(e.default) && e.default;\n    s && (e.loop = !1), n === !1 && (e.to = null), i === !1 && (e.from = null);\n    let d = b.arr(n) || b.fun(n) ? n : void 0;\n    d ? (e.to = void 0, e.onRest = void 0, c && (c.onRest = void 0)) : M(Ul, (g)=>{\n        let E = e[g];\n        if (b.fun(E)) {\n            let x = t._events[g];\n            e[g] = ({ finished: m, cancelled: _ })=>{\n                let y = x.get(E);\n                y ? (m || (y.finished = !1), _ && (y.cancelled = !0)) : x.set(E, {\n                    value: null,\n                    finished: m || !1,\n                    cancelled: _ || !1\n                });\n            }, c && (c[g] = e[g]);\n        }\n    });\n    let u = t._state;\n    e.pause === !u.paused ? (u.paused = e.pause, je(e.pause ? u.pauseQueue : u.resumeQueue)) : u.paused && (e.pause = !0);\n    let v = (o || Object.keys(t.springs)).map((g)=>t.springs[g].start(e)), h = e.cancel === !0 || rs(e, \"cancel\") === !0;\n    (d || h && u.asyncId) && v.push(ns(++t._lastAsyncId, {\n        props: e,\n        state: u,\n        actions: {\n            pause: nr,\n            resume: nr,\n            start (g, E) {\n                h ? (Tt(u, t._lastAsyncId), E(Ke(t))) : (g.onRest = a, E(ss(d, g, u, t)));\n            }\n        }\n    })), u.paused && await new Promise((g)=>{\n        u.resumeQueue.add(g);\n    });\n    let p = Do(t, await Promise.all(v));\n    if (s && p.finished && !(r && p.noop)) {\n        let g = cs(e, s, n);\n        if (g) return ms(t, [\n            g\n        ]), ls(t, g, !0);\n    }\n    return l && L.batchedUpdates(()=>l(p, t, t.item)), p;\n}\nfunction Ki(t, e) {\n    let r = G({}, t.springs);\n    return e && M(J(e), (o)=>{\n        b.und(o.keys) && (o = St(o)), b.obj(o.to) || (o = G({}, o, {\n            to: void 0\n        })), us(r, o, (n)=>ds(n));\n    }), fs(t, r), r;\n}\nfunction fs(t, e) {\n    ie(e, (r, o)=>{\n        t.springs[o] || (t.springs[o] = r, Oe(r, t));\n    });\n}\nfunction ds(t, e) {\n    let r = new zo;\n    return r.key = t, e && Oe(r, e), r;\n}\nfunction us(t, e, r) {\n    e.keys && M(e.keys, (o)=>{\n        (t[o] || (t[o] = r(o)))._prepareNode(e);\n    });\n}\nfunction ms(t, e) {\n    M(e, (r)=>{\n        us(t.springs, r, (o)=>ds(o, t));\n    });\n}\nfunction Hl(t, e) {\n    if (t == null) return {};\n    var r = {}, o = Object.keys(t), n, i;\n    for(i = 0; i < o.length; i++)n = o[i], !(e.indexOf(n) >= 0) && (r[n] = t[n]);\n    return r;\n}\nvar Vl = [\n    \"children\"\n], xr = (t)=>{\n    let { children: e } = t, r = Hl(t, Vl), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(vr), n = r.pause || !!o.pause, i = r.immediate || !!o.immediate;\n    r = Ni(()=>({\n            pause: n,\n            immediate: i\n        }), [\n        n,\n        i\n    ]);\n    let { Provider: s } = vr;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(s, {\n        value: r\n    }, e);\n}, vr = kl(xr, {});\nxr.Provider = vr.Provider;\nxr.Consumer = vr.Consumer;\nfunction kl(t, e) {\n    return Object.assign(t, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(e)), t.Provider._context = t, t.Consumer._context = t, t;\n}\nvar Gl = ()=>{\n    let t = [], e = function(n) {\n        Ii();\n        let i = [];\n        return M(t, (s, a)=>{\n            if (b.und(n)) i.push(s.start());\n            else {\n                let l = r(n, s, a);\n                l && i.push(s.start(l));\n            }\n        }), i;\n    };\n    e.current = t, e.add = function(o) {\n        t.includes(o) || t.push(o);\n    }, e.delete = function(o) {\n        let n = t.indexOf(o);\n        ~n && t.splice(n, 1);\n    }, e.pause = function() {\n        return M(t, (o)=>o.pause(...arguments)), this;\n    }, e.resume = function() {\n        return M(t, (o)=>o.resume(...arguments)), this;\n    }, e.set = function(o) {\n        M(t, (n)=>n.set(o));\n    }, e.start = function(o) {\n        let n = [];\n        return M(t, (i, s)=>{\n            if (b.und(o)) n.push(i.start());\n            else {\n                let a = this._getProps(o, i, s);\n                a && n.push(i.start(a));\n            }\n        }), n;\n    }, e.stop = function() {\n        return M(t, (o)=>o.stop(...arguments)), this;\n    }, e.update = function(o) {\n        return M(t, (n, i)=>n.update(this._getProps(o, n, i))), this;\n    };\n    let r = function(n, i, s) {\n        return b.fun(n) ? n(s, i) : n;\n    };\n    return e._getProps = r, e;\n};\nfunction Yl(t, e, r) {\n    let o = b.fun(e) && e;\n    o && !r && (r = []);\n    let n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>o || arguments.length == 3 ? Gl() : void 0, []), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0), s = cr(), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            ctrls: [],\n            queue: [],\n            flush (x, m) {\n                let _ = Ki(x, m);\n                return i.current > 0 && !a.queue.length && !Object.keys(_).some((f)=>!x.springs[f]) ? Lo(x, m) : new Promise((f)=>{\n                    fs(x, _), a.queue.push(()=>{\n                        f(Lo(x, m));\n                    }), s();\n                });\n            }\n        }), []), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([\n        ...a.ctrls\n    ]), c = [], d = vo(t) || 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        M(l.current.slice(t, d), (x)=>{\n            Ll(x, n), x.stop(!0);\n        }), l.current.length = t, u(d, t);\n    }, [\n        t\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        u(0, Math.min(d, t));\n    }, r);\n    function u(x, m) {\n        for(let _ = x; _ < m; _++){\n            let y = l.current[_] || (l.current[_] = new Ao(null, a.flush)), f = o ? o(_, y) : e[_];\n            f && (c[_] = Il(f));\n        }\n    }\n    let v = l.current.map((x, m)=>Ki(x, c[m])), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(xr), p = vo(h), g = h !== p && Al(h);\n    $e(()=>{\n        i.current++, a.ctrls = l.current;\n        let { queue: x } = a;\n        x.length && (a.queue = [], M(x, (m)=>m())), M(l.current, (m, _)=>{\n            n?.add(m), g && m.start({\n                default: h\n            });\n            let y = c[_];\n            y && (Ol(m, y.ref), m.ref ? m.queue.push(y) : m.start(y));\n        });\n    }), lr(()=>()=>{\n            M(a.ctrls, (x)=>x.stop(!0));\n        });\n    let E = v.map((x)=>G({}, x));\n    return n ? [\n        E,\n        n\n    ] : E;\n}\nfunction Mo(t, e) {\n    let r = b.fun(t), [[o], n] = Yl(1, r ? t : [\n        t\n    ], r ? e || [] : e);\n    return r || arguments.length == 2 ? [\n        o,\n        n\n    ] : o;\n}\nvar Wi;\n(function(t) {\n    t.MOUNT = \"mount\", t.ENTER = \"enter\", t.UPDATE = \"update\", t.LEAVE = \"leave\";\n})(Wi || (Wi = {}));\nvar Oo = class extends Pt {\n    constructor(e, r){\n        super(), this.key = void 0, this.idle = !0, this.calc = void 0, this._active = new Set, this.source = e, this.calc = Se(...r);\n        let o = this._get(), n = hr(o);\n        mr(this, n.create(o));\n    }\n    advance(e) {\n        let r = this._get(), o = this.get();\n        fe(r, o) || (se(this).setValue(r), this._onChange(r, this.idle)), !this.idle && Ji(this._active) && bo(this);\n    }\n    _get() {\n        let e = b.arr(this.source) ? this.source.map($) : J($(this.source));\n        return this.calc(...e);\n    }\n    _start() {\n        this.idle && !Ji(this._active) && (this.idle = !1, M(_t(this), (e)=>{\n            e.done = !1;\n        }), ee.skipAnimation ? (L.batchedUpdates(()=>this.advance()), bo(this)) : Xe.start(this));\n    }\n    _attach() {\n        let e = 1;\n        M(J(this.source), (r)=>{\n            re(r) && Oe(r, this), Co(r) && (r.idle || this._active.add(r), e = Math.max(e, r.priority + 1));\n        }), this.priority = e, this._start();\n    }\n    _detach() {\n        M(J(this.source), (e)=>{\n            re(e) && Ze(e, this);\n        }), this._active.clear(), bo(this);\n    }\n    eventObserved(e) {\n        e.type == \"change\" ? e.idle ? this.advance() : (this._active.add(e.parent), this._start()) : e.type == \"idle\" ? this._active.delete(e.parent) : e.type == \"priority\" && (this.priority = J(this.source).reduce((r, o)=>Math.max(r, (Co(o) ? o.priority : 0) + 1), 0));\n    }\n};\nfunction ql(t) {\n    return t.idle !== !1;\n}\nfunction Ji(t) {\n    return !t.size || Array.from(t).every(ql);\n}\nfunction bo(t) {\n    t.idle || (t.idle = !0, M(_t(t), (e)=>{\n        e.done = !0;\n    }), mt(t, {\n        type: \"idle\",\n        parent: t\n    }));\n}\nee.assign({\n    createStringInterpolator: ar,\n    to: (t, e)=>new Oo(t, e)\n});\nvar Wm = Xe.advance;\n\nvar Ql = [\n    \"primitive\"\n].concat(Object.keys(three__WEBPACK_IMPORTED_MODULE_3__).filter((t)=>/^[A-Z]/.test(t)).map((t)=>t[0].toLowerCase() + t.slice(1)));\nee.assign({\n    createStringInterpolator: ar,\n    colors: Li,\n    frameLoop: \"demand\"\n});\n(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.n)(()=>{\n    L.advance();\n});\nvar $l = Gi(Ql, {\n    applyAnimatedValues: _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.j\n}), hs = $l.animated;\n\n\n\nfunction ps(t, e, r) {\n    return class extends three__WEBPACK_IMPORTED_MODULE_3__.LineBasicMaterial {\n        constructor(){\n            let o = Object.entries(t), n = o.reduce((i, [s, a])=>{\n                let l = three__WEBPACK_IMPORTED_MODULE_3__.UniformsUtils.clone({\n                    [s]: {\n                        value: a\n                    }\n                });\n                return D(D({}, i), l);\n            }, {});\n            super({\n                color: \"#ffffff\",\n                linewidth: 5,\n                userData: n,\n                onBeforeCompile: (i)=>{\n                    i.uniforms = D(D({}, i.uniforms), n), i.vertexShader = e;\n                }\n            }), o.forEach(([i])=>Object.defineProperty(this, i, {\n                    get: ()=>this.uniforms[i].value,\n                    set: (s)=>this.uniforms[i].value = s\n                })), r && r(this);\n        }\n    };\n}\n\nfunction gs(t, e, r, o) {\n    return class extends three__WEBPACK_IMPORTED_MODULE_3__.MeshPhysicalMaterial {\n        constructor(){\n            let n = Object.entries(t), i = t.colors, s = Io(i[0]), a = Io(i[1]), l = Io(i[2]), c = {\n                uC1r: {\n                    value: ve(s == null ? void 0 : s.r)\n                },\n                uC1g: {\n                    value: ve(s == null ? void 0 : s.g)\n                },\n                uC1b: {\n                    value: ve(s == null ? void 0 : s.b)\n                },\n                uC2r: {\n                    value: ve(a == null ? void 0 : a.r)\n                },\n                uC2g: {\n                    value: ve(a == null ? void 0 : a.g)\n                },\n                uC2b: {\n                    value: ve(a == null ? void 0 : a.b)\n                },\n                uC3r: {\n                    value: ve(l == null ? void 0 : l.r)\n                },\n                uC3g: {\n                    value: ve(l == null ? void 0 : l.g)\n                },\n                uC3b: {\n                    value: ve(l == null ? void 0 : l.b)\n                }\n            }, d = n.reduce((u, [v, h])=>{\n                let p = three__WEBPACK_IMPORTED_MODULE_3__.UniformsUtils.clone({\n                    [v]: {\n                        value: h\n                    }\n                });\n                return D(D({}, u), p);\n            }, {});\n            super({\n                metalness: .2,\n                userData: d,\n                side: three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide,\n                onBeforeCompile: (u)=>{\n                    u.uniforms = D(D(D({}, u.uniforms), d), c), u.vertexShader = e, u.fragmentShader = r;\n                }\n            }), n.forEach(([u])=>Object.defineProperty(this, u, {\n                    get: ()=>this.uniforms[u].value,\n                    set: (v)=>this.uniforms[u].value = v\n                })), o && o(this);\n        }\n    };\n}\nfunction Io(t) {\n    let e = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(t);\n    return e ? {\n        r: parseInt(e[1], 16),\n        g: parseInt(e[2], 16),\n        b: parseInt(e[3], 16)\n    } : null;\n}\nfunction ve(t = 0) {\n    return t / 255;\n}\nvar Uo = {};\nme(Uo, {\n    defaults: ()=>Rt,\n    positionMix: ()=>No\n});\nvar Rt = {};\nme(Rt, {\n    plane: ()=>br,\n    sphere: ()=>Er,\n    waterPlane: ()=>Tr\n});\nvar br = {};\nme(br, {\n    fragment: ()=>_s,\n    vertex: ()=>vs\n});\nvar _s = `\n#define STANDARD\n#ifdef PHYSICAL\n#define REFLECTIVITY\n#define CLEARCOAT\n#define TRANSMISSION\n#endif\nuniform vec3 diffuse;uniform vec3 emissive;uniform float roughness;uniform float metalness;uniform float opacity;\n#ifdef TRANSMISSION\nuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\nuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\nuniform float clearcoat;uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <color_pars_fragment>\n#include <common>\n#include <dithering_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <map_pars_fragment>\n#include <packing>\n#include <uv2_pars_fragment>\n#include <uv_pars_fragment>\n#include <bsdfs>\n#include <bumpmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <shadowmap_pars_fragment>\nvarying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;uniform float uC1r;uniform float uC1g;uniform float uC1b;uniform float uC2r;uniform float uC2g;uniform float uC2b;uniform float uC3r;uniform float uC3g;uniform float uC3b;varying vec3 color1;varying vec3 color2;varying vec3 color3;float linearToRelativeLuminance2(const in vec3 color){vec3 weights=vec3(0.2126,0.7152,0.0722);return dot(weights,color.rgb);}void main(){vec3 color1=vec3(uC1r,uC1g,uC1b);vec3 color2=vec3(uC2r,uC2g,uC2b);vec3 color3=vec3(uC3r,uC3g,uC3b);float clearcoat=1.0;float clearcoatRoughness=0.5;\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(mix(mix(color1,color2,smoothstep(-3.0,3.0,vPos.x)),color3,vPos.z),1);ReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));vec3 totalEmissiveRadiance=emissive;\n#ifdef TRANSMISSION\nfloat totalTransmission=transmission;\n#endif\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <roughnessmap_fragment>\n#include <metalnessmap_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <clearcoat_normal_fragment_begin>\n#include <clearcoat_normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_physical_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+reflectedLight.directSpecular+reflectedLight.indirectSpecular;\n#ifdef TRANSMISSION\ndiffuseColor.a*=mix(saturate(1.-totalTransmission+linearToRelativeLuminance2(reflectedLight.directSpecular+reflectedLight.indirectSpecular)),1.0,metalness);\n#endif\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\ngl_FragColor=vec4(outgoingLight,diffuseColor.a);}`;\nvar vs = `vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float cnoise(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}mat3 rotation3dY(float angle){float s=sin(angle);float c=cos(angle);return mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);}vec3 rotateY(vec3 v,float angle){return rotation3dY(angle)*v;}varying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;varying vec2 vUv;uniform float uTime;uniform float uSpeed;uniform float uLoadingTime;uniform float uNoiseDensity;uniform float uNoiseStrength;\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\nvoid main(){\n#include <beginnormal_vertex>\n#include <color_vertex>\n#include <defaultnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <uv2_vertex>\n#include <uv_vertex>\n#ifndef FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif\n#include <begin_vertex>\n#include <clipping_planes_vertex>\n#include <displacementmap_vertex>\n#include <logdepthbuf_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <skinning_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <fog_vertex>\n#include <shadowmap_vertex>\n#include <worldpos_vertex>\nvUv=uv;float t=uTime*uSpeed;float distortion=0.75*cnoise(0.43*position*uNoiseDensity+t);vec3 pos=position+normal*distortion*uNoiseStrength*uLoadingTime;vPos=pos;gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);}`;\nvar Er = {};\nme(Er, {\n    fragment: ()=>xs,\n    vertex: ()=>ys\n});\nvar xs = `\n#define STANDARD\n#ifdef PHYSICAL\n#define REFLECTIVITY\n#define CLEARCOAT\n#define TRANSMISSION\n#endif\nuniform vec3 diffuse;uniform vec3 emissive;uniform float roughness;uniform float metalness;uniform float opacity;\n#ifdef TRANSMISSION\nuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\nuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\nuniform float clearcoat;uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <color_pars_fragment>\n#include <common>\n#include <dithering_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <map_pars_fragment>\n#include <packing>\n#include <uv2_pars_fragment>\n#include <uv_pars_fragment>\n#include <bsdfs>\n#include <bumpmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <shadowmap_pars_fragment>\nvarying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;uniform float uC1r;uniform float uC1g;uniform float uC1b;uniform float uC2r;uniform float uC2g;uniform float uC2b;uniform float uC3r;uniform float uC3g;uniform float uC3b;varying vec3 color1;varying vec3 color2;varying vec3 color3;varying float distanceToCenter;float linearToRelativeLuminance2(const in vec3 color){vec3 weights=vec3(0.2126,0.7152,0.0722);return dot(weights,color.rgb);}void main(){vec3 color1=vec3(uC1r,uC1g,uC1b);vec3 color2=vec3(uC2r,uC2g,uC2b);vec3 color3=vec3(uC3r,uC3g,uC3b);float clearcoat=1.0;float clearcoatRoughness=0.5;\n#include <clipping_planes_fragment>\nfloat distanceToCenter=distance(vPos,vec3(0,0,0));vec4 diffuseColor=vec4(mix(color3,mix(color2,color1,smoothstep(-1.0,1.0,vPos.y)),distanceToCenter),1);ReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));vec3 totalEmissiveRadiance=emissive;\n#ifdef TRANSMISSION\nfloat totalTransmission=transmission;\n#endif\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <roughnessmap_fragment>\n#include <metalnessmap_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <clearcoat_normal_fragment_begin>\n#include <clearcoat_normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_physical_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+reflectedLight.directSpecular+reflectedLight.indirectSpecular;\n#ifdef TRANSMISSION\ndiffuseColor.a*=mix(saturate(1.-totalTransmission+linearToRelativeLuminance2(reflectedLight.directSpecular+reflectedLight.indirectSpecular)),1.0,metalness);\n#endif\ngl_FragColor=vec4(outgoingLight,diffuseColor.a);\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}`;\nvar ys = `vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float pnoise(vec3 P,vec3 rep){vec3 Pi0=mod(floor(P),rep);vec3 Pi1=mod(Pi0+vec3(1.0),rep);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}varying vec3 vNormal;uniform float uTime;uniform float uSpeed;uniform float uNoiseDensity;uniform float uNoiseStrength;uniform float uFrequency;uniform float uAmplitude;varying vec3 vPos;varying float vDistort;varying vec2 vUv;varying vec3 vViewPosition;\n#define STANDARD\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\nmat3 rotation3dY(float angle){float s=sin(angle);float c=cos(angle);return mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);}vec3 rotateY(vec3 v,float angle){return rotation3dY(angle)*v;}void main(){\n#include <beginnormal_vertex>\n#include <color_vertex>\n#include <defaultnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <uv2_vertex>\n#include <uv_vertex>\n#ifndef FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif\n#include <begin_vertex>\n#include <clipping_planes_vertex>\n#include <displacementmap_vertex>\n#include <logdepthbuf_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <skinning_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <fog_vertex>\n#include <shadowmap_vertex>\n#include <worldpos_vertex>\nfloat t=uTime*uSpeed;float distortion=pnoise((normal+t)*uNoiseDensity,vec3(10.0))*uNoiseStrength;vec3 pos=position+(normal*distortion);float angle=sin(uv.y*uFrequency+t)*uAmplitude;pos=rotateY(pos,angle);vPos=pos;vDistort=distortion;vNormal=normal;vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);}`;\nvar Tr = {};\nme(Tr, {\n    fragment: ()=>bs,\n    vertex: ()=>Es\n});\nvar bs = `\n#define STANDARD\n#ifdef PHYSICAL\n#define REFLECTIVITY\n#define CLEARCOAT\n#define TRANSMISSION\n#endif\nuniform vec3 diffuse;uniform vec3 emissive;uniform float roughness;uniform float metalness;uniform float opacity;\n#ifdef TRANSMISSION\nuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\nuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\nuniform float clearcoat;uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <color_pars_fragment>\n#include <common>\n#include <dithering_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <map_pars_fragment>\n#include <packing>\n#include <uv2_pars_fragment>\n#include <uv_pars_fragment>\n#include <bsdfs>\n#include <bumpmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <shadowmap_pars_fragment>\nvarying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;uniform float uC1r;uniform float uC1g;uniform float uC1b;uniform float uC2r;uniform float uC2g;uniform float uC2b;uniform float uC3r;uniform float uC3g;uniform float uC3b;varying vec3 color1;varying vec3 color2;varying vec3 color3;float linearToRelativeLuminance2(const in vec3 color){vec3 weights=vec3(0.2126,0.7152,0.0722);return dot(weights,color.rgb);}void main(){vec3 color1=vec3(uC1r,uC1g,uC1b);vec3 color2=vec3(uC2r,uC2g,uC2b);vec3 color3=vec3(uC3r,uC3g,uC3b);float clearcoat=1.0;float clearcoatRoughness=0.5;\n#include <clipping_planes_fragment>\nvec4 diffuseColor=vec4(mix(mix(color1,color2,smoothstep(-3.0,3.0,vPos.x)),color3,vPos.z),1);ReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));vec3 totalEmissiveRadiance=emissive;\n#ifdef TRANSMISSION\nfloat totalTransmission=transmission;\n#endif\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <roughnessmap_fragment>\n#include <metalnessmap_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <clearcoat_normal_fragment_begin>\n#include <clearcoat_normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_physical_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+reflectedLight.directSpecular+reflectedLight.indirectSpecular;\n#ifdef TRANSMISSION\ndiffuseColor.a*=mix(saturate(1.-totalTransmission+linearToRelativeLuminance2(reflectedLight.directSpecular+reflectedLight.indirectSpecular)),1.0,metalness);\n#endif\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\ngl_FragColor=vec4(outgoingLight,diffuseColor.a);}`;\nvar Es = `vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float cnoise(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}mat3 rotation3dY(float angle){float s=sin(angle);float c=cos(angle);return mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);}vec3 rotateY(vec3 v,float angle){return rotation3dY(angle)*v;}varying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;uniform float uTime;uniform float uSpeed;uniform float uNoiseDensity;uniform float uNoiseStrength;\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\nvoid main(){\n#include <beginnormal_vertex>\n#include <color_vertex>\n#include <defaultnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <uv2_vertex>\n#include <uv_vertex>\n#ifndef FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif\n#include <begin_vertex>\n#include <clipping_planes_vertex>\n#include <displacementmap_vertex>\n#include <logdepthbuf_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <skinning_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <fog_vertex>\n#include <shadowmap_vertex>\n#include <worldpos_vertex>\nfloat t=uTime*uSpeed;float distortion=0.75*cnoise(0.43*position*uNoiseDensity+t);vec3 pos=position+normal*distortion*uNoiseStrength;vPos=pos;gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);}`;\nvar No = {};\nme(No, {\n    plane: ()=>Pr,\n    sphere: ()=>Sr,\n    waterPlane: ()=>Cr\n});\nvar Pr = {};\nme(Pr, {\n    fragment: ()=>Ts,\n    vertex: ()=>Ps\n});\nvar Ts = \"uniform float uC1r;uniform float uC1g;uniform float uC1b;uniform float uC2r;uniform float uC2g;uniform float uC2b;uniform float uC3r;uniform float uC3g;uniform float uC3b;varying vec3 vNormal;varying vec3 vPos;void main(){vec3 color1=vec3(uC1r,uC1g,uC1b);vec3 color2=vec3(uC2r,uC2g,uC2b);vec3 color3=vec3(uC3r,uC3g,uC3b);gl_FragColor=vec4(color1*vPos.x+color2*vPos.y+color3*vPos.z,1.);}\";\nvar Ps = `vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float cnoise(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}mat3 rotation3dY(float angle){float s=sin(angle);float c=cos(angle);return mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);}vec3 rotateY(vec3 v,float angle){return rotation3dY(angle)*v;}varying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;varying vec2 vUv;uniform float uTime;uniform float uSpeed;uniform float uLoadingTime;uniform float uNoiseDensity;uniform float uNoiseStrength;\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\nvoid main(){\n#include <beginnormal_vertex>\n#include <color_vertex>\n#include <defaultnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <uv2_vertex>\n#include <uv_vertex>\n#ifndef FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif\n#include <begin_vertex>\n#include <clipping_planes_vertex>\n#include <displacementmap_vertex>\n#include <logdepthbuf_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <skinning_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <fog_vertex>\n#include <shadowmap_vertex>\n#include <worldpos_vertex>\nvUv=uv;float t=uTime*uSpeed;float distortion=0.75*cnoise(0.43*position*uNoiseDensity+t);vec3 pos=position+normal*distortion*uNoiseStrength*uLoadingTime;vPos=pos;gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);}`;\nvar Sr = {};\nme(Sr, {\n    fragment: ()=>Ss,\n    vertex: ()=>Cs\n});\nvar Ss = `\n#define STANDARD\n#ifdef PHYSICAL\n#define REFLECTIVITY\n#define CLEARCOAT\n#define TRANSMISSION\n#endif\nuniform vec3 diffuse;uniform vec3 emissive;uniform float roughness;uniform float metalness;uniform float opacity;\n#ifdef TRANSMISSION\nuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\nuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\nuniform float clearcoat;uniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\nuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <color_pars_fragment>\n#include <common>\n#include <dithering_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <map_pars_fragment>\n#include <packing>\n#include <uv2_pars_fragment>\n#include <uv_pars_fragment>\n#include <bsdfs>\n#include <bumpmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <clipping_planes_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <shadowmap_pars_fragment>\nvarying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;uniform float uC1r;uniform float uC1g;uniform float uC1b;uniform float uC2r;uniform float uC2g;uniform float uC2b;uniform float uC3r;uniform float uC3g;uniform float uC3b;varying vec3 color1;varying vec3 color2;varying vec3 color3;varying float distanceToCenter;void main(){vec3 color1=vec3(uC1r,uC1g,uC1b);vec3 color2=vec3(uC2r,uC2g,uC2b);vec3 color3=vec3(uC3r,uC3g,uC3b);float clearcoat=1.0;float clearcoatRoughness=0.5;\n#include <clipping_planes_fragment>\nfloat distanceToCenter=distance(vPos,vec3(0,0,0));vec4 diffuseColor=vec4(mix(color3,mix(color2,color1,smoothstep(-1.0,1.0,vPos.y)),distanceToCenter),1);ReflectedLight reflectedLight=ReflectedLight(vec3(0.0),vec3(0.0),vec3(0.0),vec3(0.0));vec3 totalEmissiveRadiance=emissive;\n#ifdef TRANSMISSION\nfloat totalTransmission=transmission;\n#endif\n#include <logdepthbuf_fragment>\n#include <map_fragment>\n#include <color_fragment>\n#include <alphamap_fragment>\n#include <alphatest_fragment>\n#include <roughnessmap_fragment>\n#include <metalnessmap_fragment>\n#include <normal_fragment_begin>\n#include <normal_fragment_maps>\n#include <clearcoat_normal_fragment_begin>\n#include <clearcoat_normal_fragment_maps>\n#include <emissivemap_fragment>\n#include <lights_physical_fragment>\n#include <lights_fragment_begin>\n#include <lights_fragment_maps>\n#include <lights_fragment_end>\n#include <aomap_fragment>\nvec3 outgoingLight=reflectedLight.directDiffuse+reflectedLight.indirectDiffuse+reflectedLight.directSpecular+reflectedLight.indirectSpecular;\n#ifdef TRANSMISSION\ndiffuseColor.a*=mix(saturate(1.-totalTransmission+linearToRelativeLuminance(reflectedLight.directSpecular+reflectedLight.indirectSpecular)),1.0,metalness);\n#endif\ngl_FragColor=vec4(outgoingLight,diffuseColor.a);\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n#include <fog_fragment>\n#include <premultiplied_alpha_fragment>\n#include <dithering_fragment>\n}`;\nvar Cs = `vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float pnoise(vec3 P,vec3 rep){vec3 Pi0=mod(floor(P),rep);vec3 Pi1=mod(Pi0+vec3(1.0),rep);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}varying vec3 vNormal;uniform float uTime;uniform float uSpeed;uniform float uNoiseDensity;uniform float uNoiseStrength;uniform float uFrequency;uniform float uAmplitude;varying vec3 vPos;varying float vDistort;varying vec2 vUv;varying vec3 vViewPosition;\n#define STANDARD\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\nmat3 rotation3dY(float angle){float s=sin(angle);float c=cos(angle);return mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);}vec3 rotateY(vec3 v,float angle){return rotation3dY(angle)*v;}void main(){\n#include <beginnormal_vertex>\n#include <color_vertex>\n#include <defaultnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <uv2_vertex>\n#include <uv_vertex>\n#ifndef FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif\n#include <begin_vertex>\n#include <clipping_planes_vertex>\n#include <displacementmap_vertex>\n#include <logdepthbuf_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <skinning_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <fog_vertex>\n#include <shadowmap_vertex>\n#include <worldpos_vertex>\nfloat t=uTime*uSpeed;float distortion=pnoise((normal+t)*uNoiseDensity,vec3(10.0))*uNoiseStrength;vec3 pos=position+(normal*distortion);float angle=sin(uv.y*uFrequency+t)*uAmplitude;pos=rotateY(pos,angle);vPos=pos;vDistort=distortion;vNormal=normal;vUv=uv;gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);}`;\nvar Cr = {};\nme(Cr, {\n    fragment: ()=>Rs,\n    vertex: ()=>ws\n});\nvar Rs = \"uniform float uC1r;uniform float uC1g;uniform float uC1b;uniform float uC2r;uniform float uC2g;uniform float uC2b;uniform float uC3r;uniform float uC3g;uniform float uC3b;varying vec3 vNormal;varying vec3 vPos;void main(){vec3 color1=vec3(uC1r,uC1g,uC1b);vec3 color2=vec3(uC2r,uC2g,uC2b);vec3 color3=vec3(uC3r,uC3g,uC3b);gl_FragColor=vec4(color1*vPos.x+color2*vPos.y+color3*vPos.z,1.);}\";\nvar ws = `vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}vec3 fade(vec3 t){return t*t*t*(t*(t*6.0-15.0)+10.0);}float cnoise(vec3 P){vec3 Pi0=floor(P);vec3 Pi1=Pi0+vec3(1.0);Pi0=mod289(Pi0);Pi1=mod289(Pi1);vec3 Pf0=fract(P);vec3 Pf1=Pf0-vec3(1.0);vec4 ix=vec4(Pi0.x,Pi1.x,Pi0.x,Pi1.x);vec4 iy=vec4(Pi0.yy,Pi1.yy);vec4 iz0=Pi0.zzzz;vec4 iz1=Pi1.zzzz;vec4 ixy=permute(permute(ix)+iy);vec4 ixy0=permute(ixy+iz0);vec4 ixy1=permute(ixy+iz1);vec4 gx0=ixy0*(1.0/7.0);vec4 gy0=fract(floor(gx0)*(1.0/7.0))-0.5;gx0=fract(gx0);vec4 gz0=vec4(0.5)-abs(gx0)-abs(gy0);vec4 sz0=step(gz0,vec4(0.0));gx0-=sz0*(step(0.0,gx0)-0.5);gy0-=sz0*(step(0.0,gy0)-0.5);vec4 gx1=ixy1*(1.0/7.0);vec4 gy1=fract(floor(gx1)*(1.0/7.0))-0.5;gx1=fract(gx1);vec4 gz1=vec4(0.5)-abs(gx1)-abs(gy1);vec4 sz1=step(gz1,vec4(0.0));gx1-=sz1*(step(0.0,gx1)-0.5);gy1-=sz1*(step(0.0,gy1)-0.5);vec3 g000=vec3(gx0.x,gy0.x,gz0.x);vec3 g100=vec3(gx0.y,gy0.y,gz0.y);vec3 g010=vec3(gx0.z,gy0.z,gz0.z);vec3 g110=vec3(gx0.w,gy0.w,gz0.w);vec3 g001=vec3(gx1.x,gy1.x,gz1.x);vec3 g101=vec3(gx1.y,gy1.y,gz1.y);vec3 g011=vec3(gx1.z,gy1.z,gz1.z);vec3 g111=vec3(gx1.w,gy1.w,gz1.w);vec4 norm0=taylorInvSqrt(vec4(dot(g000,g000),dot(g010,g010),dot(g100,g100),dot(g110,g110)));g000*=norm0.x;g010*=norm0.y;g100*=norm0.z;g110*=norm0.w;vec4 norm1=taylorInvSqrt(vec4(dot(g001,g001),dot(g011,g011),dot(g101,g101),dot(g111,g111)));g001*=norm1.x;g011*=norm1.y;g101*=norm1.z;g111*=norm1.w;float n000=dot(g000,Pf0);float n100=dot(g100,vec3(Pf1.x,Pf0.yz));float n010=dot(g010,vec3(Pf0.x,Pf1.y,Pf0.z));float n110=dot(g110,vec3(Pf1.xy,Pf0.z));float n001=dot(g001,vec3(Pf0.xy,Pf1.z));float n101=dot(g101,vec3(Pf1.x,Pf0.y,Pf1.z));float n011=dot(g011,vec3(Pf0.x,Pf1.yz));float n111=dot(g111,Pf1);vec3 fade_xyz=fade(Pf0);vec4 n_z=mix(vec4(n000,n100,n010,n110),vec4(n001,n101,n011,n111),fade_xyz.z);vec2 n_yz=mix(n_z.xy,n_z.zw,fade_xyz.y);float n_xyz=mix(n_yz.x,n_yz.y,fade_xyz.x);return 2.2*n_xyz;}mat3 rotation3dY(float angle){float s=sin(angle);float c=cos(angle);return mat3(c,0.0,-s,0.0,1.0,0.0,s,0.0,c);}vec3 rotateY(vec3 v,float angle){return rotation3dY(angle)*v;}varying vec3 vNormal;varying float displacement;varying vec3 vPos;varying float vDistort;varying vec2 vUv;uniform float uTime;uniform float uSpeed;uniform float uLoadingTime;uniform float uNoiseDensity;uniform float uNoiseStrength;\n#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n#ifdef USE_TANGENT\nvarying vec3 vTangent;varying vec3 vBitangent;\n#endif\n#endif\n#include <clipping_planes_pars_vertex>\n#include <color_pars_vertex>\n#include <common>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <skinning_pars_vertex>\n#include <uv2_pars_vertex>\n#include <uv_pars_vertex>\nvoid main(){\n#include <beginnormal_vertex>\n#include <color_vertex>\n#include <defaultnormal_vertex>\n#include <morphnormal_vertex>\n#include <skinbase_vertex>\n#include <skinnormal_vertex>\n#include <uv2_vertex>\n#include <uv_vertex>\n#ifndef FLAT_SHADED\nvNormal=normalize(transformedNormal);\n#ifdef USE_TANGENT\nvTangent=normalize(transformedTangent);vBitangent=normalize(cross(vNormal,vTangent)*tangent.w);\n#endif\n#endif\n#include <begin_vertex>\n#include <clipping_planes_vertex>\n#include <displacementmap_vertex>\n#include <logdepthbuf_vertex>\n#include <morphtarget_vertex>\n#include <project_vertex>\n#include <skinning_vertex>\nvViewPosition=-mvPosition.xyz;\n#include <fog_vertex>\n#include <shadowmap_vertex>\n#include <worldpos_vertex>\nvUv=uv;float t=uTime*uSpeed;float distortion=0.75*cnoise(0.43*position*uNoiseDensity+t);vec3 pos=position+normal*distortion*uNoiseStrength*uLoadingTime;vPos=pos;gl_Position=projectionMatrix*modelViewMatrix*vec4(pos,1.);}`;\nfunction As({ type: t, shader: e, color1: r, color2: o, color3: n, uTime: i, uSpeed: s, uDensity: a, uStrength: l, uFrequency: c, uAmplitude: d }) {\n    let [u, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), h = t != null ? t : \"plane\", p = Rt[h];\n    e && e !== \"defaults\" && (p = Uo[e][h]);\n    let g = gs({\n        colors: [\n            r,\n            o,\n            n\n        ],\n        uTime: i,\n        uSpeed: s,\n        uLoadingTime: 0,\n        uNoiseDensity: a,\n        uNoiseStrength: l,\n        uFrequency: c,\n        uAmplitude: d,\n        uIntensity: .5\n    }, p.vertex, p.fragment), E = ps({\n        uTime: i,\n        uSpeed: s,\n        uNoiseDensity: a,\n        uNoiseStrength: l,\n        uFrequency: c,\n        uAmplitude: d,\n        uIntensity: .5\n    }, p.vertex);\n    return (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.e)({\n        ColorShiftMaterial: g\n    }), (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.e)({\n        HoveredLineMaterial: E\n    }), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        v(!0);\n    }, []), u;\n}\n\n\n\nvar { to: Os, rotDur: Xh, meshDur: Bo, rotDelay: Zh, meshDelay: Ho } = ri, Vo = new three__WEBPACK_IMPORTED_MODULE_3__.Clock, mf = 20;\nfunction Ds({ animate: t, range: e, rangeStart: r, rangeEnd: o }) {\n    let n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), s = 0;\n    return (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.C)((a, l)=>{\n        if (n.current) {\n            let c = Vo.getElapsedTime();\n            if (e === \"enabled\" && (c = r, c = c + Vo.getElapsedTime(), c >= o && (c = r, Vo.start())), c > Ho) {\n                let d = n.current.userData.uLoadingTime.value, u = c < Bo + Ho ? Math.easeInOutCubic(s, d, Os - d, Bo * 1e3) : Os;\n                n.current.userData.uLoadingTime.value = u, c < Bo + Ho && (s += mf);\n            }\n            t === \"on\" && (n.current.userData.uTime.value = c, i.current !== void 0 && (i.current.userData.uTime.value = c));\n        }\n    }), {\n        material: n,\n        linemat: i\n    };\n}\n\nMath.easeInOutCubic = function(t, e, r, o) {\n    return t /= o / 2, t < 1 ? r / 2 * t * t * t + e : (t -= 2, r / 2 * (t * t * t + 2) + e);\n};\nvar Rr = 192, wr = 36, Ms = ({ type: t, animate: e, range: r, rangeStart: o, rangeEnd: n, uTime: i, uSpeed: s, uStrength: a, uDensity: l, uFrequency: c, uAmplitude: d, positionX: u, positionY: v, positionZ: h, rotationX: p, rotationY: g, rotationZ: E, color1: x, color2: m, color3: _, reflection: y, wireframe: f, shader: T, rotSpringOption: C = ({ rotation: S })=>({\n        to: (A, w)=>Lr(void 0, null, function*() {\n                yield A({\n                    animatedRotation: S\n                });\n            }),\n        from: {\n            rotation: Qr([\n                0,\n                0,\n                0\n            ])\n        },\n        config: {\n            duration: 300\n        }\n    }), posSpringOption: R = ({ position: S })=>({\n        to: (A, w)=>Lr(void 0, null, function*() {\n                yield A({\n                    animatedPosition: S\n                });\n            }),\n        from: {\n            position: [\n                0,\n                0,\n                0\n            ]\n        },\n        config: {\n            duration: 300\n        }\n    }) })=>{\n    let S = As({\n        type: t,\n        shader: T,\n        color1: x,\n        color2: m,\n        color3: _,\n        uTime: i,\n        uSpeed: s,\n        uDensity: l,\n        uStrength: a,\n        uFrequency: c,\n        uAmplitude: d\n    }), { material: A, linemat: w } = Ds({\n        animate: e,\n        range: r,\n        rangeStart: o,\n        rangeEnd: n\n    }), O = [\n        u,\n        v,\n        h\n    ], Y = Qr([\n        p,\n        g,\n        E\n    ]), { animatedPosition: X } = Mo(R({\n        position: O\n    })), { animatedRotation: j } = Mo(C({\n        rotation: Y\n    }));\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"group\", {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(hs.mesh, {\n                position: X,\n                rotation: j,\n                name: \"shadergradient-mesh\",\n                children: [\n                    t === \"plane\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"planeGeometry\", {\n                        args: [\n                            10,\n                            10,\n                            1,\n                            Rr\n                        ]\n                    }),\n                    t === \"sphere\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"icosahedronGeometry\", {\n                        args: [\n                            1,\n                            Rr / 3\n                        ]\n                    }),\n                    t === \"waterPlane\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"planeGeometry\", {\n                        args: [\n                            10,\n                            10,\n                            Rr,\n                            Rr\n                        ]\n                    }),\n                    S && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"colorShiftMaterial\", {\n                        ref: A,\n                        roughness: 1 - y\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"mesh\", {\n                children: (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"lineSegments\", {\n                    renderOrder: 1,\n                    position: O,\n                    rotation: Y,\n                    visible: !1,\n                    children: [\n                        t === \"plane\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"planeGeometry\", {\n                            args: [\n                                10,\n                                10,\n                                1,\n                                wr\n                            ]\n                        }),\n                        t === \"sphere\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"icosahedronGeometry\", {\n                            args: [\n                                1,\n                                wr / 3\n                            ]\n                        }),\n                        t === \"waterPlane\" && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"planeGeometry\", {\n                            args: [\n                                10,\n                                10,\n                                wr,\n                                wr\n                            ]\n                        }),\n                        S && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"hoveredLineMaterial\", {\n                            ref: w\n                        })\n                    ]\n                })\n            })\n        ]\n    });\n};\nvar jo = la(ea());\nvar qo = [\n    {\n        title: \"Halo\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=off&brightness=1.2&cAzimuthAngle=180&cDistance=3.6&cPolarAngle=90&cameraZoom=1&color1=%23ff5005&color2=%23dbba95&color3=%23d0bce1&embedMode=off&envPreset=city&gizmoHelper=hide&grain=on&lightType=3d&pixelDensity=1&fov=45&positionX=-1.4&positionY=0&positionZ=0&reflection=0.1&rotationX=0&rotationY=10&rotationZ=50&shader=defaults&type=plane&uDensity=1.3&uSpeed=0.4&uStrength=4&uTime=0&uFrequency=5.5&wireframe=false\"\n    },\n    {\n        title: \"Pensive\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=off&brightness=1.5&cAzimuthAngle=250&cDistance=1.5&cPolarAngle=140&cameraZoom=12.5&color1=%23809bd6&color2=%23910aff&color3=%23af38ff&embedMode=off&envPreset=city&gizmoHelper=hide&grain=on&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=0&positionZ=0&reflection=0.5&rotationX=0&rotationY=0&rotationZ=140&shader=defaults&type=sphere&uAmplitude=7&uDensity=0.8&uFrequency=5.5&uSpeed=0.3&uStrength=0.4&uTime=0&wireframe=false\"\n    },\n    {\n        title: \"Mint\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=off&brightness=1.2&cAzimuthAngle=170&cDistance=4.4&cPolarAngle=70&cameraZoom=1&color1=%2394ffd1&color2=%236bf5ff&color3=%23ffffff&embedMode=off&envPreset=city&gizmoHelper=hide&grain=off&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=0.9&positionZ=-0.3&reflection=0.1&rotationX=45&rotationY=0&rotationZ=0&type=waterPlane&uAmplitude=0&uDensity=1.2&uFrequency=0&uSpeed=0.2&uStrength=3.4&uTime=0&wireframe=false&shader=defaults\"\n    },\n    {\n        title: \"Interstella\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=off&brightness=0.8&cAzimuthAngle=270&cDistance=0.5&cPolarAngle=180&cameraZoom=15.1&color1=%2373bfc4&color2=%23ff810a&color3=%238da0ce&embedMode=off&envPreset=city&gizmoHelper=hide&grain=on&lightType=env&pixelDensity=1&fov=45&positionX=-0.1&positionY=0&positionZ=0&reflection=0.4&rotationX=0&rotationY=130&rotationZ=70&shader=defaults&type=sphere&uAmplitude=3.2&uDensity=0.8&uFrequency=5.5&uSpeed=0.3&uStrength=0.3&uTime=0&wireframe=false\"\n    },\n    {\n        title: \"Nighty night\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=off&brightness=1&cAzimuthAngle=180&cDistance=2.8&cPolarAngle=80&cameraZoom=9.1&color1=%23606080&color2=%238d7dca&color3=%23212121&embedMode=off&envPreset=city&gizmoHelper=hide&grain=on&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=0&positionZ=0&reflection=0.1&rotationX=50&rotationY=0&rotationZ=-60&shader=defaults&type=waterPlane&uAmplitude=0&uDensity=1.5&uFrequency=0&uSpeed=0.3&uStrength=1.5&uTime=8&wireframe=false\"\n    },\n    {\n        title: \"Viola orientalis\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=on&brightness=1.1&cAzimuthAngle=0&cDistance=7.1&cPolarAngle=140&cameraZoom=17.3&color1=%23ffffff&color2=%23ffbb00&color3=%230700ff&embedMode=off&envPreset=city&grain=off&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=0&positionZ=0&reflection=0.1&rotationX=0&rotationY=0&rotationZ=0&type=sphere&uAmplitude=1.4&uDensity=1.1&uSpeed=0.1&uStrength=1&uTime=0&wireframe=false&uFrequency=5.5&shader=defaults\"\n    },\n    {\n        title: \"Universe\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=on&brightness=1.1&cAzimuthAngle=180&cDistance=3.9&cPolarAngle=115&cameraZoom=1&color1=%235606FF&color2=%23FE8989&color3=%23000000&embedMode=off&envPreset=city&grain=off&lightType=3d&pixelDensity=1&fov=45&positionX=-0.5&positionY=0.1&positionZ=0&reflection=0.1&rotationX=0&rotationY=0&rotationZ=235&type=waterPlane&uAmplitude=0&uDensity=1.1&uSpeed=0.1&uStrength=2.4&uTime=0.2&uFrequency=5.5&wireframe=false&shader=defaults\"\n    },\n    {\n        title: \"Sunset\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=on&bgColor1=%23000000&bgColor2=%23000000&brightness=1.5&cAzimuthAngle=60&cDistance=7.1&cPolarAngle=90&cameraZoom=15.3&color1=%23ff7a33&color2=%2333a0ff&color3=%23ffc53d&embedMode=off&envPreset=dawn&grain=off&http%3A%2F%2Flocalhost%3A3002%2Fcustomize%3Fanimate=on&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=-0.15&positionZ=0&reflection=0.1&rotationX=0&rotationY=0&rotationZ=0&shader=defaults&type=sphere&uAmplitude=1.4&uDensity=1.1&uSpeed=0.1&uStrength=0.4&uTime=0&uFrequency=5.5&wireframe=false\"\n    },\n    {\n        title: \"Mandarin\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=on&bgColor1=%23000000&bgColor2=%23000000&brightness=1.2&cAzimuthAngle=180&cDistance=2.4&cPolarAngle=95&cameraZoom=1&color1=%23ff6a1a&color2=%23c73c00&color3=%23FD4912&embedMode=off&envPreset=city&grain=off&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=-2.1&positionZ=0&reflection=0.1&rotationX=0&rotationY=0&rotationZ=225&shader=defaults&type=waterPlane&uAmplitude=0&uFrequency=5.5&uDensity=1.8&uSpeed=0.2&uStrength=3&uTime=0.2&wireframe=false\"\n    },\n    {\n        title: \"Cotton Candy\",\n        color: \"white\",\n        url: \"?range=enabled&rangeStart=0&rangeEnd=40&frameRate=10&destination=onCanvas&format=gif&animate=on&axesHelper=off&brightness=1.2&cAzimuthAngle=180&cDistance=2.9&cPolarAngle=120&cameraZoom=1&color1=%23ebedff&color2=%23f3f2f8&color3=%23dbf8ff&embedMode=off&envPreset=city&gizmoHelper=hide&grain=off&lightType=3d&pixelDensity=1&fov=45&positionX=0&positionY=1.8&positionZ=0&reflection=0.1&rotationX=0&rotationY=0&rotationZ=-90&type=waterPlane&uDensity=1&uSpeed=0.3&uStrength=3&uTime=0.2&uFrequency=5.5&wireframe=false&shader=defaults\"\n    }\n], pp = qo[0].url;\n\nvar Tf = jo.parse($r(qo[0].url), {\n    parseNumbers: !0,\n    parseBooleans: !0,\n    arrayFormat: \"index\"\n});\nfunction bp(s) {\n    var a = s, { control: t = \"props\", dampingFactor: e, rotSpringOption: r, posSpringOption: o, isFigmaPlugin: n = !1 } = a, i = Z(a, [\n        \"control\",\n        \"dampingFactor\",\n        \"rotSpringOption\",\n        \"posSpringOption\",\n        \"isFigmaPlugin\"\n    ]);\n    let l = D(D({}, Tf), i);\n    t === \"query\" && (l = jo.parse($r(i.urlString), {\n        parseNumbers: !0,\n        parseBooleans: !0,\n        arrayFormat: \"index\"\n    }));\n    let g = l, { lightType: c, envPreset: d, brightness: u, grain: v, toggleAxis: h } = g, p = Z(g, [\n        \"lightType\",\n        \"envPreset\",\n        \"brightness\",\n        \"grain\",\n        \"toggleAxis\"\n    ]);\n    return Mr(v === \"off\"), (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(di, {\n                lightType: c,\n                brightness: u,\n                envPreset: d\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Ms, W(D({}, p), {\n                rotSpringOption: r,\n                posSpringOption: o\n            }), JSON.stringify(p)),\n            h && (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(kn, {\n                isFigmaPlugin: n\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(si, D({\n                dampingFactor: e\n            }, p))\n        ]\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/shadergradient/dist/without-store.mjs\n");

/***/ })

};
;